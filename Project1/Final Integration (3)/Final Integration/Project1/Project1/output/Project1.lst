FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 14 4B LJMP  PSoC_GPIO_ISR      (0145)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 1E LJMP  _Timer16_1_ISR     (0153)     ljmp	_Timer16_1_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 07 63 LJMP  _DUALADC_1_PWM16_ISR(0185)     ljmp	_DUALADC_1_PWM16_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 07 5D LJMP  _DUALADC_1_CNT1_ISR(0189)     ljmp	_DUALADC_1_CNT1_ISR
004B: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 07 60 LJMP  _DUALADC_1_CNT2_ISR(0193)     ljmp	_DUALADC_1_CNT2_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 B3 LCALL 0x03B3             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 AC    MOV   X,0xAC             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 40    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 40    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 40    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 3F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 40    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 40 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 3F    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 3F    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 40    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 40 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 3F    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 09 1E LCALL __UserModules_end|_main|__text_start(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
02AE: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_project1_Bank1
                                        (0019) export LoadConfigTBL_project1_Bank0
                                        (0020) export LoadConfigTBL_project1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_project1_Bank0:
                                        (0023) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0024) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0025) 	db		90h, 90h		;DUALADC_1_bfADC1cr0(ASD20CR0)
                                        (0026) 	db		91h, a0h		;DUALADC_1_bfADC1cr1(ASD20CR1)
                                        (0027) 	db		92h, 61h		;DUALADC_1_bfADC1cr2(ASD20CR2)
                                        (0028) 	db		93h, f0h		;DUALADC_1_bfADC1cr3(ASD20CR3)
                                        (0029) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0030) 	db		98h, 90h		;DUALADC_1_bfADC2cr0(ASD22CR0)
                                        (0031) 	db		99h, a0h		;DUALADC_1_bfADC2cr1(ASD22CR1)
                                        (0032) 	db		9ah, 60h		;DUALADC_1_bfADC2cr2(ASD22CR2)
                                        (0033) 	db		9bh, f0h		;DUALADC_1_bfADC2cr3(ASD22CR3)
                                        (0034) ;       Instance name DUALADC_1, Block Name CNT1(DCB22)
                                        (0035) 	db		4bh, 00h		;DUALADC_1_bCounter1_CR0(DCB22CR0)
                                        (0036) 	db		49h, 00h		;DUALADC_1_bPeriod1(DCB22DR1)
                                        (0037) 	db		4ah, 00h		;DUALADC_1_bCompare1(DCB22DR2)
                                        (0038) ;       Instance name DUALADC_1, Block Name CNT2(DCB23)
                                        (0039) 	db		4fh, 00h		;DUALADC_1_bCounter2_CR0(DCB23CR0)
                                        (0040) 	db		4dh, 00h		;DUALADC_1_bPeriod2(DCB23DR1)
                                        (0041) 	db		4eh, 00h		;DUALADC_1_bCompare2(DCB23DR2)
                                        (0042) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB20)
                                        (0043) 	db		43h, 00h		;DUALADC_1_fPWM_LSB_CR0(DBB20CR0)
                                        (0044) 	db		41h, 00h		;DUALADC_1_bPWM_Period_LSB(DBB20DR1)
                                        (0045) 	db		42h, 00h		;DUALADC_1_bPWM_IntTime_LSB(DBB20DR2)
                                        (0046) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DBB21)
                                        (0047) 	db		47h, 00h		;DUALADC_1_fPWM_MSB_CR0(DBB21CR0)
                                        (0048) 	db		45h, 00h		;DUALADC_1_bPWM_Period_MSB(DBB21DR1)
                                        (0049) 	db		46h, 00h		;DUALADC_1_bPWM_IntTime_MSB(DBB21DR2)
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Instance name LPF2_1, User Module LPF2
                                        (0052) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0053) 	db		80h, 94h		;LPF2_1_FLIN_CR0(ASC10CR0)
                                        (0054) 	db		81h, 88h		;LPF2_1_FLIN_CR1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;LPF2_1_FLIN_CR2(ASC10CR2)
                                        (0056) 	db		83h, 24h		;LPF2_1_FLIN_CR3(ASC10CR3)
                                        (0057) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0058) 	db		84h, 92h		;LPF2_1_FLOUT_CR0(ASD11CR0)
                                        (0059) 	db		85h, 40h		;LPF2_1_FLOUT_CR1(ASD11CR1)
                                        (0060) 	db		86h, 9fh		;LPF2_1_FLOUT_CR2(ASD11CR2)
                                        (0061) 	db		87h, 20h		;LPF2_1_FLOUT_CR3(ASD11CR3)
                                        (0062) ;  Instance name LPF2_2, User Module LPF2
                                        (0063) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0064) 	db		88h, 94h		;LPF2_2_FLIN_CR0(ASC12CR0)
                                        (0065) 	db		89h, 88h		;LPF2_2_FLIN_CR1(ASC12CR1)
                                        (0066) 	db		8ah, 00h		;LPF2_2_FLIN_CR2(ASC12CR2)
                                        (0067) 	db		8bh, 24h		;LPF2_2_FLIN_CR3(ASC12CR3)
                                        (0068) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0069) 	db		8ch, 92h		;LPF2_2_FLOUT_CR0(ASD13CR0)
                                        (0070) 	db		8dh, 40h		;LPF2_2_FLOUT_CR1(ASD13CR1)
                                        (0071) 	db		8eh, 9fh		;LPF2_2_FLOUT_CR2(ASD13CR2)
                                        (0072) 	db		8fh, 20h		;LPF2_2_FLOUT_CR3(ASD13CR3)
                                        (0073) ;  Instance name PGA_1, User Module PGA
                                        (0074) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0075) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0076) 	db		72h, a3h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0077) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0078) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0079) ;  Instance name PGA_2, User Module PGA
                                        (0080) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0081) 	db		75h, 1dh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0082) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0083) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0084) 	db		74h, 01h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0085) ;  Instance name PGA_3, User Module PGA
                                        (0086) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0087) 	db		79h, fdh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0088) 	db		7ah, a3h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0089) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0090) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0091) ;  Instance name PGA_4, User Module PGA
                                        (0092) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0093) 	db		7dh, 1dh		;PGA_4_GAIN_CR0(ACB03CR0)
                                        (0094) 	db		7eh, 21h		;PGA_4_GAIN_CR1(ACB03CR1)
                                        (0095) 	db		7fh, 20h		;PGA_4_GAIN_CR2(ACB03CR2)
                                        (0096) 	db		7ch, 01h		;PGA_4_GAIN_CR3(ACB03CR3)
                                        (0097) ;  Instance name Timer16_1, User Module Timer16
                                        (0098) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0099) 	db		23h, 00h		;Timer16_1_CONTROL_LSB_REG(DBB00CR0)
                                        (0100) 	db		21h, 98h		;Timer16_1_PERIOD_LSB_REG(DBB00DR1)
                                        (0101) 	db		22h, 00h		;Timer16_1_COMPARE_LSB_REG(DBB00DR2)
                                        (0102) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0103) 	db		27h, 04h		;Timer16_1_CONTROL_MSB_REG(DBB01CR0)
                                        (0104) 	db		25h, 3ah		;Timer16_1_PERIOD_MSB_REG(DBB01DR1)
                                        (0105) 	db		26h, 00h		;Timer16_1_COMPARE_MSB_REG(DBB01DR2)
                                        (0106) ;  Global Register values Bank 0
                                        (0107) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0108) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0109) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0110) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0111) 	db		e6h, 50h		; DecimatorControl_0 register (DEC_CR0)
                                        (0112) 	db		e7h, 28h		; DecimatorControl_1 register (DEC_CR1)
                                        (0113) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0114) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0115) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0116) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0117) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0118) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0119) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0120) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0121) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0122) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0123) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0124) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0125) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0126) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0127) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0128) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0129) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0130) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0131) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0132) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0133) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0134) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0135) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0136) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0137) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0138) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0139) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0140) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0141) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0142) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0143) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0144) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0145) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0146) 	db		ffh
                                        (0147) LoadConfigTBL_project1_Bank1:
                                        (0148) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0149) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0150) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0151) ;       Instance name DUALADC_1, Block Name CNT1(DCB22)
                                        (0152) 	db		48h, 21h		;DUALADC_1_fCounter1FN(DCB22FN)
                                        (0153) 	db		49h, 45h		;DUALADC_1_fCounter1SL(DCB22IN)
                                        (0154) 	db		4ah, 40h		;DUALADC_1_fCounter1OS(DCB22OU)
                                        (0155) ;       Instance name DUALADC_1, Block Name CNT2(DCB23)
                                        (0156) 	db		4ch, 21h		;DUALADC_1_fCounter2FN(DCB23FN)
                                        (0157) 	db		4dh, 65h		;DUALADC_1_fCounter2SL(DCB23IN)
                                        (0158) 	db		4eh, 40h		;DUALADC_1_fCounter2OS(DCB23OU)
                                        (0159) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB20)
                                        (0160) 	db		40h, 01h		;DUALADC_1_bfPWM_LSB_FN(DBB20FN)
                                        (0161) 	db		41h, 15h		;DUALADC_1_(DBA20IN)
                                        (0162) 	db		42h, 40h		;DUALADC_1_(DBA20OU)
                                        (0163) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DBB21)
                                        (0164) 	db		44h, 21h		;DUALADC_1_bfPWM_MSB_FN(DBB21FN)
                                        (0165) 	db		45h, 35h		;DUALADC_1_(DBB21IN)
                                        (0166) 	db		46h, 40h		;DUALADC_1_(DBB21OU)
                                        (0167) ;  Instance name LCD, User Module LCD
                                        (0168) ;  Instance name LPF2_1, User Module LPF2
                                        (0169) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0170) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0171) ;  Instance name LPF2_2, User Module LPF2
                                        (0172) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0173) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0174) ;  Instance name PGA_1, User Module PGA
                                        (0175) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0176) ;  Instance name PGA_2, User Module PGA
                                        (0177) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0178) ;  Instance name PGA_3, User Module PGA
                                        (0179) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0180) ;  Instance name PGA_4, User Module PGA
                                        (0181) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0182) ;  Instance name Timer16_1, User Module Timer16
                                        (0183) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0184) 	db		20h, 10h		;Timer16_1_FUNC_LSB_REG(DBB00FN)
                                        (0185) 	db		21h, 01h		;Timer16_1_INPUT_LSB_REG(DBB00IN)
                                        (0186) 	db		22h, 40h		;Timer16_1_OUTPUT_LSB_REG(DBB00OU)
                                        (0187) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0188) 	db		24h, 30h		;Timer16_1_FUNC_MSB_REG(DBB01FN)
                                        (0189) 	db		25h, 31h		;Timer16_1_INPUT_MSB_REG(DBB01IN)
                                        (0190) 	db		26h, 40h		;Timer16_1_OUTPUT_MSB_REG(DBB01OU)
                                        (0191) ;  Global Register values Bank 1
                                        (0192) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0193) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0194) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0195) 	db		62h, bch		; AnalogIOControl_0 register (ABF_CR0)
                                        (0196) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0197) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0198) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0199) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0200) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0201) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0202) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0203) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0204) 	db		e1h, 2fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0205) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0206) 	db		dfh, 0fh		; OscillatorControl_3 register (OSC_CR3)
                                        (0207) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0208) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0209) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0210) 	db		ffh
                                        (0211) AREA psoc_config(rom, rel)
                                        (0212) LoadConfigTBL_project1_Ordered:
                                        (0213) ;  Ordered Global Register values
                                        (0214) 	M8C_SetBank0
02B0: 62 00 00 MOV   REG[0x0],0x0       (0215) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02B3: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
02B5: 62 00 00 MOV   REG[0x0],0x0       (0217) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
02B8: 62 01 FF MOV   REG[0x1],0xFF      (0218) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
02BB: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
02BD: 62 03 FF MOV   REG[0x3],0xFF      (0220) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
02C0: 62 02 00 MOV   REG[0x2],0x0       (0221) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02C3: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
02C5: 62 02 00 MOV   REG[0x2],0x0       (0223) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02C8: 62 03 00 MOV   REG[0x3],0x0       (0224) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02CB: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
02CD: 62 01 00 MOV   REG[0x1],0x0       (0226) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02D0: 62 04 00 MOV   REG[0x4],0x0       (0227) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02D3: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
02D5: 62 04 0F MOV   REG[0x4],0xF       (0229) 	mov	reg[04h], 0fh		; Port_1_DriveMode_0 register (PRT1DM0)
02D8: 62 05 F0 MOV   REG[0x5],0xF0      (0230) 	mov	reg[05h], f0h		; Port_1_DriveMode_1 register (PRT1DM1)
02DB: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
02DD: 62 07 F0 MOV   REG[0x7],0xF0      (0232) 	mov	reg[07h], f0h		; Port_1_DriveMode_2 register (PRT1DM2)
02E0: 62 06 00 MOV   REG[0x6],0x0       (0233) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02E3: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
02E5: 62 06 00 MOV   REG[0x6],0x0       (0235) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02E8: 62 07 00 MOV   REG[0x7],0x0       (0236) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02EB: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
02ED: 62 05 00 MOV   REG[0x5],0x0       (0238) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02F0: 62 08 00 MOV   REG[0x8],0x0       (0239) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02F3: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
02F5: 62 08 7F MOV   REG[0x8],0x7F      (0241) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
02F8: 62 09 00 MOV   REG[0x9],0x0       (0242) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
02FB: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
02FD: 62 0B 00 MOV   REG[0xB],0x0       (0244) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0300: 62 0A 00 MOV   REG[0xA],0x0       (0245) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0303: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0305: 62 0A 80 MOV   REG[0xA],0x80      (0247) 	mov	reg[0ah], 80h		; Port_2_IntCtrl_0 register (PRT2IC0)
0308: 62 0B 80 MOV   REG[0xB],0x80      (0248) 	mov	reg[0bh], 80h		; Port_2_IntCtrl_1 register (PRT2IC1)
030B: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
030D: 62 09 80 MOV   REG[0x9],0x80      (0250) 	mov	reg[09h], 80h		; Port_2_IntEn register (PRT2IE)
0310: 62 0C 00 MOV   REG[0xC],0x0       (0251) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0313: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
0315: 62 0C 00 MOV   REG[0xC],0x0       (0253) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0318: 62 0D 00 MOV   REG[0xD],0x0       (0254) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
031B: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
031D: 62 0F 00 MOV   REG[0xF],0x0       (0256) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0320: 62 0E 00 MOV   REG[0xE],0x0       (0257) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0323: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
0325: 62 0E 00 MOV   REG[0xE],0x0       (0259) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0328: 62 0F 00 MOV   REG[0xF],0x0       (0260) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
032B: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
032D: 62 0D 00 MOV   REG[0xD],0x0       (0262) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0330: 62 10 00 MOV   REG[0x10],0x0      (0263) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0333: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0335: 62 10 00 MOV   REG[0x10],0x0      (0265) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0338: 62 11 00 MOV   REG[0x11],0x0      (0266) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
033B: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
033D: 62 13 00 MOV   REG[0x13],0x0      (0268) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0340: 62 12 00 MOV   REG[0x12],0x0      (0269) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0343: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0345: 62 12 00 MOV   REG[0x12],0x0      (0271) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0348: 62 13 00 MOV   REG[0x13],0x0      (0272) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
034B: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
034D: 62 11 00 MOV   REG[0x11],0x0      (0274) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0350: 62 14 00 MOV   REG[0x14],0x0      (0275) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0353: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
0355: 62 14 00 MOV   REG[0x14],0x0      (0277) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0358: 62 15 00 MOV   REG[0x15],0x0      (0278) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
035B: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
035D: 62 17 00 MOV   REG[0x17],0x0      (0280) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0360: 62 16 00 MOV   REG[0x16],0x0      (0281) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0363: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
0365: 62 16 00 MOV   REG[0x16],0x0      (0283) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0368: 62 17 00 MOV   REG[0x17],0x0      (0284) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
036B: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
036D: 62 15 00 MOV   REG[0x15],0x0      (0286) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0370: 62 18 00 MOV   REG[0x18],0x0      (0287) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0373: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
0375: 62 18 00 MOV   REG[0x18],0x0      (0289) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0378: 62 19 00 MOV   REG[0x19],0x0      (0290) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
037B: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
037D: 62 1B 00 MOV   REG[0x1B],0x0      (0292) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0380: 62 1A 00 MOV   REG[0x1A],0x0      (0293) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0383: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
0385: 62 1A 00 MOV   REG[0x1A],0x0      (0295) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0388: 62 1B 00 MOV   REG[0x1B],0x0      (0296) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
038B: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
038D: 62 19 00 MOV   REG[0x19],0x0      (0298) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0390: 62 1C 00 MOV   REG[0x1C],0x0      (0299) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0393: 71 10    OR    F,0x10             
                                        (0300) 	M8C_SetBank1
0395: 62 1C 00 MOV   REG[0x1C],0x0      (0301) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0398: 62 1D 00 MOV   REG[0x1D],0x0      (0302) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
039B: 70 EF    AND   F,0xEF             
                                        (0303) 	M8C_SetBank0
039D: 62 1F 00 MOV   REG[0x1F],0x0      (0304) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03A0: 62 1E 00 MOV   REG[0x1E],0x0      (0305) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03A3: 71 10    OR    F,0x10             
                                        (0306) 	M8C_SetBank1
03A5: 62 1E 00 MOV   REG[0x1E],0x0      (0307) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03A8: 62 1F 00 MOV   REG[0x1F],0x0      (0308) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03AB: 70 EF    AND   F,0xEF             
                                        (0309) 	M8C_SetBank0
03AD: 62 1D 00 MOV   REG[0x1D],0x0      (0310) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03B0: 70 EF    AND   F,0xEF             
                                        (0311) 	M8C_SetBank0
03B2: 7F       RET                      (0312) 	ret
                                        (0313) 
                                        (0314) 
                                        (0315) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
03B3: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
03B6: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
03B9: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
03BC: 7C 03 C3 LCALL 0x03C3             (0069) 	lcall	LoadConfig_project1
03BF: 7C 02 AE LCALL 0x02AE             (0070) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
03C2: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration project1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for project1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_project1:
                                        (0096)  LoadConfig_project1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
03C3: 10       PUSH  X                  (0099) 	push	x
03C4: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
03C6: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
03C8: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
03C9: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_project1_Bank0
03CB: 57 A0    MOV   X,0xA0             (0105)     mov     X, <LoadConfigTBL_project1_Bank0
03CD: 7C 03 DE LCALL 0x03DE             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
03D0: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
03D2: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
03D3: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_project1_Bank1
03D5: 57 63    MOV   X,0x63             (0112)     mov     X, <LoadConfigTBL_project1_Bank1
03D7: 7C 03 DE LCALL 0x03DE             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03DA: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03DC: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03DD: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03DE: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03E0: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03E1: 08       PUSH  A                  (0143)     push    A
03E2: 4F       MOV   X,SP               (0144)     mov     X, SP
03E3: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03E6: D0 04    JNC   0x03EB             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03E8: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03EB: 18       POP   A                  (0149)     pop     A
03EC: 20       POP   X                  (0150)     pop     X
03ED: 70 EF    AND   F,0xEF             
03EF: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03F2: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03F3: 08       PUSH  A                  (0156)     push    A
03F4: 28       ROMX                     (0157)     romx                            ; Load register address from table
03F5: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03F7: A0 1F    JZ    0x0417             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03F9: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03FA: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03FD: A0 03    JZ    0x0401             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03FF: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0401: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0403: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0404: 20       POP   X                  (0167)     pop     X
0405: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0406: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0408: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0409: 08       PUSH  A                  (0171)     push    A
040A: 28       ROMX                     (0172)     romx                            ; load config data from the table
040B: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
040C: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
040E: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0410: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0411: 20       POP   X                  (0177)     pop     X
0412: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0413: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0415: 8F D7    JMP   0x03ED             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0417: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0419: 70 3F    AND   F,0x3F             
041B: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
041D: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer16_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) include "program_defines.inc"
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
041E: 08       PUSH  A                  (0074)     push A
041F: 10       PUSH  X                  (0075) 	push X
                                        (0076) 	
0420: 76 09    INC   [0x9]              (0077)    	inc [addr_internal_inc_ms]
0422: 76 0C    INC   [0xC]              (0078) 	inc [addr_pin_inc_ms];gpio
0424: 76 0D    INC   [0xD]              (0079) 	inc [addr_adc_inc_ms];
0426: 76 0B    INC   [0xB]              (0080) 	inc [addr_timer_inc_ms]		;idk man
                                        (0081) 
0428: 20       POP   X                  (0082) 	pop X
0429: 18       POP   A                  (0083) 	pop A
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function below this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    
                                        (0090)    ;PRESERVE_CPU_CONTEXT
                                        (0091)    ;lcall _My_C_Function
                                        (0092)    ;RESTORE_CPU_CONTEXT
                                        (0093)    
                                        (0094)    ;---------------------------------------------------
                                        (0095)    ; Insert a lcall to a C function above this banner
                                        (0096)    ; and un-comment the lines between these banners
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0099) 
042A: 7E       RETI                     (0100)    reti
                                        (0101) 
                                        (0102) 
                                        (0103) ; end of file Timer16_1INT.asm
FILE: lib\timer16_1.asm                 (0001) ;;*****************************************************************************
042B: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_1_EnableInt
                                        (0030) export _Timer16_1_EnableInt
                                        (0031) export  Timer16_1_DisableInt
                                        (0032) export _Timer16_1_DisableInt
                                        (0033) export  Timer16_1_Start
                                        (0034) export _Timer16_1_Start
                                        (0035) export  Timer16_1_Stop
                                        (0036) export _Timer16_1_Stop
                                        (0037) export  Timer16_1_WritePeriod
                                        (0038) export _Timer16_1_WritePeriod
                                        (0039) export  Timer16_1_WriteCompareValue
                                        (0040) export _Timer16_1_WriteCompareValue
                                        (0041) export  Timer16_1_wReadCompareValue
                                        (0042) export _Timer16_1_wReadCompareValue
                                        (0043) export  Timer16_1_wReadTimer
                                        (0044) export _Timer16_1_wReadTimer
                                        (0045) export  Timer16_1_wReadTimerSaveCV
                                        (0046) export _Timer16_1_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_1_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_1_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_1_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_1_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_1_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_1_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_1_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA project1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_1_EnableInt:
                                        (0098) _Timer16_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
042E: 7F       RET                      (0102)    ret
042F: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_1_DisableInt:
                                        (0126) _Timer16_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0432: 7F       RET                      (0130)    ret
0433: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_1_Start:
                                        (0154) _Timer16_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0436: 7F       RET                      (0158)    ret
0437: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_1_Stop:
                                        (0182) _Timer16_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
043A: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_1_WritePeriod:
                                        (0211) _Timer16_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
043B: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_1_PERIOD_LSB_REG], A
043D: 5B       MOV   A,X                (0214)    mov   A, X
043E: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_1_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0440: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_1_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_1_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_1_WriteCompareValue:
                                        (0243) _Timer16_1_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0441: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
0443: 5B       MOV   A,X                (0246)    mov   A, X
0444: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0446: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_1_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_1_wReadCompareValue:
                                        (0272) _Timer16_1_wReadCompareValue:
                                        (0273)  wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0447: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0449: 5C       MOV   X,A                (0277)    mov   X, A
044A: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
044C: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_1_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_1_wReadTimerSaveCV:
                                        (0321) _Timer16_1_wReadTimerSaveCV:
                                        (0322)  wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0325) _wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
044D: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
044E: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0450: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_1_CONTROL_LSB_REG]       ; save the Control register
0452: 08       PUSH  A                  (0335)    push  A
0453: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]       ; save the Compare register
0455: 08       PUSH  A                  (0337)    push  A
0456: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0458: 08       PUSH  A                  (0339)    push  A
0459: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
045B: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
045D: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
045F: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
0461: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0463: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0465: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0468: A0 03    JZ    0x046C             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
046A: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
046C: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
046E: 70 FE    AND   F,0xFE             
0470: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_1_Stop_M                              ; Disable (stop) the timer
0473: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0474: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
0476: 18       POP   A                  (0356)    pop   A
0477: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
0479: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
047A: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_1_CONTROL_LSB_REG], A
047C: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
047D: 20       POP   X                  (0361)    pop   X
047E: 70 3F    AND   F,0x3F             
0480: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0482: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_1_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_1_wReadTimer:
                                        (0397) _Timer16_1_wReadTimer:
                                        (0398)  wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0399) _wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0400)  wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0483: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0485: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0487: 5C       MOV   X,A                (0408)    mov   X, A
0488: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
048A: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_1.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
048B: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
048D: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
048E: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
048F: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
0491: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0493: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0495: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
0497: 18       POP   A                  (0124)    pop  A
0498: 70 3F    AND   F,0x3F             
049A: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
049C: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
049D: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
049F: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
04A0: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
04A1: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
04A3: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
04A5: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
04A8: B0 0E    JNZ   0x04B7             (0164)    jnz  .SETHIGHGAIN
04AA: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
04AD: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
04AF: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
04B1: 18       POP   A                  (0168)    pop  A
04B2: 70 3F    AND   F,0x3F             
04B4: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
04B6: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
04B7: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
04BA: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
04BC: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
04BE: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
04C1: 18       POP   A                  (0177)    pop  A
04C2: 70 3F    AND   F,0x3F             
04C4: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
04C6: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
04C7: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
04CA: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
04CB: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
04CD: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
04CE: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
04CF: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
04D1: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
04D3: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
04D5: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
04D7: 18       POP   A                  (0124)    pop  A
04D8: 70 3F    AND   F,0x3F             
04DA: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
04DC: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
04DD: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
04DF: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
04E0: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
04E1: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
04E3: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
04E5: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
04E8: B0 0E    JNZ   0x04F7             (0164)    jnz  .SETHIGHGAIN
04EA: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
04ED: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
04EF: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
04F1: 18       POP   A                  (0168)    pop  A
04F2: 70 3F    AND   F,0x3F             
04F4: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
04F6: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
04F7: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
04FA: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
04FC: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
04FE: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
0501: 18       POP   A                  (0177)    pop  A
0502: 70 3F    AND   F,0x3F             
0504: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0506: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0507: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
050A: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lpf2_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LPF2_1.asm
                                        (0004) ;;   Version: 4.10, Updated on 2015/3/4 at 22:26:40
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 2 Pole Switched Capacitor Low Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "LPF2_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  LPF2_1_Start
                                        (0031) export _LPF2_1_Start
                                        (0032) export  LPF2_1_SetPower
                                        (0033) export _LPF2_1_SetPower
                                        (0034) 
                                        (0035) export  LPF2_1_SetC1
                                        (0036) export _LPF2_1_SetC1
                                        (0037) export  LPF2_1_SetC2
                                        (0038) export _LPF2_1_SetC2
                                        (0039) export  LPF2_1_SetC3
                                        (0040) export _LPF2_1_SetC3
                                        (0041) export  LPF2_1_SetC4
                                        (0042) export _LPF2_1_SetC4
                                        (0043) export  LPF2_1_SetCA
                                        (0044) export _LPF2_1_SetCA
                                        (0045) export  LPF2_1_SetCB
                                        (0046) export _LPF2_1_SetCB
                                        (0047) export  LPF2_1_SetPolarity
                                        (0048) export _LPF2_1_SetPolarity
                                        (0049) 
                                        (0050) export  LPF2_1_Stop
                                        (0051) export _LPF2_1_Stop
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) AREA bss (RAM,REL)
                                        (0058) 
                                        (0059) 
                                        (0060) 
                                        (0061) ;-----------------------------------------------
                                        (0062) ;  EQUATES
                                        (0063) ;-----------------------------------------------
                                        (0064) bPOWERMASK:          equ   03h         ; Power field mask for CR3
                                        (0065) LPF_CNUMMASK:        equ   1fh         ; Mask for A, B & C Caps
                                        (0066) LPF_CFBMASK:         equ   80h         ; Mask for Feedback Caps
                                        (0067) LPF_POLARITYMASK:    equ   20h         ; Mask of Asign field for CR0
                                        (0068) 
                                        (0069) LPF2_1_IfCond:          equ LPF2_1_AMD_MSK & 0x01
                                        (0070) 
                                        (0071) IF (LPF2_1_AMD_VAL)
                                        (0072)  IF (LPF2_1_IfCond)
                                        (0073)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL
                                        (0074)  ELSE
                                        (0075)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL << 4
                                        (0076)  ENDIF
                                        (0077) ENDIF
                                        (0078) 
                                        (0079) AREA UserModules (ROM,REL)
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: LPF2_1_Start
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0088) ;  RETURNS:      Nothing
                                        (0089) ;  SIDE EFFECTS: 
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) 
                                        (0097)  LPF2_1_Start:
                                        (0098) _LPF2_1_Start:
                                        (0099)  LPF2_1_SetPower:
                                        (0100) _LPF2_1_SetPower:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_2
050B: 21 03    AND   A,0x3              (0102)     and A, bPOWERMASK                        ; mask A to protect unchanged bits
050D: 4F       MOV   X,SP               (0103)     mov X, SP                                ; define temp store location
                                        (0104) 
050E: 08       PUSH  A                  (0105)     push A                                   ; put power value in temp store
                                        (0106) 
                                        (0107) IF (LPF2_1_AMD_VAL)
                                        (0108)    M8C_SetBank1
                                        (0109)    mov   A, reg[LPF2_1_AMD_REG]                  ; read modulator register
                                        (0110)    and   A, ~LPF2_1_AMD_MSK                      ; clear modulator bittfield in A
                                        (0111)    or    A, LPF2_1_AMD                           ; combine modulator value with balance of register
                                        (0112)    mov   reg[LPF2_1_AMD_REG], A                  ; move complete value back to register
                                        (0113)    M8C_SetBank0
                                        (0114) ENDIF
                                        (0115) 
050F: 5D 83    MOV   A,REG[0x83]        (0116)     mov A, reg[LPF2_1_FLIN_CR3]    ; read power value
0511: 21 FC    AND   A,0xFC             (0117)     and A, ~bPOWERMASK                       ; clear power bits in A
0513: 2B 00    OR    A,[X+0]            (0118)     or  A, [X]                               ; combine power value with balance of reg.
0515: 60 83    MOV   REG[0x83],A        (0119)     mov reg[LPF2_1_FLIN_CR3], A    ; move complete value back to register
                                        (0120) 
0517: 5D 87    MOV   A,REG[0x87]        (0121)     mov A, reg[LPF2_1_FLOUT_CR3]   ; read power value
0519: 21 FC    AND   A,0xFC             (0122)     and A, ~bPOWERMASK                       ; clear power bits in A
051B: 2B 00    OR    A,[X+0]            (0123)     or  A, [X]                               ; combine power value with balance of reg.
051D: 60 87    MOV   REG[0x87],A        (0124)     mov reg[LPF2_1_FLOUT_CR3], A   ; move complete value back to register
051F: 18       POP   A                  (0125)     pop A
0520: 70 3F    AND   F,0x3F             
0522: 71 C0    OR    F,0xC0             
                                        (0126)     RAM_EPILOGUE RAM_USE_CLASS_2
0524: 7F       RET                      (0127)     ret
                                        (0128) 
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LPF2_1_SetCn, n=1..4
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0133) ;                 of the capacitors (defined in LPF2_1.inc)
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0138) ;  RETURNS:
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146) 
                                        (0147)  LPF2_1_SetC1:
                                        (0148) _LPF2_1_SetC1:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
0525: 21 1F    AND   A,0x1F             (0150)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0527: 4F       MOV   X,SP               (0151)     mov X, SP                                ; define temp store location
0528: 08       PUSH  A                  (0152)     push A                                   ; put C1 value in temp store
0529: 5D 80    MOV   A,REG[0x80]        (0153)     mov A, reg[LPF2_1_FILT_C1_REG] ; read current C1
052B: 21 E0    AND   A,0xE0             (0154)     and A, ~LPF_CNUMMASK                     ; clear C1 bits in A
052D: 2B 00    OR    A,[X+0]            (0155)     or  A, [X]                               ; combine C1 value with balance of reg.
052F: 60 80    MOV   REG[0x80],A        (0156)     mov reg[LPF2_1_FILT_C1_REG], A ; move complete value back to register
0531: 18       POP   A                  (0157)     pop  A
0532: 70 3F    AND   F,0x3F             
0534: 71 C0    OR    F,0xC0             
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
0536: 7F       RET                      (0159)     ret
                                        (0160) 
                                        (0161)  LPF2_1_SetC2:
                                        (0162) _LPF2_1_SetC2:
                                        (0163)     RAM_PROLOGUE RAM_USE_CLASS_2
0537: 21 1F    AND   A,0x1F             (0164)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0539: 4F       MOV   X,SP               (0165)     mov X, SP                                ; define temp store location
053A: 08       PUSH  A                  (0166)     push A                                   ; put C2 value in temp store
053B: 5D 81    MOV   A,REG[0x81]        (0167)     mov A, reg[LPF2_1_FILT_C2_REG] ; read current C2
053D: 21 E0    AND   A,0xE0             (0168)     and A, ~LPF_CNUMMASK                     ; clear C2 bits in A
053F: 2B 00    OR    A,[X+0]            (0169)     or  A, [X]                               ; combine C2 value with balance of reg.
0541: 60 81    MOV   REG[0x81],A        (0170)     mov reg[LPF2_1_FILT_C2_REG], A ; move complete value back to register
0543: 18       POP   A                  (0171)     pop A
0544: 70 3F    AND   F,0x3F             
0546: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0548: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175)  LPF2_1_SetC3:
                                        (0176) _LPF2_1_SetC3:
                                        (0177)     RAM_PROLOGUE RAM_USE_CLASS_2
0549: 21 1F    AND   A,0x1F             (0178)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
054B: 4F       MOV   X,SP               (0179)     mov X, SP                                ; define temp store location
054C: 08       PUSH  A                  (0180)     push A                                   ; put C3 value in temp store
054D: 5D 84    MOV   A,REG[0x84]        (0181)     mov A, reg[LPF2_1_FILT_C3_REG] ; read current C3
054F: 21 E0    AND   A,0xE0             (0182)     and A, ~LPF_CNUMMASK                     ; clear C3 bits in A
0551: 2B 00    OR    A,[X+0]            (0183)     or  A, [X]                               ; combine C3 value with balance of reg.
0553: 60 84    MOV   REG[0x84],A        (0184)     mov reg[LPF2_1_FILT_C3_REG], A ; move complete value back to register
0555: 18       POP   A                  (0185)     pop A
0556: 70 3F    AND   F,0x3F             
0558: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
055A: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189)  LPF2_1_SetC4:
                                        (0190) _LPF2_1_SetC4:
                                        (0191)     RAM_PROLOGUE RAM_USE_CLASS_2
055B: 21 1F    AND   A,0x1F             (0192)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
055D: 4F       MOV   X,SP               (0193)     mov X, SP                                ; define temp store location
055E: 08       PUSH  A                  (0194)     push A                                   ; put C4 value in temp store
055F: 5D 86    MOV   A,REG[0x86]        (0195)     mov A, reg[LPF2_1_FILT_C4_REG] ; read current C4
0561: 21 E0    AND   A,0xE0             (0196)     and A, ~LPF_CNUMMASK                     ; clear C4 bits in A
0563: 2B 00    OR    A,[X+0]            (0197)     or  A, [X]                               ; combine C4 value with balance of reg.
0565: 60 86    MOV   REG[0x86],A        (0198)     mov reg[LPF2_1_FILT_C4_REG], A ; move complete value back to register
0567: 18       POP   A                  (0199)     pop A
0568: 70 3F    AND   F,0x3F             
056A: 71 C0    OR    F,0xC0             
                                        (0200)     RAM_EPILOGUE RAM_USE_CLASS_2
056C: 7F       RET                      (0201)     ret
                                        (0202) 
                                        (0203) 
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: LPF2_1_SetCA
                                        (0206) ;            and  LPF2_1_SetCB
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0209) ;                 of the op-amp feedback capacitors (see LPF2_1.inc)
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:    The A register contains one of the LPF2_1_FEEDBACK
                                        (0213) ;                  constants defined in LPF2_1.inc
                                        (0214) ;  RETURNS:      Nothing.
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) 
                                        (0223)  LPF2_1_SetCA:
                                        (0224) _LPF2_1_SetCA:
                                        (0225)     RAM_PROLOGUE RAM_USE_CLASS_1
056D: 39 01    CMP   A,0x1              (0226)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
056F: A0 05    JZ    0x0575             (0227)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0228)                                              ;     No, clear it to 16 units...
0571: 41 80 7F AND   REG[0x80],0x7F     (0229)     and   reg[LPF2_1_FILT_CA_REG], ~LPF_CFBMASK
                                        (0230)     RAM_EPILOGUE RAM_USE_CLASS_1 
0574: 7F       RET                      (0231)     ret
                                        (0232) .SetCAto32:
0575: 43 80 80 OR    REG[0x80],0x80     (0233)     or    reg[LPF2_1_FILT_CA_REG],  LPF_CFBMASK
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_1
0578: 7F       RET                      (0235)     ret
                                        (0236) 
                                        (0237) 
                                        (0238)  LPF2_1_SetCB:
                                        (0239) _LPF2_1_SetCB:
                                        (0240)     RAM_PROLOGUE RAM_USE_CLASS_1
0579: 39 01    CMP   A,0x1              (0241)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
057B: A0 05    JZ    0x0581             (0242)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0243)                                              ;     No, clear it to 16 units...
057D: 41 84 7F AND   REG[0x84],0x7F     (0244)     and   reg[LPF2_1_FILT_CB_REG], ~LPF_CFBMASK
                                        (0245)     RAM_EPILOGUE RAM_USE_CLASS_1
0580: 7F       RET                      (0246)     ret
                                        (0247) .SetCAto32:
0581: 43 84 80 OR    REG[0x84],0x80     (0248)     or    reg[LPF2_1_FILT_CB_REG],  LPF_CFBMASK
                                        (0249)     RAM_EPILOGUE RAM_USE_CLASS_1
0584: 7F       RET                      (0250)     ret
                                        (0251) 
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: LPF2_1_SetPolarity
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Alters the output polarity of the data by altering the
                                        (0256) ;                 input polarity at FLIN
                                        (0257) ;-----------------------------------------------------------------------------
                                        (0258) ;
                                        (0259) ;  ARGUMENTS:    The A register contains one of the LPF2_1_POLARITY
                                        (0260) ;                  constants defined in LPF2_1.inc
                                        (0261) ;  RETURNS:      Nothing.
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269) 
                                        (0270)  LPF2_1_SetPolarity:
                                        (0271) _LPF2_1_SetPolarity:
                                        (0272)     RAM_PROLOGUE RAM_USE_CLASS_1
0585: 39 01    CMP   A,0x1              (0273)     cmp   A, LPF2_1_POLARITY_NON_INVERTING ; Should the output be non-inverting?
0587: A0 05    JZ    0x058D             (0274)     jz    .SetPoltoNonInv                         ;    Yes, go make it so
                                        (0275)                                                   ;    No, then set it to Inverting...
0589: 43 80 20 OR    REG[0x80],0x20     (0276)     or    reg[LPF2_1_FLIN_CR0], LPF_POLARITYMASK
                                        (0277)     RAM_EPILOGUE RAM_USE_CLASS_1
058C: 7F       RET                      (0278)     ret
                                        (0279) .SetPoltoNonInv:
058D: 41 80 DF AND   REG[0x80],0xDF     (0280)     and   reg[LPF2_1_FLIN_CR0], ~LPF_POLARITYMASK
                                        (0281)     RAM_EPILOGUE RAM_USE_CLASS_1
0590: 7F       RET                      (0282)     ret
                                        (0283) 
                                        (0284) ;-----------------------------------------------------------------------------
                                        (0285) ;  FUNCTION NAME: LPF2_1_Stop
                                        (0286) ;
                                        (0287) ;  DESCRIPTION: Cuts power to the user module.
                                        (0288) ;
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;
                                        (0291) ;  ARGUMENTS:     None
                                        (0292) ;  RETURNS:       Nothing
                                        (0293) ;  SIDE EFFECTS: 
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;
                                        (0300)  LPF2_1_Stop:
                                        (0301) _LPF2_1_Stop:
                                        (0302) 
                                        (0303)     RAM_PROLOGUE RAM_USE_CLASS_1
0591: 41 83 FC AND   REG[0x83],0xFC     (0304)     and reg[LPF2_1_FLIN_CR3],  ~bPOWERMASK
0594: 41 87 FC AND   REG[0x87],0xFC     (0305)     and reg[LPF2_1_FLOUT_CR3], ~bPOWERMASK
                                        (0306)     RAM_EPILOGUE RAM_USE_CLASS_1
0597: 7F       RET                      (0307)     ret
                                        (0308) 
                                        (0309) 
                                        (0310) ; End of File LPF2_1.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0598: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0599: 10       PUSH  X                  (0209)     push  X
059A: 28       ROMX                     (0210)     romx                               ; Get character from ROM
059B: B0 04    JNZ   0x05A0             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
059D: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
059E: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
059F: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
05A0: 90 44    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
05A2: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
05A3: 18       POP   A                  (0220)     pop   A
05A4: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
05A5: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
05A7: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
05A8: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05BA: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05BB: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05BC: 67       ASR   A                  (0262)     asr   A
05BD: 67       ASR   A                  (0263)     asr   A
05BE: 67       ASR   A                  (0264)     asr   A
05BF: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
05C1: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
05C3: 90 21    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
05C5: 18       POP   A                  (0268)     pop   A                            ; Restore value
05C6: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
05C8: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
05CA: 90 1A    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
05CC: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
05CD: 4B       SWAP  A,X                (0305)     swap  A,X
05CE: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
05D0: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
05D1: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
05D3: 7F       RET                      (0310)     ret
05D4: 70 BF    AND   F,0xBF             
05D6: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
05D8: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
05DA: A0 06    JZ    0x05E1             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
05DC: 90 08    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
05DE: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
05DF: 8F F8    JMP   0x05D8             (0351)     jmp   .Loop_PrString               ; Go get next character
05E1: 70 3F    AND   F,0x3F             
05E3: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
05E5: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
05E6: 90 65    CALL  0x064D             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
05E8: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
05E9: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
05EA: 67       ASR   A                  (0390)     asr   A
05EB: 67       ASR   A                  (0391)     asr   A
05EC: 67       ASR   A                  (0392)     asr   A
05ED: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05EF: 90 3B    CALL  0x062C             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
05F1: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05F2: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05F4: 40       NOP                      (0397)     nop
05F5: 40       NOP                      (0398)     nop
05F6: 40       NOP                      (0399)     nop
05F7: 90 33    CALL  0x062C             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
05F9: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
05FA: 90 51    CALL  0x064D             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
05FC: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
05FD: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
05FE: 67       ASR   A                  (0436)     asr   A
05FF: 67       ASR   A                  (0437)     asr   A
0600: 67       ASR   A                  (0438)     asr   A
0601: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0603: 90 09    CALL  0x060E             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0605: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0606: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0608: 40       NOP                      (0443)     nop
0609: 40       NOP                      (0444)     nop
060A: 40       NOP                      (0445)     nop
060B: 90 01    CALL  0x060E             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
060D: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
060E: 08       PUSH  A                  (0477)     push  A
060F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0612: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0615: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0617: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0619: 18       POP   A                  (0483)     pop   A
061A: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
061C: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
061E: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0620: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0622: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0624: 40       NOP                      (0489)     nop
0625: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0627: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0629: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
062B: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
062C: 08       PUSH  A                  (0523)     push  A
062D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0630: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0633: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0636: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0638: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
063A: 18       POP   A                  (0530)     pop   A
063B: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
063D: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
063F: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0641: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0643: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0645: 40       NOP                      (0536)     NOP
0646: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0648: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
064A: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
064C: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
064D: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
064E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0651: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0654: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0656: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0658: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
065B: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
065D: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
065F: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0661: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0663: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0666: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0668: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
066A: 40       NOP                      (0586)     NOP
                                        (0587) 
066B: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
066C: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
066E: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0671: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0673: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0675: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0676: 40       NOP                      (0597)     nop
0677: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0679: 08       PUSH  A                  (0610)     push  A
067A: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
067D: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
067F: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0681: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0682: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0683: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0684: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0687: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0689: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
068B: 40       NOP                      (0623)     nop
068C: 40       NOP                      (0624)     nop
                                        (0625) 
068D: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0690: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0692: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0694: 18       POP   A                  (0630)     pop   A
0695: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0697: A0 04    JZ    0x069C             (0633)     jz    .UNLOCK
0699: 79       DEC   X                  (0634)     dec   X
069A: BF D3    JNZ   0x066E             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
069C: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
069D: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
06A0: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
06A2: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
06A4: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
06A6: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
06A8: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
06A9: 7F       RET                      (0646)     ret
06AA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
06AD: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
06B0: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
06B3: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
06B6: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
06B8: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
06BA: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
06BC: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
06BE: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
06C0: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06C2: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06C4: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
06C6: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06C8: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
06CA: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06CC: 9F 40    CALL  0x060E             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
06CE: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06D0: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
06D2: 50 03    MOV   A,0x3              (0707)     mov   A,03h
06D4: 9F 38    CALL  0x060E             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
06D6: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
06D8: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
06DA: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
06DC: 50 03    MOV   A,0x3              (0714)     mov   A,03h
06DE: 9F 2E    CALL  0x060E             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
06E0: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06E2: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
06E4: 50 02    MOV   A,0x2              (0720)     mov   A,02h
06E6: 9F 26    CALL  0x060E             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
06E8: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06EA: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
06EC: 50 08    MOV   A,0x8              (0726)     mov   A,08h
06EE: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
06F0: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06F2: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
06F4: 50 01    MOV   A,0x1              (0731)     mov   A,01h
06F6: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
06F8: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06FA: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
06FC: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06FE: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0700: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0702: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0704: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0706: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0708: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
070A: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
070C: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
070E: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0710: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0712: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0714: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0716: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0718: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
071D: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
071F: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0720: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0722: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0723: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0725: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0726: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0728: 70 3F    AND   F,0x3F             
072A: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
072C: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
072D: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
072F: 78       DEC   A                  (0828)     dec   A
0730: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0732: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
073B: 08       PUSH  A                  (0871)     push  A
073C: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
073E: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0740: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0742: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0744: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0746: D0 06    JNC   0x074D             (0877)     jnc   .Delay50u_End
0748: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
074A: 78       DEC   A                  (0880)     dec   A                              ; [4]
074B: BF FE    JNZ   0x074A             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
074D: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
074E: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadc_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADC_1INT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC_1.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_1_CNT1_ISR
                                        (0022) export _DUALADC_1_CNT2_ISR
                                        (0023) export _DUALADC_1_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_1_cCounter1U
                                        (0026) export  DUALADC_1_cCounter2U
                                        (0027) export _DUALADC_1_iResult1
                                        (0028) export  DUALADC_1_iResult1
                                        (0029) export _DUALADC_1_iResult2
                                        (0030) export  DUALADC_1_iResult2
                                        (0031) export _DUALADC_1_bfStatus
                                        (0032) export  DUALADC_1_bfStatus
                                        (0033) export  DUALADC_1_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_1_iResult1:
                                        (0044)  DUALADC_1_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_1_iResult2:
                                        (0046)  DUALADC_1_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_1_bfStatus:
                                        (0048)  DUALADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADC_1MaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADC_1MaxPosX4Table:
                                        (0095) IF (DUALADC_1_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_1_CNT1_ISR:
075D: 76 03    INC   [0x3]              (0118)    inc [DUALADC_1_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125) 
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
075F: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _DUALADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0135) ;
                                        (0136) ;
                                        (0137) ;  DESCRIPTION:
                                        (0138) ;  Increment the upper (software) half on the counter whenever the
                                        (0139) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0140) ;  should start out at the most negative value (0xFF).
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) _DUALADC_1_CNT2_ISR:
0760: 76 04    INC   [0x4]              (0145)    inc [DUALADC_1_cCounter2U]
                                        (0146)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0147)    ;---------------------------------------------------
                                        (0148)    ; Insert your custom code below this banner
                                        (0149)    ;---------------------------------------------------
                                        (0150)    ;   NOTE: interrupt service routines must preserve
                                        (0151)    ;   the values of the A and X CPU registers.
                                        (0152) 
                                        (0153)    ;---------------------------------------------------
                                        (0154)    ; Insert your custom code above this banner
                                        (0155)    ;---------------------------------------------------
                                        (0156)    ;@PSoC_UserCode_END@ (Do not change this line.)
0762: 7E       RETI                     (0157)    reti
                                        (0158) 
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  FUNCTION NAME: _DUALADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0162) ;
                                        (0163) ;  DESCRIPTION:
                                        (0164) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0165) ;  The ADC value is calculated and stored in a global location before
                                        (0166) ;  the end of the ISR.
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) _DUALADC_1_PWM16_ISR:
0763: 41 4B FE AND   REG[0x4B],0xFE     (0171)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
0766: 41 4F FE AND   REG[0x4F],0xFE     (0172)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0173) IF DUALADC_1_NoAZ
0769: 43 92 20 OR    REG[0x92],0x20     (0174)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
076C: 43 9A 20 OR    REG[0x9A],0x20     (0175)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
                                        (0176) ENDIF
076F: 43 93 10 OR    REG[0x93],0x10     (0177)    or   reg[DUALADC_1_bfADC1cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0772: 43 9B 10 OR    REG[0x9B],0x10     (0178)    or   reg[DUALADC_1_bfADC2cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
0775: 71 01    OR    F,0x1              
                                        (0179) 
                                        (0180)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0181)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0182)    M8C_EnableGInt
0777: 40       NOP                      (0183)    nop                                                     ; Wait a couple cycles
0778: 70 FE    AND   F,0xFE             
                                        (0184)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
077A: 08       PUSH  A                  (0185)    push  A                                                 ; Save the Accumulator
                                        (0186) 
                                        (0187) 
                                        (0188)    ; Get ADC1 result
077B: 5D 48    MOV   A,REG[0x48]        (0189)    mov   A,reg[DUALADC_1_bCount1]                          ; Read counter value  (Bogus read puts value in Period register)
077D: 5D 4A    MOV   A,REG[0x4A]        (0190)    mov   A,reg[DUALADC_1_bCompare1]                        ; Read counter value
077F: 78       DEC   A                  (0191)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0780: 73       CPL   A                  (0192)    cpl   A                                                 ; Invert the value
0781: D0 03    JNC   0x0785             (0193)    jnc   DUALADC_1_INT_CALCV1                              ; if carry, then inc MSB as well
0783: 76 03    INC   [0x3]              (0194)    inc   [DUALADC_1_cCounter1U]
                                        (0195) DUALADC_1_INT_CALCV1:
0785: 53 06    MOV   [0x6],A            (0196)    mov   [(DUALADC_1_iResult1 + LowByte)],A                ; Store LSB value
0787: 51 03    MOV   A,[0x3]            (0197)    mov   A, [DUALADC_1_cCounter1U]                         ; Store MSB from temp counter
0789: 53 05    MOV   [0x5],A            (0198)    mov   [(DUALADC_1_iResult1 + HighByte)],A
                                        (0199) 
                                        (0200)    ; Get ADC2 result
078B: 5D 4C    MOV   A,REG[0x4C]        (0201)    mov   A,reg[DUALADC_1_bCount2]                          ; Read counter value  (Bogus read puts value in Period register)
078D: 5D 4E    MOV   A,REG[0x4E]        (0202)    mov   A,reg[DUALADC_1_bCompare2]                        ; Read counter value
078F: 78       DEC   A                  (0203)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0790: 73       CPL   A                  (0204)    cpl   A                                                 ; Invert the value
0791: D0 03    JNC   0x0795             (0205)    jnc   DUALADC_1_INT_CALCV2                              ; if carry, then inc MSB as well
0793: 76 04    INC   [0x4]              (0206)    inc   [DUALADC_1_cCounter2U]
                                        (0207) DUALADC_1_INT_CALCV2:
0795: 53 08    MOV   [0x8],A            (0208)    mov   [(DUALADC_1_iResult2 + LowByte)],A                ; Store LSB value
0797: 51 04    MOV   A,[0x4]            (0209)    mov   A, [DUALADC_1_cCounter2U]                         ; Store MSB from temp counter
0799: 53 07    MOV   [0x7],A            (0210)    mov   [(DUALADC_1_iResult2 + HighByte)],A
                                        (0211) 
                                        (0212)                                                            ; The new value has been stored,
                                        (0213)                                                            ; so get counters ready for next reading first.
079B: 62 49 FF MOV   REG[0x49],0xFF     (0214)    mov   reg[DUALADC_1_bPeriod1], ffh                      ; Initialize counter1 to FF - Set to overflow after 256 counts
079E: 62 4D FF MOV   REG[0x4D],0xFF     (0215)    mov   reg[DUALADC_1_bPeriod2], ffh                      ; Initialize counter2 to FF - Set to overflow after 256 counts
07A1: 43 4B 01 OR    REG[0x4B],0x1      (0216)    or    reg[DUALADC_1_bCounter1_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter1
07A4: 43 4F 01 OR    REG[0x4F],0x1      (0217)    or    reg[DUALADC_1_bCounter2_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter2
                                        (0218) 
                                        (0219) 
                                        (0220) IF (DUALADC_1_DATA_FORMAT)                                 ; Only check for Negative numbers if SIGNED result
                                        (0221)    mov   A, [DUALADC_1_bfStatus]                           ; Get Status with Resolution
                                        (0222)    and   A, DUALADC_1_bRES_MASK                            ; Mask of resolution
                                        (0223)    index DUALADC_1MaxNegX4Table                            ; Get Maximum negative value from table
                                        (0224)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter
                                        (0225)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter
                                        (0226) ELSE
07A7: 55 03 00 MOV   [0x3],0x0          (0227)    mov   [DUALADC_1_cCounter1U], 00h                       ; Place result back into MSB of counter
07AA: 55 04 00 MOV   [0x4],0x0          (0228)    mov   [DUALADC_1_cCounter2U], 00h                       ; Place result back into MSB of counter
                                        (0229) ENDIF
                                        (0230) 
                                        (0231)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0232)    ;---------------------------------------------------
                                        (0233)    ; If the input is muxed with multiple inputs
                                        (0234)    ; this is a good place to change inputs.
                                        (0235)    ; Insert your custom code below this banner
                                        (0236)    ;---------------------------------------------------
                                        (0237)    ;   NOTE: interrupt service routines must preserve
                                        (0238)    ;   the values of the A and X CPU registers. At this
                                        (0239)    ;   point A has been preserved on the stack and will
                                        (0240)    ;   be restored before the return from interrupt.
                                        (0241)    ;   However, if you use the X register, you must
                                        (0242)    ;   preserve its value and restore it here.
                                        (0243) 
                                        (0244) 
                                        (0245)    ;---------------------------------------------------
                                        (0246)    ; Insert your custom code above this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0249) 
07AD: 41 93 EF AND   REG[0x93],0xEF     (0250)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
07B0: 41 9B EF AND   REG[0x9B],0xEF     (0251)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0252) IF DUALADC_1_NoAZ
07B3: 41 92 DF AND   REG[0x92],0xDF     (0253)    and   reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
07B6: 41 9A DF AND   REG[0x9A],0xDF     (0254)    and   reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0255) ENDIF
                                        (0256) 
                                        (0257) 
                                        (0258)    ;****************************************************************************
                                        (0259)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0260)    ;                          ; if stack space isn't at a premium.
                                        (0261)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0262)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0263)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0264)    ;        successful acquisition of the next byte.
                                        (0265)    ;****************************************************************************
                                        (0266) 
                                        (0267) ; ADC1
                                        (0268) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0269)                                                  ; Negative Overflow Check
                                        (0270)    tst   [(DUALADC_1_iResult1 + HighByte)],80h
                                        (0271)    jnz   DUALADC_1_NOT_2POVFL1
                                        (0272) 
                                        (0273) ENDIF
                                        (0274)                                                  ; Postive Overflow Check
                                        (0275)                                                  ; Get MSB of Max Positive value x4 + 1
07B9: 51 09    MOV   A,[0x9]            (0276)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
07BB: 21 0F    AND   A,0xF              (0277)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
07BD: FF 97    INDEX 0x0756             (0278)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
07BF: 08       PUSH  A                  (0279)    push  A
07C0: 22 05    AND   A,[0x5]            (0280)    and   A, [(DUALADC_1_iResult1 + HighByte)]
07C2: A0 0B    JZ    0x07CE             (0281)    jz    DUALADC_1_NOT_POVFL1
                                        (0282)                                                  ; Positive overflow, fix it - set to Max Positive + 1
07C4: 18       POP   A                  (0283)    pop   A
07C5: 11 01    SUB   A,0x1              (0284)    sub   A, 01h
                                        (0285)                                                  ; Force most positive * 4 into result
07C7: 53 05    MOV   [0x5],A            (0286)    mov   [(DUALADC_1_iResult1 + HighByte)], A
07C9: 55 06 FF MOV   [0x6],0xFF         (0287)    mov   [(DUALADC_1_iResult1 + LowByte)], ffh
07CC: 80 02    JMP   0x07CF             (0288)    jmp   DUALADC_1_NOT_2POVFL1
                                        (0289) DUALADC_1_NOT_POVFL1:
07CE: 18       POP   A                  (0290)    pop   A
                                        (0291) 
                                        (0292) DUALADC_1_NOT_2POVFL1:
07CF: 68 05    ASR   [0x5]              (0293)    asr   [(DUALADC_1_iResult1 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
07D1: 6E 06    RRC   [0x6]              (0294)    rrc   [(DUALADC_1_iResult1 + LowByte)]        ; Remember digital clock 4 times analog clock
07D3: 68 05    ASR   [0x5]              (0295)    asr   [(DUALADC_1_iResult1 + HighByte)]
07D5: 6E 06    RRC   [0x6]              (0296)    rrc   [(DUALADC_1_iResult1 + LowByte)]
                                        (0297) 
                                        (0298) ; ADC2
                                        (0299) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0300)                                                  ; Negative Overflow Check
                                        (0301)    tst   [(DUALADC_1_iResult2 + HighByte)],80h
                                        (0302)    jnz   DUALADC_1_NOT_2POVFL2
                                        (0303) 
                                        (0304) ENDIF
                                        (0305)                                                  ; Postive Overflow Check
                                        (0306)                                                  ; Get MSB of Max Positive value x4 + 1
07D7: 51 09    MOV   A,[0x9]            (0307)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
07D9: 21 0F    AND   A,0xF              (0308)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
07DB: FF 79    INDEX 0x0756             (0309)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
07DD: 08       PUSH  A                  (0310)    push  A
07DE: 22 07    AND   A,[0x7]            (0311)    and   A, [(DUALADC_1_iResult2 + HighByte)]
07E0: A0 0B    JZ    0x07EC             (0312)    jz    DUALADC_1_NOT_POVFL2
                                        (0313)                                                  ; Positive overflow, fix it - set to Max Positive + 1
07E2: 18       POP   A                  (0314)    pop   A
07E3: 11 01    SUB   A,0x1              (0315)    sub   A, 01h
                                        (0316)                                                  ; Force most positive * 4 into result
07E5: 53 07    MOV   [0x7],A            (0317)    mov   [(DUALADC_1_iResult2 + HighByte)], A
07E7: 55 08 FF MOV   [0x8],0xFF         (0318)    mov   [(DUALADC_1_iResult2 + LowByte)], ffh
07EA: 80 02    JMP   0x07ED             (0319)    jmp   DUALADC_1_NOT_2POVFL2
                                        (0320) DUALADC_1_NOT_POVFL2:
07EC: 18       POP   A                  (0321)    pop   A
                                        (0322) 
                                        (0323) DUALADC_1_NOT_2POVFL2:
07ED: 68 07    ASR   [0x7]              (0324)    asr   [(DUALADC_1_iResult2 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
07EF: 6E 08    RRC   [0x8]              (0325)    rrc   [(DUALADC_1_iResult2 + LowByte)]        ; Remember digital clock 4 times analog clock
07F1: 68 07    ASR   [0x7]              (0326)    asr   [(DUALADC_1_iResult2 + HighByte)]
07F3: 6E 08    RRC   [0x8]              (0327)    rrc   [(DUALADC_1_iResult2 + LowByte)]
                                        (0328) 
                                        (0329)    ;**********************************************
                                        (0330)    ; Data is ready at this point.
                                        (0331)    ; If processing Data at Interrupt level - add
                                        (0332)    ;     User Code to handle the data
                                        (0333)    ;**********************************************
                                        (0334)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0335)    ;---------------------------------------------------
                                        (0336)    ; Insert your custom code below this banner
                                        (0337)    ;---------------------------------------------------
                                        (0338)    ;   NOTE: interrupt service routines must preserve
                                        (0339)    ;   the values of the A and X CPU registers. At this
                                        (0340)    ;   point A has been preserved on the stack and wil
                                        (0341)    ;   be restored later. However, if you use X, be
                                        (0342)    ;   sure to take care of it yourself!
                                        (0343) 
                                        (0344) 
                                        (0345)    ;---------------------------------------------------
                                        (0346)    ; Insert your custom code above this banner
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0349) 
07F5: 18       POP   A                  (0350)    pop   A                                       ; Restore A, not used any more
                                        (0351) 
07F6: 2E 09 10 OR    [0x9],0x10         (0352)    or    [DUALADC_1_bfStatus],DUALADC_1_fDATA_READY  ; Set Data ready bit
                                        (0353) 
07F9: 47 0A FF TST   [0xA],0xFF         (0354)    tst   [DUALADC_1_bSampC], ffh                 ; If sample_counter == 0 -->> continuous data collection
07FC: A0 23    JZ    0x0820             (0355)    jz    DUALADC_1_END_PWM16_ISR
                                        (0356) 
07FE: 7A 0A    DEC   [0xA]              (0357)    dec   [DUALADC_1_bSampC]                      ; Dec sample counter and check for zero
0800: B0 1F    JNZ   0x0820             (0358)    jnz   DUALADC_1_END_PWM16_ISR
                                        (0359) 
0802: 41 43 FE AND   REG[0x43],0xFE     (0360)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0361) 
0805: 41 4B FE AND   REG[0x4B],0xFE     (0362)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0808: 41 4F FE AND   REG[0x4F],0xFE     (0363)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0364) 
                                        (0365) IF DUALADC_1_NoAZ
080B: 43 92 20 OR    REG[0x92],0x20     (0366)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
080E: 43 9A 20 OR    REG[0x9A],0x20     (0367)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0368) ENDIF
                                        (0369) 
0811: 43 93 10 OR    REG[0x93],0x10     (0370)    or    reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
0814: 43 9B 10 OR    REG[0x9B],0x10     (0371)    or    reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
                                        (0372) 
0817: 41 DF FD AND   REG[0xDF],0xFD     (0373)    and   reg[DUALADC_1_bfPWM16_INT_REG], ~DUALADC_1_bfPWM16_Mask      ; Disable interrupts
081A: 41 DF FB AND   REG[0xDF],0xFB     (0374)    and   reg[DUALADC_1_bfCounter1_INT_REG], ~DUALADC_1_bfCounter1_Mask
081D: 41 DF F7 AND   REG[0xDF],0xF7     (0375)    and   reg[DUALADC_1_bfCounter2_INT_REG], ~DUALADC_1_bfCounter2_Mask
                                        (0376) 
                                        (0377) DUALADC_1_END_PWM16_ISR:
0820: 7E       RETI                     (0378)    reti
                                        (0379) 
                                        (0380) DUALADC_1_APIINT_END:
FILE: lib\dualadc_1.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0821: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  DUALADC_1.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC_1.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_1_Start
                                        (0030) export _DUALADC_1_Start
                                        (0031) export  DUALADC_1_SetPower
                                        (0032) export _DUALADC_1_SetPower
                                        (0033) export  DUALADC_1_Stop
                                        (0034) export _DUALADC_1_Stop
                                        (0035) export  DUALADC_1_GetSamples
                                        (0036) export _DUALADC_1_GetSamples
                                        (0037) export  DUALADC_1_StopAD
                                        (0038) export _DUALADC_1_StopAD
                                        (0039) export  DUALADC_1_fIsData
                                        (0040) export _DUALADC_1_fIsData
                                        (0041) export  DUALADC_1_fIsDataAvailable
                                        (0042) export _DUALADC_1_fIsDataAvailable
                                        (0043) export  DUALADC_1_iGetData1
                                        (0044) export _DUALADC_1_iGetData1
                                        (0045) export  DUALADC_1_iGetData2
                                        (0046) export _DUALADC_1_iGetData2
                                        (0047) export  DUALADC_1_ClearFlag
                                        (0048) export _DUALADC_1_ClearFlag
                                        (0049) export  DUALADC_1_iGetData1ClearFlag
                                        (0050) export _DUALADC_1_iGetData1ClearFlag
                                        (0051) export  DUALADC_1_iGetData2ClearFlag
                                        (0052) export _DUALADC_1_iGetData2ClearFlag
                                        (0053) export  DUALADC_1_SetResolution
                                        (0054) export _DUALADC_1_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_1_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_1_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_1_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_1_Start:
                                        (0097) _DUALADC_1_Start:
                                        (0098)  DUALADC_1_SetPower:
                                        (0099) _DUALADC_1_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
                                        (0103) 
0824: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_1_bfPOWERMASK                     ; Mask only the valid power setting bits
0826: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0827: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0828: 5D 93    MOV   A,REG[0x93]        (0109)    mov   A, reg[DUALADC_1_bfADC1cr3]                 ; Get current value of ADC1cr3
082A: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
082C: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
082E: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
0830: 60 93    MOV   REG[0x93],A        (0113)    mov   reg[DUALADC_1_bfADC1cr3], A                 ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
0832: 5D 9B    MOV   A,REG[0x9B]        (0116)    mov   A, reg[DUALADC_1_bfADC2cr3]                 ; Get current value of ADC2cr3
0834: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0836: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0838: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
083A: 60 9B    MOV   REG[0x9B],A        (0120)    mov   reg[DUALADC_1_bfADC2cr3], A                 ; Reload CR with new power value
                                        (0121) 
083C: 49 92 01 TST   REG[0x92],0x1      (0122)    tst   reg[DUALADC_1_bfADC1cr2], DUALADC_1_fRES_SET
083F: A0 05    JZ    0x0845             (0123)    jz    .DoNotLoadRes
0841: 50 00    MOV   A,0x0              (0124)    mov   A,DUALADC_1_bNUMBITS - DUALADC_1_bMINRES               ; get and set the resolution
0843: 53 09    MOV   [0x9],A            (0125)    mov   [DUALADC_1_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
0845: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
0846: 70 3F    AND   F,0x3F             
0848: 71 C0    OR    F,0xC0             
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
084A: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_1_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_1_Stop:
                                        (0156) _DUALADC_1_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
084B: 41 93 FC AND   REG[0x93],0xFC     (0158)    and   reg[DUALADC_1_bfADC1cr3], ~DUALADC_1_bfPOWERMASK
084E: 41 9B FC AND   REG[0x9B],0xFC     (0159)    and   reg[DUALADC_1_bfADC2cr3], ~DUALADC_1_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0851: 7F       RET                      (0161)    ret
0852: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_1_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_1_GetSamples:
                                        (0191) _DUALADC_1_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_1_bSampC
0855: 53 0A    MOV   [0xA],A            (0194)    mov   [DUALADC_1_bSampC], A                             ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0857: 51 09    MOV   A,[0x9]            (0196)    mov   A,[DUALADC_1_bfStatus]                            ; get and set the resolution
0859: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_1_bRES_MASK
085B: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_1_bMINRES
085D: 90 8C    CALL  _DUALADC_1_SetResolution(0199)    call  DUALADC_1_SetResolution
                                        (0200) 
                                        (0201) DUALADC_1_LoadMSBCounter:                                  ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
085F: 5D 46    MOV   A,REG[0x46]        (0205)    mov   A,reg[DUALADC_1_bPWM_IntTime_MSB]                 ; Get MSB of PWM and move it into RAM
0861: 53 03    MOV   [0x3],A            (0206)    mov   [DUALADC_1_cCounter1U], A                         ; Use counter as temp location
0863: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0865: 12 03    SUB   A,[0x3]            (0208)    sub   A, [DUALADC_1_cCounter1U]                         ; 0 - MSB_PWM = MSB_of_most_neg_value
0867: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_1_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter2
                                        (0213) ELSE
0868: 55 03 00 MOV   [0x3],0x0          (0214)    mov   [DUALADC_1_cCounter1U], 00h                       ; Always start at zero for unsigned values for ADC1
086B: 55 04 00 MOV   [0x4],0x0          (0215)    mov   [DUALADC_1_cCounter2U], 00h                       ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
086E: 5D 42    MOV   A,REG[0x42]        (0217)    mov   A, reg[DUALADC_1_bPWM_IntTime_LSB]                ; Dummy Read  - required do not remove
0870: 62 49 FF MOV   REG[0x49],0xFF     (0218)    mov   reg[DUALADC_1_bPeriod1], FFh                      ; Make sure counter1 starts at FF
0873: 62 4D FF MOV   REG[0x4D],0xFF     (0219)    mov   reg[DUALADC_1_bPeriod2], FFh                      ; Make sure counter2 starts at FF
                                        (0220) 
0876: 41 93 EF AND   REG[0x93],0xEF     (0221)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
0879: 41 9B EF AND   REG[0x9B],0xEF     (0222)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0223) IF DUALADC_1_NoAZ
087C: 41 92 DF AND   REG[0x92],0xDF     (0224)     and  reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
087F: 41 9A DF AND   REG[0x9A],0xDF     (0225)     and  reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0882: 43 4B 05 OR    REG[0x4B],0x5      (0228)    or    reg[DUALADC_1_bCounter1_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0885: 43 4F 05 OR    REG[0x4F],0x5      (0229)    or    reg[DUALADC_1_bCounter2_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0888: 43 43 01 OR    REG[0x43],0x1      (0230)    or    reg[DUALADC_1_fPWM_LSB_CR0], DUALADC_1_fDBLK_ENABLE          ; Enable PWM
088B: 43 DF 02 OR    REG[0xDF],0x2      (0231)    or    reg[DUALADC_1_bfPWM16_INT_REG], DUALADC_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
088E: 43 DF 04 OR    REG[0xDF],0x4      (0232)    or    reg[DUALADC_1_bfCounter1_INT_REG], DUALADC_1_bfCounter1_Mask
0891: 43 DF 08 OR    REG[0xDF],0x8      (0233)    or    reg[DUALADC_1_bfCounter2_INT_REG], DUALADC_1_bfCounter2_Mask
                                        (0234) 
0894: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_1_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_1_StopAD:
                                        (0261) _DUALADC_1_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0895: 41 43 FE AND   REG[0x43],0xFE     (0263)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0264) 
0898: 41 4B FE AND   REG[0x4B],0xFE     (0265)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
089B: 41 4F FE AND   REG[0x4F],0xFE     (0266)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_1_NoAZ
089E: 43 92 20 OR    REG[0x92],0x20     (0269)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
08A1: 43 9A 20 OR    REG[0x9A],0x20     (0270)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
08A4: 43 93 10 OR    REG[0x93],0x10     (0273)    or   reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
08A7: 43 9B 10 OR    REG[0x9B],0x10     (0274)    or   reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
                                        (0275) 
08AA: 08       PUSH  A                  (0276)    push A
08AB: 41 DF FD AND   REG[0xDF],0xFD     
08AE: 41 DF FB AND   REG[0xDF],0xFB     
08B1: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0277)    M8C_DisableIntMask DUALADC_1_bfPWM16_INT_REG, DUALADC_1_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_1_bfCounter1_INT_REG, DUALADC_1_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_1_bfCounter2_INT_REG, DUALADC_1_bfCounter1_Mask
08B4: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
08B5: 7F       RET                      (0283)    ret
08B6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_1_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_1_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_1_fIsData:
                                        (0314) _DUALADC_1_fIsData:
                                        (0315)  DUALADC_1_fIsDataAvailable:
                                        (0316) _DUALADC_1_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
08B9: 51 09    MOV   A,[0x9]            (0319)    mov   A, [DUALADC_1_bfStatus]                      ; Get status byte
08BB: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_1_fDATA_READY                     ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
08BD: 7F       RET                      (0322)    ret
08BE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_1_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_1_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_1_iGetData1ClearFlag:
                                        (0353) _DUALADC_1_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_1_iResult1 
08C1: 26 09 EF AND   [0x9],0xEF         (0356)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
08C4: 58 05    MOV   X,[0x5]            (0357)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
08C6: 51 06    MOV   A,[0x6]            (0358)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
08C8: 7F       RET                      (0360)    ret
08C9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0361) 
                                        (0362)  DUALADC_1_iGetData1:
                                        (0363) _DUALADC_1_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08CC: 58 05    MOV   X,[0x5]            (0366)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
08CE: 51 06    MOV   A,[0x6]            (0367)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
08D0: 7F       RET                      (0369)    ret
08D1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_1_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_1_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_1_iGetData2ClearFlag:
                                        (0400) _DUALADC_1_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08D4: 26 09 EF AND   [0x9],0xEF         (0403)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
08D7: 58 07    MOV   X,[0x7]            (0404)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
08D9: 51 08    MOV   A,[0x8]            (0405)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
08DB: 7F       RET                      (0407)    ret
08DC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0408) 
                                        (0409)  DUALADC_1_iGetData2:
                                        (0410) _DUALADC_1_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08DF: 58 07    MOV   X,[0x7]            (0413)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
08E1: 51 08    MOV   A,[0x8]            (0414)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
08E3: 7F       RET                      (0416)    ret
08E4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_1_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_1_ClearFlag:
                                        (0443) _DUALADC_1_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
08E7: 26 09 EF AND   [0x9],0xEF         (0446)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
08EA: 7F       RET                      (0448)    ret
08EB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_1_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_1_SetResolution:
                                        (0481) _DUALADC_1_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
                                        (0484) 
08EE: 41 92 FE AND   REG[0x92],0xFE     (0485)    and   reg[DUALADC_1_bfADC1cr2], ~DUALADC_1_fRES_SET
                                        (0486)    
08F1: 9F A2    CALL  _DUALADC_1_StopAD  (0487)    call  DUALADC_1_StopAD                          ; Stop the A/D if it is running
08F3: 55 09 00 MOV   [0x9],0x0          (0488)    mov   [DUALADC_1_bfStatus], 00h                 ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
08F6: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_1_bMINRES                       ; Check low end of resolution
08F8: D0 05    JNC   0x08FE             (0492)    jnc   DUALADC_1_CHECKHI
08FA: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_1_bMINRES                       ; Too low - load legal low value
08FC: 80 07    JMP   0x0904             (0494)    jmp   DUALADC_1_RES_OK
                                        (0495) 
                                        (0496) DUALADC_1_CHECKHI:                                 ; Check high end of resolution
08FE: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_1_bMAXRES
0900: C0 03    JC    0x0904             (0498)    jc    DUALADC_1_RES_OK
0902: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_1_bMAXRES                       ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_1_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
0904: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_1_bMINRES                      ; Normalize with min resolution
0906: 2C 09    OR    [0x9],A            (0505)    or    [DUALADC_1_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
0908: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
090A: 5C       MOV   X,A                (0509)    mov   X,A
090B: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_1_CALC_INTTIME:                            ; Now shift the MSB left for every bit of resolution of min (7).
090D: 64       ASL   A                  (0513)    asl   A
090E: 79       DEC   X                  (0514)    dec   X
090F: BF FD    JNZ   0x090D             (0515)    jnz   DUALADC_1_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_1_LOAD_INTTIME:                            ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0911: 62 42 00 MOV   REG[0x42],0x0      (0519)    mov   reg[DUALADC_1_bPWM_IntTime_LSB], 00h
0914: 60 46    MOV   REG[0x46],A        (0520)    mov   reg[DUALADC_1_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
0916: 62 41 58 MOV   REG[0x41],0x58     (0523)    mov   reg[DUALADC_1_bPWM_Period_LSB], <wCalcTime
0919: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
091B: 60 45    MOV   REG[0x45],A        (0525)    mov   reg[DUALADC_1_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
091D: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC_1.asm
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;inititalize index page
                                        (0004) ;-----------------------------------------------------------------------------
                                        (0005) 
                                        (0006) include "m8c.inc"       ; part specific constants and macros
                                        (0007) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0008) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0009) include "program_defines.inc"
                                        (0010) 
                                        (0011) export _main
                                        (0012) ;export addr_internal_inc_ms
                                        (0013) export addr_pin_inc_ms
                                        (0014) export addr_adc_inc_ms
                                        (0015) export addr_timer_inc_ms
                                        (0016) export addr_inc_ms
                                        (0017) export addr_inc_s
                                        (0018) export addr_inc_m
                                        (0019) export addr_inc_h
                                        (0020) 
                                        (0021) export addr_timer_flag
                                        (0022) 
                                        (0023) export read_addr_inc_ms
                                        (0024) export read_addr_inc_s
                                        (0025) export read_addr_inc_m
                                        (0026) export read_addr_inc_h
                                        (0027) 
                                        (0028) export addr_lng_p
                                        (0029) export addr_shrt_p
                                        (0030) 
                                        (0031) export addr_acc_mode
                                        (0032) 
                                        (0033) export md_flg
                                        (0034) 
                                        (0035) export count_saved
                                        (0036) export read_saved
                                        (0037) export save_time_index
                                        (0038) 
                                        (0039) export iResult1  
                                        (0040) export iResult_count
                                        (0041) export iResult_Total
                                        (0042) export dOpr2
                                        (0043) export dOpr1
                                        (0044) export dRes
                                        (0045) export threshold_value
                                        (0046)  
                                        (0047) export sound_timer_running
                                        (0048) 
                                        (0049) export debug_register
                                        (0050) 
                                        (0051) 
                                        (0052) 
                                        (0053) area var(RAM)                     
                                        (0054) ;addr_internal_inc_ms: 	blk 1
                                        (0055) addr_timer_inc_ms:		blk 1
                                        (0056) addr_pin_inc_ms:		blk 1
                                        (0057) addr_adc_inc_ms:		blk 1
                                        (0058) addr_inc_ms: 			blk 1
                                        (0059) addr_inc_s: 			blk 1
                                        (0060) addr_inc_m: 			blk 1
                                        (0061) addr_inc_h: 			blk 1
                                        (0062) addr_timer_flag:		blk 1
                                        (0063) 
                                        (0064) read_addr_inc_ms: 		blk 1
                                        (0065) read_addr_inc_s: 		blk 1
                                        (0066) read_addr_inc_m: 		blk 1
                                        (0067) read_addr_inc_h: 		blk 1
                                        (0068) 
                                        (0069) addr_lng_p: 			blk 1
                                        (0070) addr_shrt_p: 			blk 1
                                        (0071) 
                                        (0072) addr_acc_mode: 			blk 1
                                        (0073) 
                                        (0074) md_flg: 				blk 1
                                        (0075) 
                                        (0076) count_saved:			blk 1
                                        (0077) read_saved: 			blk 1
                                        (0078) save_time_index:		blk 1
                                        (0079) 
                                        (0080) iResult_Total:			blk	4
                                        (0081) iResult1:       		blk 4  ; ADC1 result storage
                                        (0082) iResult_count:			blk 4
                                        (0083) dOpr2:					blk	4
                                        (0084) dOpr1:					blk	4
                                        (0085) dRes:					blk 4
                                        (0086) 
                                        (0087) threshold_value:		blk 2
                                        (0088) incoming_value:			blk 2
                                        (0089) sound_timer_running:	blk 1
                                        (0090) 
                                        (0091) debug_register:			blk 1
                                        (0092) 
                                        (0093) 
                                        (0094) area text(ROM,REL)
                                        (0095) ;export time_counter
                                        (0096) _main:
                                        (0097) 
091E: 7C 06 AA LCALL _LCD_Init|_LCD_Start|LCD_Start(0098)  	lcall LCD_Start
0921: 43 E1 02 OR    REG[0xE1],0x2      
0924: 43 E0 20 OR    REG[0xE0],0x20     
0927: 71 01    OR    F,0x1              
                                        (0099) 
                                        (0100) 
                                        (0101) Initialize_Interrupt:
                                        (0102) 	M8C_EnableIntMask INT_MSK1, INT_MSK1_DBB01					;enable digital block one interrupt
                                        (0103) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO 					;enable GPIO Interrupt Mask
                                        (0104) 	M8C_EnableGInt	;enable global interrupts
                                        (0105) 
                                        (0106) Initialize_Variables:
0929: 55 09 00 MOV   [0x9],0x0          (0107) 	mov [addr_internal_inc_ms],00h
092C: 55 0C 00 MOV   [0xC],0x0          (0108) 	mov [addr_pin_inc_ms], 00h
092F: 55 0D 00 MOV   [0xD],0x0          (0109) 	mov [addr_adc_inc_ms], 00h
0932: 55 0B 00 MOV   [0xB],0x0          (0110) 	mov [addr_timer_inc_ms],00h
0935: 55 0E 00 MOV   [0xE],0x0          (0111) 	mov [addr_inc_ms],00h
0938: 55 0F 00 MOV   [0xF],0x0          (0112) 	mov [addr_inc_s],00h
093B: 55 10 00 MOV   [0x10],0x0         (0113) 	mov [addr_inc_m],00h
093E: 55 11 00 MOV   [0x11],0x0         (0114) 	mov [addr_inc_h],00h
0941: 55 1A 01 MOV   [0x1A],0x1         (0115) 	mov [md_flg],01h
0944: 55 3B 00 MOV   [0x3B],0x0         (0116) 	mov [debug_register], 00h
0947: 55 1D 00 MOV   [0x1D],0x0         (0117) 	mov [save_time_index], 00h
094A: 55 59 00 MOV   [0x59],0x0         (0118) 	mov [flag_val], 00h
                                        (0119) 
                                        (0120) Set_Up_Anolog:
094D: 50 03    MOV   A,0x3              (0121) 	mov   A, PGA_1_HIGHPOWER
094F: 7C 04 CB LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_Start(0122)     lcall PGA_1_Start		;offset
                                        (0123) 	
0952: 50 03    MOV   A,0x3              (0124) 	mov   A, PGA_2_HIGHPOWER 
0954: 7C 04 8B LCALL _PGA_2_SetPower|PGA_2_Start|PGA_2_SetPower|_PGA_2_Start(0125)     lcall PGA_2_Start
                                        (0126) 	
0957: 50 03    MOV   A,0x3              (0127)     mov   A, LPF2_1_HIGHPOWER
0959: 7C 05 0B LCALL _LPF2_1_Start|_LPF2_1_SetPower|LPF2_1_SetPower(0128)     lcall LPF2_1_Start
                                        (0129) 	
095C: 50 07    MOV   A,0x7              (0130)     mov   A, 7                    ; Set resolution to 7 Bits -- I think this gets set in GUI? LS
095E: 7C 08 EB LCALL _DUALADC_1_SetResolution(0131)     lcall  DUALADC_1_SetResolution
                                        (0132) 
0961: 50 03    MOV   A,0x3              (0133)     mov   A, DUALADC_1_HIGHPOWER     ; Set Power and Enable A/D
0963: 7C 08 21 LCALL DUALADC_1_SetPower|_DUALADC_1_Start|DUALADC_1_Start|_DUALADC_1_SetPower(0134)     lcall  DUALADC_1_Start
                                        (0135) 
0966: 50 00    MOV   A,0x0              (0136)     mov   A, 00h                   ; Start A/D in continuous sampling mode - or put 20 to get 20 cycles in A
0968: 7C 08 52 LCALL _DUALADC_1_GetSamples(0137)     lcall  DUALADC_1_GetSamples
                                        (0138) 	
                                        (0139) 	
096B: 7C 04 33 LCALL _Timer16_1_Start   (0140) 	lcall Timer16_1_Start
                                        (0141) 	
096E: 62 D5 06 MOV   REG[0xD5],0x6      (0142) 	mov reg[MVW_PP], 6				;writing on memory page 6
0971: 62 D4 06 MOV   REG[0xD4],0x6      (0143) 	mov reg[MVR_PP], 6				;reading from memory page 6
                                        (0144) 	
0974: 62 D0 06 MOV   REG[0xD0],0x6      (0145) 	mov reg[CUR_PP], 06h
                                        (0146) 	
                                        (0147) 	
0977: 55 00 01 MOV   [0x0],0x1          (0148) 	mov [00h], 01h
097A: 55 01 02 MOV   [0x1],0x2          (0149) 	mov [01h], 02h
097D: 55 02 03 MOV   [0x2],0x3          (0150) 	mov [02h], 03h
0980: 55 03 04 MOV   [0x3],0x4          (0151) 	mov [03h], 04h
                                        (0152) 	
0983: 55 04 05 MOV   [0x4],0x5          (0153) 	mov [04h], 05h
0986: 55 05 06 MOV   [0x5],0x6          (0154) 	mov [05h], 06h
0989: 55 06 07 MOV   [0x6],0x7          (0155) 	mov [06h], 07h
098C: 55 07 08 MOV   [0x7],0x8          (0156) 	mov [07h], 08h
                                        (0157) 
098F: 55 08 01 MOV   [0x8],0x1          (0158) 	mov [08h], 01h
0992: 55 09 02 MOV   [0x9],0x2          (0159) 	mov [09h], 02h
0995: 55 0A 03 MOV   [0xA],0x3          (0160) 	mov [0Ah], 03h
0998: 55 0B 04 MOV   [0xB],0x4          (0161) 	mov [0Bh], 04h
                                        (0162) 	
099B: 55 0C 05 MOV   [0xC],0x5          (0163) 	mov [0Ch], 05h
099E: 55 0D 06 MOV   [0xD],0x6          (0164) 	mov [0Dh], 06h
09A1: 55 0E 07 MOV   [0xE],0x7          (0165) 	mov [0Eh], 07h
09A4: 55 0F 08 MOV   [0xF],0x8          (0166) 	mov [0Fh], 08h
                                        (0167) 	
09A7: 55 10 01 MOV   [0x10],0x1         (0168) 	mov [10h], 01h
09AA: 55 11 02 MOV   [0x11],0x2         (0169) 	mov [11h], 02h
09AD: 55 12 03 MOV   [0x12],0x3         (0170) 	mov [12h], 03h
09B0: 55 13 04 MOV   [0x13],0x4         (0171) 	mov [13h], 04h
                                        (0172) 	
09B3: 55 14 05 MOV   [0x14],0x5         (0173) 	mov [14h], 05h
09B6: 55 15 06 MOV   [0x15],0x6         (0174) 	mov [15h], 06h
09B9: 55 16 07 MOV   [0x16],0x7         (0175) 	mov [16h], 07h
09BC: 55 17 08 MOV   [0x17],0x8         (0176) 	mov [17h], 08h
                                        (0177) 	
09BF: 55 18 01 MOV   [0x18],0x1         (0178) 	mov [18h], 01h
09C2: 55 19 02 MOV   [0x19],0x2         (0179) 	mov [19h], 02h
09C5: 55 1A 03 MOV   [0x1A],0x3         (0180) 	mov [1Ah], 03h
09C8: 55 1B 04 MOV   [0x1B],0x4         (0181) 	mov [1Bh], 04h
                                        (0182) 	
09CB: 55 1C 05 MOV   [0x1C],0x5         (0183) 	mov [1Ch], 05h
09CE: 55 1D 06 MOV   [0x1D],0x6         (0184) 	mov [1Dh], 06h
09D1: 55 1E 07 MOV   [0x1E],0x7         (0185) 	mov [1Eh], 07h
09D4: 55 1F 08 MOV   [0x1F],0x8         (0186) 	mov [1Fh], 08h
                                        (0187) 	
09D7: 55 20 01 MOV   [0x20],0x1         (0188) 	mov [20h], 01h
09DA: 55 21 02 MOV   [0x21],0x2         (0189) 	mov [21h], 02h
09DD: 55 22 03 MOV   [0x22],0x3         (0190) 	mov [22h], 03h
09E0: 55 23 04 MOV   [0x23],0x4         (0191) 	mov [23h], 04h
                                        (0192) 	
09E3: 55 24 05 MOV   [0x24],0x5         (0193) 	mov [24h], 05h
09E6: 55 25 06 MOV   [0x25],0x6         (0194) 	mov [25h], 06h
09E9: 55 26 07 MOV   [0x26],0x7         (0195) 	mov [26h], 07h
09EC: 55 27 07 MOV   [0x27],0x7         (0196) 	mov [27h], 07h
                                        (0197) 	
09EF: 62 D0 00 MOV   REG[0xD0],0x0      (0198) 	mov reg[CUR_PP], 00h
                                        (0199) 
                                        (0200) loop:
                                        (0201) 
09F2: 50 01    MOV   A,0x1              (0202) 	mov A, 01h
09F4: 57 00    MOV   X,0x0              (0203) 	mov X, 00h
09F6: 7C 07 1D LCALL _LCD_Position      (0204) 	lcall LCD_Position
09F9: 51 18    MOV   A,[0x18]           (0205) 	mov A, [addr_shrt_p]
09FB: 7C 05 BA LCALL _LCD_PrHexByte     (0206) 	lcall LCD_PrHexByte
                                        (0207) 	
09FE: 50 01    MOV   A,0x1              (0208) 	mov A, 01h
0A00: 57 03    MOV   X,0x3              (0209) 	mov X, 03h
0A02: 7C 07 1D LCALL _LCD_Position      (0210) 	lcall LCD_Position
0A05: 51 1A    MOV   A,[0x1A]           (0211) 	mov A, [md_flg]
0A07: 7C 05 BA LCALL _LCD_PrHexByte     (0212) 	lcall LCD_PrHexByte
                                        (0213) 	
0A0A: 50 01    MOV   A,0x1              (0214) 	mov A, 01h
0A0C: 57 07    MOV   X,0x7              (0215) 	mov X, 07h
0A0E: 7C 07 1D LCALL _LCD_Position      (0216) 	lcall LCD_Position
0A11: 51 3B    MOV   A,[0x3B]           (0217) 	mov A, [debug_register]
0A13: 7C 05 BA LCALL _LCD_PrHexByte     (0218) 	lcall LCD_PrHexByte
                                        (0219) 
0A16: 50 01    MOV   A,0x1              (0220) 	mov A, 01h
0A18: 57 06    MOV   X,0x6              (0221) 	mov X, 06h
0A1A: 7C 07 1D LCALL _LCD_Position      (0222) 	lcall LCD_Position
0A1D: 51 0C    MOV   A,[0xC]            (0223) 	mov A, [addr_pin_inc_ms]
0A1F: 7C 05 BA LCALL _LCD_PrHexByte     (0224) 	lcall LCD_PrHexByte
                                        (0225) 	
0A22: 50 01    MOV   A,0x1              (0226) 	mov A, 01h
0A24: 57 09    MOV   X,0x9              (0227) 	mov X, 09h
0A26: 7C 07 1D LCALL _LCD_Position      (0228) 	lcall LCD_Position
0A29: 51 0D    MOV   A,[0xD]            (0229) 	mov A, [addr_adc_inc_ms]
0A2B: 7C 05 BA LCALL _LCD_PrHexByte     (0230) 	lcall LCD_PrHexByte
                                        (0231) 
0A2E: 50 01    MOV   A,0x1              (0232) 	mov A, 01h
0A30: 57 0C    MOV   X,0xC              (0233) 	mov X, 0Ch
0A32: 7C 07 1D LCALL _LCD_Position      (0234) 	lcall LCD_Position
0A35: 51 37    MOV   A,[0x37]           (0235) 	mov A, [threshold_value+1]
0A37: 7C 05 BA LCALL _LCD_PrHexByte     (0236) 	lcall LCD_PrHexByte
                                        (0237) 	
0A3A: 50 01    MOV   A,0x1              (0238) 	mov A, 01h
0A3C: 57 0E    MOV   X,0xE              (0239) 	mov X, 0Eh
0A3E: 7C 07 1D LCALL _LCD_Position      (0240) 	lcall LCD_Position
0A41: 51 0B    MOV   A,[0xB]            (0241) 	mov A, [addr_timer_inc_ms]
0A43: 7C 05 BA LCALL _LCD_PrHexByte     (0242) 	lcall LCD_PrHexByte
                                        (0243) 
                                        (0244) Chcklngp:
0A46: 3C 17 01 CMP   [0x17],0x1         (0245)     cmp [addr_lng_p],01h 
0A49: B0 13    JNZ   0x0A5D             (0246) 	jnz StaySameMode		;if its not set stay in same mode
                                        (0247) 
                                        (0248) ;	;toggle if you get long press
                                        (0249) ;	mov A, reg[PRT1DR]
                                        (0250) ;	xor A, FFh
                                        (0251) ;	mov reg[PRT1DR], A
                                        (0252) 	
0A4B: 55 17 00 MOV   [0x17],0x0         (0253) 	mov [addr_lng_p],00h  	;reset long press value
0A4E: 55 18 00 MOV   [0x18],0x0         (0254) 	mov [addr_shrt_p],00h  	;reset short press value
                                        (0255) 	
                                        (0256) 
                                        (0257) 
                                        (0258) next_Mode:
0A51: 70 FB    AND   F,0xFB             (0259)     and F, FBh			;clear CF
0A53: 65 1A    ASL   [0x1A]             (0260) 	asl [md_flg]
                                        (0261) 	
                                        (0262) 
0A55: 3C 1A 20 CMP   [0x1A],0x20        (0263) 	cmp [md_flg],20h
0A58: B0 04    JNZ   0x0A5D             (0264) 	jnz StaySameMode
0A5A: 55 1A 01 MOV   [0x1A],0x1         (0265) 	mov [md_flg],01h
                                        (0266) 
                                        (0267) StaySameMode:
0A5D: 3C 1A 01 CMP   [0x1A],0x1         (0268) 	cmp [md_flg],01h
0A60: A0 15    JZ    0x0A76             (0269) 	jz Accuracy_m          
0A62: 3C 1A 02 CMP   [0x1A],0x2         (0270) 	cmp [md_flg],02h
0A65: A0 7C    JZ    0x0AE2             (0271) 	jz Threshold_m
0A67: 3C 1A 04 CMP   [0x1A],0x4         (0272) 	cmp [md_flg],04h
0A6A: A1 51    JZ    0x0BBC             (0273) 	jz Button_m
0A6C: 3C 1A 08 CMP   [0x1A],0x8         (0274) 	cmp [md_flg],08h
0A6F: A2 B4    JZ    0x0D24             (0275) 	jz Sound_m
0A71: 3C 1A 10 CMP   [0x1A],0x10        (0276) 	cmp [md_flg],10h
0A74: A4 2F    JZ    0x0EA4             (0277) 	jz Mem_Display
                                        (0278) 	
                                        (0279) 	
                                        (0280) 
                                        (0281) ;---------------------MODES-----------------------------------------------------
                                        (0282) ;-------------------------------------------------------------------------------
                                        (0283) ;---------------------START ACCURACY MODE---------------------------------------
                                        (0284) 
                                        (0285) Accuracy_m:
0A76: 3C 18 00 CMP   [0x18],0x0         (0286)    cmp [addr_shrt_p], 00h
0A79: B0 12    JNZ   0x0A8C             (0287) 	jnz check_acc_ms
0A7B: 50 00    MOV   A,0x0              (0288) 	mov A, 00h
0A7D: 57 00    MOV   X,0x0              (0289) 	mov X, 00h
0A7F: 7C 07 1D LCALL _LCD_Position      (0290) 	lcall LCD_Position
0A82: 50 13    MOV   A,0x13             (0291) 	mov A, >ACCURACY_MODE
0A84: 57 40    MOV   X,0x40             (0292) 	mov X, <ACCURACY_MODE
0A86: 7C 05 98 LCALL _LCD_PrCString     (0293) 	lcall LCD_PrCString
0A89: 7D 09 F2 LJMP  0x09F2             (0294) 	ljmp loop
                                        (0295) 
                                        (0296) check_acc_ms:
0A8C: 3C 18 01 CMP   [0x18],0x1         (0297) 	cmp [addr_shrt_p], 01h
0A8F: B0 15    JNZ   0x0AA5             (0298) 	jnz check_acc_halfsec
0A91: 55 19 03 MOV   [0x19],0x3         (0299) 	mov [addr_acc_mode], tenthsec_mode	;tenth second mode by default
0A94: 50 00    MOV   A,0x0              (0300) 	mov A, 00h
0A96: 57 00    MOV   X,0x0              (0301) 	mov X, 00h
0A98: 7C 07 1D LCALL _LCD_Position      (0302) 	lcall LCD_Position
0A9B: 50 13    MOV   A,0x13             (0303) 	mov A, >TENTHSEC_MODE
0A9D: 57 10    MOV   X,0x10             (0304) 	mov X, <TENTHSEC_MODE
0A9F: 7C 05 98 LCALL _LCD_PrCString     (0305) 	lcall LCD_PrCString
0AA2: 7D 09 F2 LJMP  0x09F2             (0306) 	ljmp loop
                                        (0307) 
                                        (0308) check_acc_halfsec:
0AA5: 3C 18 02 CMP   [0x18],0x2         (0309) 	cmp [addr_shrt_p] , 02h
0AA8: B0 15    JNZ   0x0ABE             (0310) 	jnz check_acc_sec
0AAA: 55 19 02 MOV   [0x19],0x2         (0311) 	mov [addr_acc_mode], halfsec_mode
0AAD: 50 00    MOV   A,0x0              (0312) 	mov A, 00h
0AAF: 57 00    MOV   X,0x0              (0313) 	mov X, 00h
0AB1: 7C 07 1D LCALL _LCD_Position      (0314) 	lcall LCD_Position
0AB4: 50 13    MOV   A,0x13             (0315) 	mov A, >HALFSEC_MODE
0AB6: 57 21    MOV   X,0x21             (0316) 	mov X, <HALFSEC_MODE
0AB8: 7C 05 98 LCALL _LCD_PrCString     (0317) 	lcall LCD_PrCString
0ABB: 7D 09 F2 LJMP  0x09F2             (0318) 	ljmp loop
                                        (0319) 	
                                        (0320) check_acc_sec:
0ABE: 3C 18 03 CMP   [0x18],0x3         (0321) 	cmp [addr_shrt_p] , 03h
0AC1: B0 15    JNZ   0x0AD7             (0322) 	jnz check_acc_end
0AC3: 55 19 01 MOV   [0x19],0x1         (0323) 	mov [addr_acc_mode], sec_mode
0AC6: 50 00    MOV   A,0x0              (0324) 	mov A, 00h
0AC8: 57 00    MOV   X,0x0              (0325) 	mov X, 00h
0ACA: 7C 07 1D LCALL _LCD_Position      (0326) 	lcall LCD_Position
0ACD: 50 13    MOV   A,0x13             (0327) 	mov A, >SEC_MODE
0ACF: 57 30    MOV   X,0x30             (0328) 	mov X, <SEC_MODE
0AD1: 7C 05 98 LCALL _LCD_PrCString     (0329) 	lcall LCD_PrCString
0AD4: 7D 09 F2 LJMP  0x09F2             (0330) 	ljmp loop
                                        (0331) 
                                        (0332) check_acc_end:
0AD7: 3C 18 04 CMP   [0x18],0x4         (0333) 	cmp [addr_shrt_p], 04h
0ADA: CF 17    JC    0x09F2             (0334) 	jc loop				;make sure SP presses is less than 5 in button mode
0ADC: 55 18 00 MOV   [0x18],0x0         (0335) 	mov [addr_shrt_p], 00h
                                        (0336) 	
0ADF: 7D 09 F2 LJMP  0x09F2             (0337) 	ljmp loop
                                        (0338) 	
                                        (0339) ;---------------------END ACCURACY MODE--------------------------------------
                                        (0340) 	
                                        (0341) ;---------------------START THRESHOLD MODE-----------------------------------
                                        (0342) 	
                                        (0343) Threshold_m:
0AE2: 3C 18 00 CMP   [0x18],0x0         (0344) 	cmp [addr_shrt_p], 00h
0AE5: B0 12    JNZ   0x0AF8             (0345) 	jnz check_input_sensitivity
0AE7: 50 00    MOV   A,0x0              (0346) 	mov A, 00h
0AE9: 57 00    MOV   X,0x0              (0347) 	mov X, 00h
0AEB: 7C 07 1D LCALL _LCD_Position      (0348) 	lcall LCD_Position
0AEE: 50 13    MOV   A,0x13             (0349) 	mov A, >THRESHOLD_MODE
0AF0: 57 92    MOV   X,0x92             (0350) 	mov X, <THRESHOLD_MODE
0AF2: 7C 05 98 LCALL _LCD_PrCString     (0351) 	lcall LCD_PrCString
0AF5: 7D 09 F2 LJMP  0x09F2             (0352) 	ljmp loop
                                        (0353) 	
                                        (0354) check_input_sensitivity:
0AF8: 3C 18 01 CMP   [0x18],0x1         (0355) 	cmp [addr_shrt_p], 01h
0AFB: B0 12    JNZ   0x0B0E             (0356) 	jnz calculate_threshold			;this may just exit without short button press 
0AFD: 50 00    MOV   A,0x0              (0357) 	mov A, 00h
0AFF: 57 00    MOV   X,0x0              (0358) 	mov X, 00h
0B01: 7C 07 1D LCALL _LCD_Position      (0359) 	lcall LCD_Position
0B04: 50 13    MOV   A,0x13             (0360) 	mov A, >CLEAN_LCD
0B06: 57 F8    MOV   X,0xF8             (0361) 	mov X, <CLEAN_LCD
0B08: 7C 05 98 LCALL _LCD_PrCString     (0362) 	lcall LCD_PrCString
0B0B: 7D 09 F2 LJMP  0x09F2             (0363) 	ljmp loop
                                        (0364) 	
                                        (0365) calculate_threshold:	
                                        (0366) 	;clear iresult_total
0B0E: 3C 18 02 CMP   [0x18],0x2         (0367) 	cmp [addr_shrt_p], 02h
0B11: BF FC    JNZ   0x0B0E             (0368) 	jnz calculate_threshold			;this may just exit without short button press
                                        (0369) 	
0B13: 55 21 00 MOV   [0x21],0x0         (0370) 	mov [iResult_Total+3], 00h
0B16: 55 20 00 MOV   [0x20],0x0         (0371) 	mov [iResult_Total+2], 00h
0B19: 55 1F 00 MOV   [0x1F],0x0         (0372) 	mov [iResult_Total+1], 00h
0B1C: 55 1E 00 MOV   [0x1E],0x0         (0373) 	mov [iResult_Total+0], 00h
                                        (0374) 	
0B1F: 55 29 00 MOV   [0x29],0x0         (0375) 	mov [iResult_count+3], 00h
0B22: 55 28 00 MOV   [0x28],0x0         (0376) 	mov [iResult_count+2], 00h
0B25: 55 27 00 MOV   [0x27],0x0         (0377) 	mov [iResult_count+1], 00h
0B28: 55 26 00 MOV   [0x26],0x0         (0378) 	mov [iResult_count+0], 00h
                                        (0379) 	
0B2B: 55 0D 00 MOV   [0xD],0x0          (0380) 	mov [addr_adc_inc_ms],00h	;reset our little timer - not being used by any routine
                                        (0381) wait_1_ADC:                              ; Poll until data is complete
0B2E: 7C 08 B6 LCALL _DUALADC_1_fIsDataAvailable|_DUALADC_1_fIsData|DUALADC_1_fIsData(0382)     lcall  DUALADC_1_fIsDataAvailable
0B31: AF FC    JZ    0x0B2E             (0383)     jz    wait_1_ADC
0B33: 70 FE    AND   F,0xFE             
                                        (0384) 	M8C_DisableGInt   
                                        (0385) 
0B35: 7C 08 C9 LCALL _DUALADC_1_iGetData1(0386)     lcall  DUALADC_1_iGetData1        ; Get ADC1 Data (X=MSB A=LSB)
0B38: 71 01    OR    F,0x1              
                                        (0387) 	M8C_EnableGInt 
                                        (0388) 
                                        (0389) 	; Reset flag
0B3A: 7C 08 E4 LCALL _DUALADC_1_ClearFlag(0390) 	lcall  DUALADC_1_ClearFlag 
                                        (0391) 	;add the received iResult to total results
0B3D: 70 FB    AND   F,0xFB             (0392) 	and F, FBh
                                        (0393) 	
0B3F: 04 21    ADD   [0x21],A           (0394) 	add	[iResult_Total+3], A 	;save LSB
0B41: 5B       MOV   A,X                (0395) 	mov A, X
0B42: 0C 20    ADC   [0x20],A           (0396) 	adc [iResult_Total+2], A	;save MSB
0B44: 0E 1F 00 ADC   [0x1F],0x0         (0397) 	adc [iResult_Total+1], 00h
0B47: 0E 1E 00 ADC   [0x1E],0x0         (0398) 	adc [iResult_Total+0], 00h
                                        (0399) 	
0B4A: 76 29    INC   [0x29]             (0400) 	inc [iResult_count+3]
0B4C: 0E 28 00 ADC   [0x28],0x0         (0401) 	adc [iResult_count+2],00h
0B4F: 0E 27 00 ADC   [0x27],0x0         (0402) 	adc [iResult_count+1],00h
0B52: 0E 26 00 ADC   [0x26],0x0         (0403) 	adc [iResult_count+0],00h
                                        (0404) 	
0B55: 3C 0D 28 CMP   [0xD],0x28         (0405) 	cmp [addr_adc_inc_ms], 28h
0B58: BF D5    JNZ   0x0B2E             (0406) 	jnz wait_1_ADC
                                        (0407) 	
0B5A: 5F 2E 1E MOV   [0x2E],[0x1E]      (0408) 	mov [dOpr1+0], [iResult_Total+0]
0B5D: 5F 2F 1F MOV   [0x2F],[0x1F]      (0409) 	mov [dOpr1+1], [iResult_Total+1]
0B60: 5F 30 20 MOV   [0x30],[0x20]      (0410) 	mov [dOpr1+2], [iResult_Total+2]
0B63: 5F 31 21 MOV   [0x31],[0x21]      (0411) 	mov [dOpr1+3], [iResult_Total+3]
                                        (0412) 	
0B66: 5F 2A 26 MOV   [0x2A],[0x26]      (0413) 	mov [dOpr2+0], [iResult_count+0]
0B69: 5F 2B 27 MOV   [0x2B],[0x27]      (0414) 	mov [dOpr2+1], [iResult_count+1]
0B6C: 5F 2C 28 MOV   [0x2C],[0x28]      (0415) 	mov [dOpr2+2], [iResult_count+2]
0B6F: 5F 2D 29 MOV   [0x2D],[0x29]      (0416) 	mov [dOpr2+3], [iResult_count+3]
                                        (0417) 	
0B72: 7C 12 4D LCALL 0x124D             (0418) 	lcall divide_32_routine
0B75: 5F 25 35 MOV   [0x25],[0x35]      (0419) 	mov [iResult1+3], [dRes+3]
0B78: 5F 24 34 MOV   [0x24],[0x34]      (0420) 	mov [iResult1+2], [dRes+2]
0B7B: 5F 23 33 MOV   [0x23],[0x33]      (0421) 	mov [iResult1+1], [dRes+1]
0B7E: 5F 22 32 MOV   [0x22],[0x32]      (0422) 	mov [iResult1+0], [dRes+0]
                                        (0423) 	
                                        (0424) 	;save to threshold value
0B81: 5F 37 25 MOV   [0x37],[0x25]      (0425) 	mov [threshold_value+1], [iResult1+3]
0B84: 5F 36 24 MOV   [0x36],[0x24]      (0426) 	mov [threshold_value+0], [iResult1+2]
                                        (0427) 	;shift threshold value to make whistle trigger when it's 2x higher
0B87: 65 37    ASL   [0x37]             (0428) 	asl [threshold_value+1]
0B89: 65 36    ASL   [0x36]             (0429) 	asl [threshold_value+0]
                                        (0430) 	
0B8B: 50 00    MOV   A,0x0              (0431) 	mov A, 00h
0B8D: 57 00    MOV   X,0x0              (0432) 	mov X, 00h
0B8F: 7C 07 1D LCALL _LCD_Position      (0433) 	lcall LCD_Position
0B92: 50 13    MOV   A,0x13             (0434) 	mov A, >CALC_THRESH_MODE
0B94: 57 A3    MOV   X,0xA3             (0435) 	mov X, <CALC_THRESH_MODE
0B96: 7C 05 98 LCALL _LCD_PrCString     (0436) 	lcall LCD_PrCString
                                        (0437) 	
0B99: 50 00    MOV   A,0x0              (0438) 	mov A, 00h
0B9B: 57 0B    MOV   X,0xB              (0439) 	mov X, 0Bh
0B9D: 7C 07 1D LCALL _LCD_Position      (0440) 	lcall LCD_Position
0BA0: 51 25    MOV   A,[0x25]           (0441) 	mov A, [iResult1+3]
0BA2: 7C 05 BA LCALL _LCD_PrHexByte     (0442) 	lcall LCD_PrHexByte
                                        (0443) 	
0BA5: 50 00    MOV   A,0x0              (0444) 	mov A, 00h
0BA7: 57 0D    MOV   X,0xD              (0445) 	mov X, 0Dh
0BA9: 7C 07 1D LCALL _LCD_Position      (0446) 	lcall LCD_Position
0BAC: 51 37    MOV   A,[0x37]           (0447) 	mov A, [threshold_value+1]
0BAE: 7C 05 BA LCALL _LCD_PrHexByte     (0448) 	lcall LCD_PrHexByte
                                        (0449) 	
                                        (0450) end_input_sensitivity:
0BB1: 3C 18 03 CMP   [0x18],0x3         (0451) 	cmp [addr_shrt_p], 03h	
0BB4: CE 3D    JC    0x09F2             (0452) 	jc loop				;make sure SP presses is less than 5 in button mode
0BB6: 55 18 00 MOV   [0x18],0x0         (0453) 	mov [addr_shrt_p], 00h
                                        (0454) 	
0BB9: 7D 09 F2 LJMP  0x09F2             (0455) 	ljmp loop
                                        (0456) 	
                                        (0457) ;---------------------END THRESHOLD MODE--------------------------------------
                                        (0458) 	
                                        (0459) ;---------------------START BUTTON MODE---------------------------------------
                                        (0460) 
                                        (0461) Button_m:
0BBC: 3C 18 00 CMP   [0x18],0x0         (0462)     cmp [addr_shrt_p], 00h
0BBF: B0 0F    JNZ   0x0BCF             (0463) 	jnz check_but_clear
0BC1: 50 00    MOV   A,0x0              (0464) 	mov A, 00h
0BC3: 57 00    MOV   X,0x0              (0465) 	mov X, 00h
0BC5: 7C 07 1D LCALL _LCD_Position      (0466) 	lcall LCD_Position
0BC8: 50 13    MOV   A,0x13             (0467) 	mov A, >BUTTON_MODE
0BCA: 57 4F    MOV   X,0x4F             (0468) 	mov X, <BUTTON_MODE
0BCC: 7C 05 98 LCALL _LCD_PrCString     (0469) 	lcall LCD_PrCString
                                        (0470) 
                                        (0471) check_but_clear:
0BCF: 3C 18 01 CMP   [0x18],0x1         (0472) 	cmp [addr_shrt_p], 01h
0BD2: B0 21    JNZ   0x0BF4             (0473) 	jnz check_but_start
0BD4: 55 0E 00 MOV   [0xE],0x0          (0474) 	mov [addr_inc_ms], 00h
0BD7: 55 0F 00 MOV   [0xF],0x0          (0475) 	mov [addr_inc_s], 00h
0BDA: 55 10 00 MOV   [0x10],0x0         (0476) 	mov [addr_inc_m], 00h
0BDD: 55 11 00 MOV   [0x11],0x0         (0477) 	mov [addr_inc_h], 00h
0BE0: 55 12 01 MOV   [0x12],0x1         (0478) 	mov [addr_timer_flag], 01h 			;new count is starting
                                        (0479) 	
                                        (0480) 	
0BE3: 50 00    MOV   A,0x0              (0481) 	mov A, 00h
0BE5: 57 00    MOV   X,0x0              (0482) 	mov X, 00h
0BE7: 7C 07 1D LCALL _LCD_Position      (0483) 	lcall LCD_Position
0BEA: 50 13    MOV   A,0x13             (0484) 	mov A, >CLEAR_TIME
0BEC: 57 70    MOV   X,0x70             (0485) 	mov X, <CLEAR_TIME
0BEE: 7C 05 98 LCALL _LCD_PrCString     (0486) 	lcall LCD_PrCString
                                        (0487) 	;lcall Display_Time_LCD
0BF1: 7D 09 F2 LJMP  0x09F2             (0488) 	ljmp loop
                                        (0489) 	
                                        (0490) check_but_start:
0BF4: 3C 18 02 CMP   [0x18],0x2         (0491) 	cmp [addr_shrt_p], 02h
0BF7: B0 9A    JNZ   0x0C92             (0492) 	jnz check_but_stop
                                        (0493) 
                                        (0494) 	;check if first entry to timer then reset timer
0BF9: 3C 12 01 CMP   [0x12],0x1         (0495) 	cmp [addr_timer_flag], 01h
0BFC: B0 07    JNZ   0x0C04             (0496) 	jnz button_timer_routine
                                        (0497) 	;else restart timer
0BFE: 55 0B 00 MOV   [0xB],0x0          (0498) 	mov [addr_timer_inc_ms], 00h
0C01: 55 12 00 MOV   [0x12],0x0         (0499) 	mov [addr_timer_flag], 00h
                                        (0500) 	
                                        (0501) button_timer_routine:
0C04: 3C 19 01 CMP   [0x19],0x1         (0502) 		cmp [addr_acc_mode],sec_mode
0C07: A0 24    JZ    0x0C2C             (0503) 		jz label_sec_mode
                                        (0504) 
0C09: 3C 19 02 CMP   [0x19],0x2         (0505) 		cmp [addr_acc_mode],halfsec_mode
0C0C: A0 07    JZ    0x0C14             (0506) 		jz label_halfsec_mode
                                        (0507) 
                                        (0508) 	label_tenthsec_mode:
                                        (0509) 		;mov [addr_inc_ms], [addr_internal_inc_ms]
0C0E: 5F 0E 0B MOV   [0xE],[0xB]        (0510) 		mov [addr_inc_ms], [addr_timer_inc_ms]
0C11: 7D 0C 35 LJMP  0x0C35             (0511) 		ljmp check_ms
                                        (0512) 
                                        (0513) 	label_halfsec_mode: 
                                        (0514) ;		mov A, [addr_internal_inc_ms]
0C14: 51 0B    MOV   A,[0xB]            (0515) 		mov A, [addr_timer_inc_ms]
0C16: 5C       MOV   X,A                (0516) 		mov X, A
0C17: 39 32    CMP   A,0x32             (0517) 		cmp A, 32h
0C19: B0 07    JNZ   0x0C21             (0518) 		jnz check_if_00
                                        (0519) ;		mov [addr_inc_ms], [addr_internal_inc_ms]
0C1B: 5F 0E 0B MOV   [0xE],[0xB]        (0520) 		mov [addr_inc_ms], [addr_timer_inc_ms]
0C1E: 7D 0C 35 LJMP  0x0C35             (0521) 		ljmp check_ms
                                        (0522) 	check_if_00:
0C21: 5B       MOV   A,X                (0523) 		mov A, X
0C22: 39 00    CMP   A,0x0              (0524) 		cmp A, 00h
0C24: B0 10    JNZ   0x0C35             (0525) 		jnz check_ms
                                        (0526) ;		mov [addr_inc_ms], [addr_internal_inc_ms]
0C26: 5F 0E 0B MOV   [0xE],[0xB]        (0527) 		mov [addr_inc_ms], [addr_timer_inc_ms]
0C29: 7D 0C 35 LJMP  0x0C35             (0528) 		ljmp check_ms
                                        (0529) 		
                                        (0530) 	label_sec_mode: 
                                        (0531) ;		mov A, [addr_internal_inc_ms]					;copy over because you need to compare
0C2C: 51 0B    MOV   A,[0xB]            (0532) 		mov A, [addr_timer_inc_ms]
0C2E: 39 00    CMP   A,0x0              (0533) 		cmp A, 00h
0C30: B0 04    JNZ   0x0C35             (0534) 		jnz check_ms									;keep display value as is
                                        (0535) 		;if it is 00 
                                        (0536) ;		mov [addr_inc_ms], [addr_internal_inc_ms]		;update value to be displayed
0C32: 5F 0E 0B MOV   [0xE],[0xB]        (0537) 		mov [addr_inc_ms], [addr_timer_inc_ms]
                                        (0538) 		;ljmp check_ms
                                        (0539) 		
                                        (0540) 
                                        (0541) 	check_ms:
                                        (0542) ;		mov A, [addr_internal_inc_ms] 	;
0C35: 51 0B    MOV   A,[0xB]            (0543) 		mov A, [addr_timer_inc_ms] 	;
0C37: 39 64    CMP   A,0x64             (0544) 		cmp A, 64h 		;compare to 100
0C39: B0 06    JNZ   0x0C40             (0545) 		jnz display_ms
                                        (0546) 		
                                        (0547) 	reset_ms:
                                        (0548) ;		mov [addr_internal_inc_ms], 00h
0C3B: 55 0B 00 MOV   [0xB],0x0          (0549) 		mov [addr_timer_inc_ms], 00h
0C3E: 76 0F    INC   [0xF]              (0550) 		inc [addr_inc_s]		;increment seconds
                                        (0551) 		
                                        (0552) 	display_ms:
0C40: 50 00    MOV   A,0x0              (0553) 		mov A, 00h
0C42: 57 09    MOV   X,0x9              (0554) 		mov X, 09h
0C44: 7C 07 1D LCALL _LCD_Position      (0555) 		lcall LCD_Position
0C47: 51 0E    MOV   A,[0xE]            (0556) 		mov A, [addr_inc_ms]
0C49: 7C 05 BA LCALL _LCD_PrHexByte     (0557) 		lcall LCD_PrHexByte
                                        (0558) 		
                                        (0559) 	check_sec:	
0C4C: 51 0F    MOV   A,[0xF]            (0560) 		mov A, [addr_inc_s]	;move [251] to A as to not mess up the actual number in [251] during compare
0C4E: 39 3C    CMP   A,0x3C             (0561) 		cmp A, 3Ch		;compare with 60
                                        (0562) 						;need to check CF : if it's not set than [251] is larger than 60
0C50: B0 06    JNZ   0x0C57             (0563) 		jnz display_sec
                                        (0564) 
                                        (0565) 	reset_sec:
0C52: 55 0F 00 MOV   [0xF],0x0          (0566) 		mov [addr_inc_s],00h
0C55: 76 10    INC   [0x10]             (0567) 		inc [addr_inc_m]		;increment minutes
                                        (0568) 		
                                        (0569) 	display_sec:
0C57: 50 00    MOV   A,0x0              (0570) 	    mov A, 00h
0C59: 57 06    MOV   X,0x6              (0571) 		mov X, 06h
0C5B: 7C 07 1D LCALL _LCD_Position      (0572) 		lcall LCD_Position
0C5E: 51 0F    MOV   A,[0xF]            (0573) 		mov A, [addr_inc_s]
0C60: 7C 05 BA LCALL _LCD_PrHexByte     (0574) 		lcall LCD_PrHexByte
                                        (0575) 		
                                        (0576) 		
                                        (0577) 	check_min:
0C63: 51 10    MOV   A,[0x10]           (0578) 		mov A, [addr_inc_m]	;move [251] to A as to not mess up the actual number in [251] during compare
0C65: 39 3C    CMP   A,0x3C             (0579) 		cmp A, 3Ch		;compare with 60
                                        (0580) 						;need to check CF : if it's not set than [251] is larger than 60
0C67: B0 06    JNZ   0x0C6E             (0581) 		jnz display_min
                                        (0582) 
                                        (0583) 	reset_min:
0C69: 55 0F 00 MOV   [0xF],0x0          (0584) 		mov [addr_inc_s],00h
0C6C: 76 11    INC   [0x11]             (0585) 		inc [addr_inc_h]
                                        (0586) 
                                        (0587) 	display_min:
0C6E: 50 00    MOV   A,0x0              (0588) 	    mov A, 00h
0C70: 57 03    MOV   X,0x3              (0589) 		mov X, 03h
0C72: 7C 07 1D LCALL _LCD_Position      (0590) 		lcall LCD_Position
0C75: 51 10    MOV   A,[0x10]           (0591) 		mov A, [addr_inc_m]
0C77: 7C 05 BA LCALL _LCD_PrHexByte     (0592) 		lcall LCD_PrHexByte
                                        (0593) 		
                                        (0594) 	check_hour:
0C7A: 51 11    MOV   A,[0x11]           (0595) 		mov A, [addr_inc_h]
0C7C: 39 18    CMP   A,0x18             (0596) 		cmp A, 18h		;compare with 24
0C7E: B0 04    JNZ   0x0C83             (0597) 		jnz display_hour
                                        (0598) 		
                                        (0599) 	reset_hour:
0C80: 55 11 00 MOV   [0x11],0x0         (0600) 		mov [addr_inc_h], 00h
                                        (0601) 		
                                        (0602) 	display_hour:
0C83: 50 00    MOV   A,0x0              (0603) 		mov A, 00h
0C85: 57 00    MOV   X,0x0              (0604) 		mov X, 00h
0C87: 7C 07 1D LCALL _LCD_Position      (0605) 		lcall LCD_Position
0C8A: 51 11    MOV   A,[0x11]           (0606) 		mov A, [addr_inc_h]
0C8C: 7C 05 BA LCALL _LCD_PrHexByte     (0607) 		lcall LCD_PrHexByte
0C8F: 7D 09 F2 LJMP  0x09F2             (0608) 	ljmp loop
                                        (0609) 	
                                        (0610) check_but_stop:
0C92: 3C 18 03 CMP   [0x18],0x3         (0611) 	cmp [addr_shrt_p], 03h
0C95: B0 2A    JNZ   0x0CC0             (0612) 	jnz before_check_but_end
                                        (0613) ;	lcall Save_Time
0C97: 3C 59 01 CMP   [0x59],0x1         (0614) 	cmp [flag_val], 01h
0C9A: A0 22    JZ    0x0CBD             (0615) 	jz saved
0C9C: 55 59 01 MOV   [0x59],0x1         (0616) 	mov [flag_val], 01h
                                        (0617) ;	mov [count_saved], 00h			;back to initialized value
                                        (0618) ;	mov [save_time_index], 00
                                        (0619) 
                                        (0620) ;save_and_count:
0C9F: 51 11    MOV   A,[0x11]           (0621) 		mov A, [addr_inc_h]
                                        (0622) 		;mov A, FFh
0CA1: 3F 1D    MVI   [0x1D],A           (0623) 		mvi [save_time_index], A
0CA3: 51 10    MOV   A,[0x10]           (0624) 		mov A, [addr_inc_m]
                                        (0625) 		;mov A, EEh
0CA5: 3F 1D    MVI   [0x1D],A           (0626) 		mvi [save_time_index], A
0CA7: 51 0F    MOV   A,[0xF]            (0627) 		mov A, [addr_inc_s]
                                        (0628) 		;mov A, DDh
0CA9: 3F 1D    MVI   [0x1D],A           (0629) 		mvi [save_time_index], A
0CAB: 51 0E    MOV   A,[0xE]            (0630) 		mov A, [addr_inc_ms]
                                        (0631) 		;mov A, CCh
0CAD: 3F 1D    MVI   [0x1D],A           (0632) 		mvi [save_time_index], A
                                        (0633) 		
0CAF: 76 1B    INC   [0x1B]             (0634) 		inc [count_saved]
                                        (0635) 		
0CB1: 50 01    MOV   A,0x1              (0636) 	mov A, 01h
0CB3: 57 09    MOV   X,0x9              (0637) 	mov X, 09h
0CB5: 7C 07 1D LCALL _LCD_Position      (0638) 	lcall LCD_Position
0CB8: 51 1B    MOV   A,[0x1B]           (0639) 	mov A, [count_saved]
0CBA: 7C 05 BA LCALL _LCD_PrHexByte     (0640) 	lcall LCD_PrHexByte
                                        (0641) 	
                                        (0642) 	
                                        (0643) 	;inc [addr_shrt_p]
                                        (0644) saved:
                                        (0645) ;	mov [flag_val], 00h
0CBD: 7D 09 F2 LJMP  0x09F2             (0646) 	ljmp loop
                                        (0647) 	;stop timer
                                        (0648) 
                                        (0649) 	
                                        (0650) before_check_but_end:
0CC0: 3C 18 04 CMP   [0x18],0x4         (0651) 	cmp [addr_shrt_p], 04h
0CC3: B0 55    JNZ   0x0D19             (0652) 	jnz check_but_end
                                        (0653) 	
0CC5: 55 59 00 MOV   [0x59],0x0         (0654) 	mov [flag_val], 00h
                                        (0655) 	
                                        (0656) ;	mov A, 00h
                                        (0657) ;	mov X, 00h
                                        (0658) ;	lcall LCD_Position
                                        (0659) ;	mov A, >DEBUG_MODE
                                        (0660) ;	mov X, <DEBUG_MODE
                                        (0661) ;	lcall LCD_PrCString
                                        (0662) ;	
                                        (0663) ;	mov A, 00h
                                        (0664) ;	mov X, 0Ch
                                        (0665) ;	lcall LCD_Position
                                        (0666) ;	mov A, reg[MVW_PP]
                                        (0667) ;	lcall LCD_PrHexByte
                                        (0668) ;	ljmp loop
                                        (0669) ;	
                                        (0670) 
0CC8: 55 40 00 MOV   [__r0],0x0         (0671) 	mov [pg6_reference], 00h
                                        (0672) 	
0CCB: 3E 40    MVI   A,[__r0]           (0673) 	mvi A, [pg6_reference]
0CCD: 53 16    MOV   [0x16],A           (0674) 	mov [read_addr_inc_h], A
0CCF: 3E 40    MVI   A,[__r0]           (0675) 	mvi A, [pg6_reference]
0CD1: 53 15    MOV   [0x15],A           (0676) 	mov [read_addr_inc_m], A
0CD3: 3E 40    MVI   A,[__r0]           (0677) 	mvi A, [pg6_reference]
0CD5: 53 14    MOV   [0x14],A           (0678) 	mov [read_addr_inc_s], A
0CD7: 3E 40    MVI   A,[__r0]           (0679) 	mvi A, [pg6_reference]
0CD9: 53 13    MOV   [0x13],A           (0680) 	mov [read_addr_inc_ms], A
                                        (0681) 
0CDB: 50 00    MOV   A,0x0              (0682) 	mov A, 00h
0CDD: 57 00    MOV   X,0x0              (0683) 	mov X, 00h
0CDF: 7C 07 1D LCALL _LCD_Position      (0684) 	lcall LCD_Position
0CE2: 51 16    MOV   A,[0x16]           (0685) 	mov A, [read_addr_inc_h]
0CE4: 7C 05 BA LCALL _LCD_PrHexByte     (0686) 	lcall LCD_PrHexByte
                                        (0687) 	
0CE7: 50 00    MOV   A,0x0              (0688) 	mov A, 00h
0CE9: 57 03    MOV   X,0x3              (0689) 	mov X, 03h
0CEB: 7C 07 1D LCALL _LCD_Position      (0690) 	lcall LCD_Position
0CEE: 51 15    MOV   A,[0x15]           (0691) 	mov A, [read_addr_inc_m]
0CF0: 7C 05 BA LCALL _LCD_PrHexByte     (0692) 	lcall LCD_PrHexByte
                                        (0693) 	
0CF3: 50 00    MOV   A,0x0              (0694) 	mov A, 00h
0CF5: 57 06    MOV   X,0x6              (0695) 	mov X, 06h
0CF7: 7C 07 1D LCALL _LCD_Position      (0696) 	lcall LCD_Position
0CFA: 51 14    MOV   A,[0x14]           (0697) 	mov A, [read_addr_inc_s]
0CFC: 7C 05 BA LCALL _LCD_PrHexByte     (0698) 	lcall LCD_PrHexByte
                                        (0699) 	
0CFF: 50 00    MOV   A,0x0              (0700) 	mov A, 00h
0D01: 57 09    MOV   X,0x9              (0701) 	mov X, 09h
0D03: 7C 07 1D LCALL _LCD_Position      (0702) 	lcall LCD_Position
0D06: 51 13    MOV   A,[0x13]           (0703) 	mov A, [read_addr_inc_ms]
0D08: 7C 05 BA LCALL _LCD_PrHexByte     (0704) 	lcall LCD_PrHexByte	
                                        (0705) 	
0D0B: 50 00    MOV   A,0x0              (0706) 	mov A, 00h
0D0D: 57 0C    MOV   X,0xC              (0707) 	mov X, 0Ch
0D0F: 7C 07 1D LCALL _LCD_Position      (0708) 	lcall LCD_Position
0D12: 50 14    MOV   A,0x14             (0709) 	mov A, >SAVE
0D14: 57 09    MOV   X,0x9              (0710) 	mov X, <SAVE
0D16: 7C 05 98 LCALL _LCD_PrCString     (0711) 	lcall LCD_PrCString
                                        (0712) 	
                                        (0713) check_but_end:
0D19: 3C 18 05 CMP   [0x18],0x5         (0714) 	cmp [addr_shrt_p], 05h
0D1C: CC D5    JC    0x09F2             (0715) 	jc loop				;make sure SP presses is less than 5 in button mode
0D1E: 55 18 00 MOV   [0x18],0x0         (0716) 	mov [addr_shrt_p], 00h
                                        (0717) 	
0D21: 7D 09 F2 LJMP  0x09F2             (0718) 	ljmp loop
                                        (0719) 	
                                        (0720) ;---------------------END BUTTON MODE----------------------------------------
                                        (0721) 	
                                        (0722) ;---------------------START SOUND MODE---------------------------------------
                                        (0723) Sound_m:
0D24: 3C 18 00 CMP   [0x18],0x0         (0724) 	cmp [addr_shrt_p], 00h
0D27: B0 12    JNZ   0x0D3A             (0725) 	jnz start_sound_check
0D29: 50 00    MOV   A,0x0              (0726) 	mov A, 00h
0D2B: 57 00    MOV   X,0x0              (0727) 	mov X, 00h
0D2D: 7C 07 1D LCALL _LCD_Position      (0728) 	lcall LCD_Position
0D30: 50 13    MOV   A,0x13             (0729) 	mov A, >SOUND_MODE
0D32: 57 C5    MOV   X,0xC5             (0730) 	mov X, <SOUND_MODE
0D34: 7C 05 98 LCALL _LCD_PrCString     (0731) 	lcall LCD_PrCString
0D37: 7D 09 F2 LJMP  0x09F2             (0732) 	ljmp loop
                                        (0733) 	
                                        (0734) start_sound_check:
0D3A: 3C 18 01 CMP   [0x18],0x1         (0735) 	cmp [addr_shrt_p], 01h
0D3D: B0 21    JNZ   0x0D5F             (0736) 	jnz give_time_for_sound_to_occur_for_start
                                        (0737) 	
0D3F: 55 0E 00 MOV   [0xE],0x0          (0738) 	mov [addr_inc_ms], 00h
0D42: 55 0F 00 MOV   [0xF],0x0          (0739) 	mov [addr_inc_s], 00h
0D45: 55 10 00 MOV   [0x10],0x0         (0740) 	mov [addr_inc_m], 00h
0D48: 55 11 00 MOV   [0x11],0x0         (0741) 	mov [addr_inc_h], 00h
0D4B: 55 12 01 MOV   [0x12],0x1         (0742) 	mov [addr_timer_flag], 01h 			;new count is starting
                                        (0743) 	
0D4E: 50 00    MOV   A,0x0              (0744) 	mov A, 00h
0D50: 57 00    MOV   X,0x0              (0745) 	mov X, 00h
0D52: 7C 07 1D LCALL _LCD_Position      (0746) 	lcall LCD_Position
0D55: 50 13    MOV   A,0x13             (0747) 	mov A, >CLEAR_TIME
0D57: 57 70    MOV   X,0x70             (0748) 	mov X, <CLEAR_TIME
0D59: 7C 05 98 LCALL _LCD_PrCString     (0749) 	lcall LCD_PrCString
0D5C: 7D 09 F2 LJMP  0x09F2             (0750) 	ljmp loop
                                        (0751) 	
                                        (0752) give_time_for_sound_to_occur_for_start:	
                                        (0753) 	;clear iresult_total
0D5F: 3C 18 02 CMP   [0x18],0x2         (0754) 	cmp [addr_shrt_p], 02h
0D62: B0 8B    JNZ   0x0DEE             (0755) 	jnz run_timer			;this may just exit without short button press
0D64: 41 E0 DF AND   REG[0xE0],0xDF     
                                        (0756) 	
                                        (0757) 	;disable button press to start timer
                                        (0758) 	M8C_DisableIntMask INT_MSK0, INT_MSK0_GPIO 					;enable GPIO Interrupt Mask
                                        (0759) 	
0D67: 55 21 00 MOV   [0x21],0x0         (0760) 	mov [iResult_Total+3], 00h
0D6A: 55 20 00 MOV   [0x20],0x0         (0761) 	mov [iResult_Total+2], 00h
0D6D: 55 1F 00 MOV   [0x1F],0x0         (0762) 	mov [iResult_Total+1], 00h
0D70: 55 1E 00 MOV   [0x1E],0x0         (0763) 	mov [iResult_Total+0], 00h
                                        (0764) 	
0D73: 55 29 00 MOV   [0x29],0x0         (0765) 	mov [iResult_count+3], 00h
0D76: 55 28 00 MOV   [0x28],0x0         (0766) 	mov [iResult_count+2], 00h
0D79: 55 27 00 MOV   [0x27],0x0         (0767) 	mov [iResult_count+1], 00h
0D7C: 55 26 00 MOV   [0x26],0x0         (0768) 	mov [iResult_count+0], 00h
                                        (0769) 	
0D7F: 55 0D 00 MOV   [0xD],0x0          (0770) 	mov [addr_adc_inc_ms],00h	;reset our little timer - not being used by any routine
                                        (0771) wait_2_ADC:                              ; Poll until data is complete
0D82: 7C 08 B6 LCALL _DUALADC_1_fIsDataAvailable|_DUALADC_1_fIsData|DUALADC_1_fIsData(0772)     lcall  DUALADC_1_fIsDataAvailable
0D85: AF FC    JZ    0x0D82             (0773)     jz    wait_2_ADC
0D87: 70 FE    AND   F,0xFE             
                                        (0774) 	M8C_DisableGInt   
                                        (0775) 
0D89: 7C 08 C9 LCALL _DUALADC_1_iGetData1(0776)     lcall  DUALADC_1_iGetData1        ; Get ADC1 Data (X=MSB A=LSB)
0D8C: 71 01    OR    F,0x1              
                                        (0777) 	M8C_EnableGInt 
                                        (0778) 
                                        (0779) 	; Reset flag
0D8E: 7C 08 E4 LCALL _DUALADC_1_ClearFlag(0780) 	lcall  DUALADC_1_ClearFlag 
                                        (0781) 	;add the received iResult to total results
0D91: 70 FB    AND   F,0xFB             (0782) 	and F, FBh
                                        (0783) 	
0D93: 04 21    ADD   [0x21],A           (0784) 	add	[iResult_Total+3], A 	;save LSB
0D95: 5B       MOV   A,X                (0785) 	mov A, X
0D96: 0C 20    ADC   [0x20],A           (0786) 	adc [iResult_Total+2], A	;save MSB
0D98: 0E 1F 00 ADC   [0x1F],0x0         (0787) 	adc [iResult_Total+1], 00h
0D9B: 0E 1E 00 ADC   [0x1E],0x0         (0788) 	adc [iResult_Total+0], 00h
                                        (0789) 	
0D9E: 76 29    INC   [0x29]             (0790) 	inc [iResult_count+3]
0DA0: 0E 28 00 ADC   [0x28],0x0         (0791) 	adc [iResult_count+2],00h
0DA3: 0E 27 00 ADC   [0x27],0x0         (0792) 	adc [iResult_count+1],00h
0DA6: 0E 26 00 ADC   [0x26],0x0         (0793) 	adc [iResult_count+0],00h
                                        (0794) 	
                                        (0795) 	;cmp [addr_adc_inc_ms], 28h
0DA9: 3C 0D 05 CMP   [0xD],0x5          (0796) 	cmp [addr_adc_inc_ms], 05h;alex changed
0DAC: BF D5    JNZ   0x0D82             (0797) 	jnz wait_2_ADC
                                        (0798) 	
0DAE: 5F 2E 1E MOV   [0x2E],[0x1E]      (0799) 	mov [dOpr1+0], [iResult_Total+0]
0DB1: 5F 2F 1F MOV   [0x2F],[0x1F]      (0800) 	mov [dOpr1+1], [iResult_Total+1]
0DB4: 5F 30 20 MOV   [0x30],[0x20]      (0801) 	mov [dOpr1+2], [iResult_Total+2]
0DB7: 5F 31 21 MOV   [0x31],[0x21]      (0802) 	mov [dOpr1+3], [iResult_Total+3]
                                        (0803) 	
0DBA: 5F 2A 26 MOV   [0x2A],[0x26]      (0804) 	mov [dOpr2+0], [iResult_count+0]
0DBD: 5F 2B 27 MOV   [0x2B],[0x27]      (0805) 	mov [dOpr2+1], [iResult_count+1]
0DC0: 5F 2C 28 MOV   [0x2C],[0x28]      (0806) 	mov [dOpr2+2], [iResult_count+2]
0DC3: 5F 2D 29 MOV   [0x2D],[0x29]      (0807) 	mov [dOpr2+3], [iResult_count+3]
                                        (0808) 	
0DC6: 7C 12 4D LCALL 0x124D             (0809) 	lcall divide_32_routine
0DC9: 5F 25 35 MOV   [0x25],[0x35]      (0810) 	mov [iResult1+3], [dRes+3]
0DCC: 5F 24 34 MOV   [0x24],[0x34]      (0811) 	mov [iResult1+2], [dRes+2]
0DCF: 5F 23 33 MOV   [0x23],[0x33]      (0812) 	mov [iResult1+1], [dRes+1]
0DD2: 5F 22 32 MOV   [0x22],[0x32]      (0813) 	mov [iResult1+0], [dRes+0]
                                        (0814) 	
                                        (0815) compare_to_threshold:
0DD5: 51 24    MOV   A,[0x24]           (0816) 	mov A, [iResult1+2]				;holds MSB of of result part that we care about (aka lower two bytes)
0DD7: 3A 36    CMP   A,[0x36]           (0817)     cmp A, [threshold_value+0]		;holds MSB of threshold
0DD9: A0 06    JZ    0x0DE0             (0818) 	jz check_LSB_of_sound			;if they are both zero than check LSB
0DDB: D0 0D    JNC   0x0DE9             (0819) 	jnc start_sound_timer		;if there was no carry, than incoming MSB is greater than threshold MSB = SOUND!
0DDD: 7D 09 F2 LJMP  0x09F2             (0820) 	ljmp loop					;if there was a carry, than threshold MSB is greater than incoming, so incoming isn't high enough
                                        (0821) 									;if not check if timing is running and continue running it/not running and continue not running it
                                        (0822) 	
                                        (0823) check_LSB_of_sound:	
0DE0: 51 25    MOV   A,[0x25]           (0824) 	mov A, [iResult1+3]				
0DE2: 3A 37    CMP   A,[0x37]           (0825) 	cmp A, [threshold_value+1]
0DE4: D0 04    JNC   0x0DE9             (0826) 	jnc start_sound_timer					;result is more than threshold
                                        (0827) 	;ljmp check_run_timer							;if not check if timing is running and continue running it/not running and continue not running it
0DE6: 7D 09 F2 LJMP  0x09F2             (0828) 	ljmp loop
                                        (0829) 
                                        (0830) 
                                        (0831) start_sound_timer:
                                        (0832) 
0DE9: 76 18    INC   [0x18]             (0833) 	inc [addr_shrt_p]
0DEB: 7D 09 F2 LJMP  0x09F2             (0834) 	ljmp loop
                                        (0835) 
                                        (0836) run_timer:
0DEE: 3C 18 03 CMP   [0x18],0x3         (0837) 	cmp [addr_shrt_p], 03h
0DF1: B0 9F    JNZ   0x0E91             (0838) 	jnz dont_run_timer
0DF3: 43 E0 20 OR    REG[0xE0],0x20     
                                        (0839) 	
                                        (0840) 	;re-enable button press
                                        (0841) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO 					;enable GPIO Interrupt Mask
                                        (0842) 
0DF6: 5D 04    MOV   A,REG[0x4]         (0843) 	mov A, reg[PRT1DR]
0DF8: 31 FF    XOR   A,0xFF             (0844) 	xor A, FFh
0DFA: 60 04    MOV   REG[0x4],A         (0845) 	mov reg[PRT1DR], A
                                        (0846) 	
0DFC: 3C 12 01 CMP   [0x12],0x1         (0847) 	cmp [addr_timer_flag], 01h
0DFF: B0 07    JNZ   0x0E07             (0848) 	jnz sound_timer_routine
                                        (0849) 	;else restart timer
0E01: 55 0B 00 MOV   [0xB],0x0          (0850) 	mov [addr_timer_inc_ms], 00h
0E04: 55 12 00 MOV   [0x12],0x0         (0851) 	mov [addr_timer_flag], 00h
                                        (0852) 
                                        (0853) 
                                        (0854) sound_timer_routine:
                                        (0855) 	
0E07: 7C 12 73 LCALL 0x1273             (0856) 	lcall Sound_mode_generic_timer
                                        (0857) 	
                                        (0858) give_time_for_sound_to_occur_for_stop:	
                                        (0859) 
                                        (0860) 	
0E0A: 55 21 00 MOV   [0x21],0x0         (0861) 	mov [iResult_Total+3], 00h
0E0D: 55 20 00 MOV   [0x20],0x0         (0862) 	mov [iResult_Total+2], 00h
0E10: 55 1F 00 MOV   [0x1F],0x0         (0863) 	mov [iResult_Total+1], 00h
0E13: 55 1E 00 MOV   [0x1E],0x0         (0864) 	mov [iResult_Total+0], 00h
                                        (0865) 	
0E16: 55 29 00 MOV   [0x29],0x0         (0866) 	mov [iResult_count+3], 00h
0E19: 55 28 00 MOV   [0x28],0x0         (0867) 	mov [iResult_count+2], 00h
0E1C: 55 27 00 MOV   [0x27],0x0         (0868) 	mov [iResult_count+1], 00h
0E1F: 55 26 00 MOV   [0x26],0x0         (0869) 	mov [iResult_count+0], 00h
                                        (0870) 	
0E22: 55 0D 00 MOV   [0xD],0x0          (0871) 	mov [addr_adc_inc_ms],00h	;reset our little timer - not being used by any routine
                                        (0872) wait_2_ADC_stop:                              ; Poll until data is complete
0E25: 7C 08 B6 LCALL _DUALADC_1_fIsDataAvailable|_DUALADC_1_fIsData|DUALADC_1_fIsData(0873)     lcall  DUALADC_1_fIsDataAvailable
0E28: AF FC    JZ    0x0E25             (0874)     jz    wait_2_ADC_stop
0E2A: 70 FE    AND   F,0xFE             
                                        (0875) 	M8C_DisableGInt   
                                        (0876) 
0E2C: 7C 08 C9 LCALL _DUALADC_1_iGetData1(0877)     lcall  DUALADC_1_iGetData1        ; Get ADC1 Data (X=MSB A=LSB)
0E2F: 71 01    OR    F,0x1              
                                        (0878) 	M8C_EnableGInt 
                                        (0879) 
                                        (0880) 	; Reset flag
0E31: 7C 08 E4 LCALL _DUALADC_1_ClearFlag(0881) 	lcall  DUALADC_1_ClearFlag 
                                        (0882) 	;add the received iResult to total results
0E34: 70 FB    AND   F,0xFB             (0883) 	and F, FBh
                                        (0884) 	
0E36: 04 21    ADD   [0x21],A           (0885) 	add	[iResult_Total+3], A 	;save LSB
0E38: 5B       MOV   A,X                (0886) 	mov A, X
0E39: 0C 20    ADC   [0x20],A           (0887) 	adc [iResult_Total+2], A	;save MSB
0E3B: 0E 1F 00 ADC   [0x1F],0x0         (0888) 	adc [iResult_Total+1], 00h
0E3E: 0E 1E 00 ADC   [0x1E],0x0         (0889) 	adc [iResult_Total+0], 00h
                                        (0890) 	
0E41: 76 29    INC   [0x29]             (0891) 	inc [iResult_count+3]
0E43: 0E 28 00 ADC   [0x28],0x0         (0892) 	adc [iResult_count+2],00h
0E46: 0E 27 00 ADC   [0x27],0x0         (0893) 	adc [iResult_count+1],00h
0E49: 0E 26 00 ADC   [0x26],0x0         (0894) 	adc [iResult_count+0],00h
                                        (0895) 	
                                        (0896) 	;cmp [addr_adc_inc_ms], 28h
0E4C: 3C 0D 05 CMP   [0xD],0x5          (0897) 	cmp [addr_adc_inc_ms], 05h;alex changed
0E4F: BF 32    JNZ   0x0D82             (0898) 	jnz wait_2_ADC
                                        (0899) 	
0E51: 5F 2E 1E MOV   [0x2E],[0x1E]      (0900) 	mov [dOpr1+0], [iResult_Total+0]
0E54: 5F 2F 1F MOV   [0x2F],[0x1F]      (0901) 	mov [dOpr1+1], [iResult_Total+1]
0E57: 5F 30 20 MOV   [0x30],[0x20]      (0902) 	mov [dOpr1+2], [iResult_Total+2]
0E5A: 5F 31 21 MOV   [0x31],[0x21]      (0903) 	mov [dOpr1+3], [iResult_Total+3]
                                        (0904) 	
0E5D: 5F 2A 26 MOV   [0x2A],[0x26]      (0905) 	mov [dOpr2+0], [iResult_count+0]
0E60: 5F 2B 27 MOV   [0x2B],[0x27]      (0906) 	mov [dOpr2+1], [iResult_count+1]
0E63: 5F 2C 28 MOV   [0x2C],[0x28]      (0907) 	mov [dOpr2+2], [iResult_count+2]
0E66: 5F 2D 29 MOV   [0x2D],[0x29]      (0908) 	mov [dOpr2+3], [iResult_count+3]
                                        (0909) 	
0E69: 7C 12 4D LCALL 0x124D             (0910) 	lcall divide_32_routine
0E6C: 5F 25 35 MOV   [0x25],[0x35]      (0911) 	mov [iResult1+3], [dRes+3]
0E6F: 5F 24 34 MOV   [0x24],[0x34]      (0912) 	mov [iResult1+2], [dRes+2]
0E72: 5F 23 33 MOV   [0x23],[0x33]      (0913) 	mov [iResult1+1], [dRes+1]
0E75: 5F 22 32 MOV   [0x22],[0x32]      (0914) 	mov [iResult1+0], [dRes+0]
                                        (0915) 	
                                        (0916) compare_to_threshold_stop:
0E78: 51 24    MOV   A,[0x24]           (0917) 	mov A, [iResult1+2]				;holds MSB of of result part that we care about (aka lower two bytes)
0E7A: 3A 36    CMP   A,[0x36]           (0918)     cmp A, [threshold_value+0]		;holds MSB of threshold
0E7C: A0 06    JZ    0x0E83             (0919) 	jz check_LSB_of_sound_stop			;if they are both zero than check LSB
0E7E: D0 0D    JNC   0x0E8C             (0920) 	jnc stop_the_sound_timer			;if there was no carry, than incoming MSB is greater than threshold MSB = SOUND!
0E80: 7D 09 F2 LJMP  0x09F2             (0921) 	ljmp loop				;if there was a carry, than threshold MSB is greater than incoming, so incoming isn't high enough
                                        (0922) 									;if not check if timing is running and continue running it/not running and continue not running it
                                        (0923) 	
                                        (0924) check_LSB_of_sound_stop:	
0E83: 51 25    MOV   A,[0x25]           (0925) 	mov A, [iResult1+3]				
0E85: 3A 37    CMP   A,[0x37]           (0926) 	cmp A, [threshold_value+1]
0E87: D0 04    JNC   0x0E8C             (0927) 	jnc stop_the_sound_timer					;result is more than threshold
                                        (0928) 	;ljmp check_run_timer							;if not check if timing is running and continue running it/not running and continue not running it
0E89: 7D 09 F2 LJMP  0x09F2             (0929) 	ljmp loop	
                                        (0930) 
                                        (0931) stop_the_sound_timer:
0E8C: 76 18    INC   [0x18]             (0932) 	inc [addr_shrt_p]			;shrt_p should be 04h
0E8E: 7D 09 F2 LJMP  0x09F2             (0933) 	ljmp loop
                                        (0934) 
                                        (0935) dont_run_timer:
0E91: 3C 18 04 CMP   [0x18],0x4         (0936) 	cmp [addr_shrt_p], 04h
0E94: B0 04    JNZ   0x0E99             (0937) 	jnz end_sound_check
                                        (0938) 	;save time here
0E96: 7D 09 F2 LJMP  0x09F2             (0939) 	ljmp loop
                                        (0940) 	
                                        (0941) 
                                        (0942) 	
                                        (0943) end_sound_check:
0E99: 3C 18 05 CMP   [0x18],0x5         (0944) 	cmp [addr_shrt_p], 05h	
0E9C: CB 55    JC    0x09F2             (0945) 	jc loop				;make sure SP presses is less than 5 in button mode
0E9E: 55 18 00 MOV   [0x18],0x0         (0946) 	mov [addr_shrt_p], 00h
                                        (0947) 
                                        (0948) 
0EA1: 7D 09 F2 LJMP  0x09F2             (0949) 	ljmp loop
                                        (0950) ;---------------------END SOUND MODE-----------------------------------------
                                        (0951) 	
                                        (0952) ;---------------------START MEMORY MODE--------------------------------------
                                        (0953) 
                                        (0954) Mem_Display:
0EA4: 3C 18 00 CMP   [0x18],0x0         (0955) 	cmp [addr_shrt_p], 00h
0EA7: B0 12    JNZ   0x0EBA             (0956) 	jnz here_1
0EA9: 50 00    MOV   A,0x0              (0957) 	mov A, 00h
0EAB: 57 00    MOV   X,0x0              (0958) 	mov X, 00h
0EAD: 7C 07 1D LCALL _LCD_Position      (0959) 	lcall LCD_Position
0EB0: 50 13    MOV   A,0x13             (0960) 	mov A, >MEMORY_MODE
0EB2: 57 81    MOV   X,0x81             (0961) 	mov X, <MEMORY_MODE
0EB4: 7C 05 98 LCALL _LCD_PrCString     (0962) 	lcall LCD_PrCString
0EB7: 7D 09 F2 LJMP  0x09F2             (0963) 	ljmp loop
                                        (0964) 	
                                        (0965) 	here_1:
0EBA: 62 D4 06 MOV   REG[0xD4],0x6      (0966) 	mov reg[MVR_PP], 6			;reading from memory page 6
                                        (0967) 	
0EBD: 55 46 00 MOV   [0x46],0x0         (0968) 	mov [sum_ms], 00h
0EC0: 55 44 00 MOV   [0x44],0x0         (0969) 	mov [sum_sec_LSB], 00h
0EC3: 55 45 00 MOV   [0x45],0x0         (0970) 	mov [sum_sec_MSB], 00h
0EC6: 55 42 00 MOV   [0x42],0x0         (0971) 	mov [sum_min_LSB], 00h
0EC9: 55 43 00 MOV   [0x43],0x0         (0972) 	mov [sum_min_MSB], 00h
0ECC: 55 41 00 MOV   [0x41],0x0         (0973) 	mov [sum_hr], 00h
                                        (0974) 	
0ECF: 55 50 00 MOV   [0x50],0x0         (0975) 	mov [avg_ms], 00h
0ED2: 55 49 00 MOV   [0x49],0x0         (0976) 	mov [avg_sec], 00h
0ED5: 55 48 00 MOV   [0x48],0x0         (0977) 	mov [avg_min], 00h
0ED8: 55 47 00 MOV   [0x47],0x0         (0978) 	mov [avg_hr], 00h
                                        (0979) 	
0EDB: 55 54 00 MOV   [0x54],0x0         (0980) 	mov [max_ms], 00h
0EDE: 55 53 00 MOV   [0x53],0x0         (0981) 	mov [max_sec], 00h
0EE1: 55 52 00 MOV   [0x52],0x0         (0982) 	mov [max_min], 00h
0EE4: 55 51 00 MOV   [0x51],0x0         (0983) 	mov [max_hr], 00h
                                        (0984) 	
0EE7: 55 58 00 MOV   [0x58],0x0         (0985) 	mov [min_ms], 00h
0EEA: 55 57 00 MOV   [0x57],0x0         (0986) 	mov [min_sec], 00h
0EED: 55 56 00 MOV   [0x56],0x0         (0987) 	mov [min_min], 00h
0EF0: 55 55 00 MOV   [0x55],0x0         (0988) 	mov [min_hr], 00h
                                        (0989) 	
                                        (0990) ;	mov [pg6_reference], 00h
                                        (0991) 
0EF3: 3C 18 01 CMP   [0x18],0x1         (0992) 	cmp [addr_shrt_p], 01h		;maximum/longest mode
0EF6: B0 B1    JNZ   0x0FA8             (0993) 	jnz shortest_time
                                        (0994) 	
0EF8: 57 0B    MOV   X,0xB              (0995) 	mov X, 11
0EFA: 55 40 00 MOV   [__r0],0x0         (0996) 	mov [pg6_reference], 00		;bringing the position at pg6 at the starting position
0EFD: 7D 0F 18 LJMP  0x0F18             (0997) 	ljmp next
                                        (0998) 	
                                        (0999) next_A:
0F00: 06 40 03 ADD   [__r0],0x3         (1000) 	add [pg6_reference], 3
0F03: 70 FB    AND   F,0xFB             (1001) 	and F, FBh
0F05: 7D 0F 18 LJMP  0x0F18             (1002) 	ljmp next
                                        (1003) next_B:
0F08: 06 40 02 ADD   [__r0],0x2         (1004) 	add [pg6_reference], 2
0F0B: 70 FB    AND   F,0xFB             (1005) 	and F, FBh
0F0D: 7D 0F 18 LJMP  0x0F18             (1006) 	ljmp next
                                        (1007) next_C:
0F10: 06 40 01 ADD   [__r0],0x1         (1008) 	add [pg6_reference], 1
0F13: 70 FB    AND   F,0xFB             (1009) 	and F, FBh
0F15: 7D 0F 18 LJMP  0x0F18             (1010) 	ljmp next
                                        (1011) 	
                                        (1012) next:
0F18: 79       DEC   X                  (1013) 	dec X
0F19: A0 4D    JZ    0x0F67             (1014) 	jz end_max
0F1B: 3E 40    MVI   A,[__r0]           (1015) 	mvi A, [pg6_reference]
0F1D: 3A 51    CMP   A,[0x51]           (1016) 	cmp A, [max_hr]
0F1F: A0 14    JZ    0x0F34             (1017) 	jz check_min_max
0F21: CF DE    JC    0x0F00             (1018) 	jc next_A
0F23: 53 51    MOV   [0x51],A           (1019) 	mov [max_hr], A
0F25: 3E 40    MVI   A,[__r0]           (1020) 	mvi A, [pg6_reference]
0F27: 53 52    MOV   [0x52],A           (1021) 	mov [max_min], A
0F29: 3E 40    MVI   A,[__r0]           (1022) 	mvi A, [pg6_reference]
0F2B: 53 53    MOV   [0x53],A           (1023) 	mov [max_sec], A
0F2D: 3E 40    MVI   A,[__r0]           (1024) 	mvi A, [pg6_reference]
0F2F: 53 54    MOV   [0x54],A           (1025) 	mov [max_ms], A
0F31: 7D 0F 18 LJMP  0x0F18             (1026) 	ljmp next
                                        (1027) check_min_max:
0F34: 3E 40    MVI   A,[__r0]           (1028) 	mvi A, [pg6_reference]
0F36: 3A 52    CMP   A,[0x52]           (1029) 	cmp A, [max_min]
0F38: A0 10    JZ    0x0F49             (1030) 	jz check_sec_max
0F3A: CF CD    JC    0x0F08             (1031) 	jc next_B
0F3C: 53 52    MOV   [0x52],A           (1032) 	mov [max_min], A
0F3E: 3E 40    MVI   A,[__r0]           (1033) 	mvi A, [pg6_reference]
0F40: 53 53    MOV   [0x53],A           (1034) 	mov [max_sec], A
0F42: 3E 40    MVI   A,[__r0]           (1035) 	mvi A, [pg6_reference]
0F44: 53 54    MOV   [0x54],A           (1036) 	mov [max_ms], A
0F46: 7D 0F 18 LJMP  0x0F18             (1037) 	ljmp next
                                        (1038) check_sec_max:
0F49: 3E 40    MVI   A,[__r0]           (1039) 	mvi A, [pg6_reference]
0F4B: 3A 53    CMP   A,[0x53]           (1040) 	cmp A, [max_sec]
0F4D: A0 0C    JZ    0x0F5A             (1041) 	jz check_ms_max
0F4F: CF C0    JC    0x0F10             (1042) 	jc next_C
0F51: 53 53    MOV   [0x53],A           (1043) 	mov [max_sec], A
0F53: 3E 40    MVI   A,[__r0]           (1044) 	mvi A, [pg6_reference]
0F55: 53 54    MOV   [0x54],A           (1045) 	mov [max_ms], A
0F57: 7D 0F 18 LJMP  0x0F18             (1046) 	ljmp next
                                        (1047) check_ms_max:
0F5A: 3E 40    MVI   A,[__r0]           (1048) 	mvi A, [pg6_reference]
0F5C: 3A 54    CMP   A,[0x54]           (1049) 	cmp A, [max_ms]
0F5E: AF B9    JZ    0x0F18             (1050) 	jz next
0F60: CF B7    JC    0x0F18             (1051) 	jc next
0F62: 53 54    MOV   [0x54],A           (1052) 	mov [max_ms], A
0F64: 7D 0F 18 LJMP  0x0F18             (1053) 	ljmp next
                                        (1054) 
                                        (1055) end_max:
                                        (1056) 
                                        (1057) ;	mov A, 01h
                                        (1058) ;	mov X, 00h
                                        (1059) ;	lcall LCD_Position
                                        (1060) ;	mov A, >CLEAN_LCD
                                        (1061) ;	mov X, <CLEAN_LCD
                                        (1062) ;	lcall LCD_PrCString
                                        (1063) 	
0F67: 50 01    MOV   A,0x1              (1064) 	mov A, 01h
0F69: 57 00    MOV   X,0x0              (1065) 	mov X, 00h
0F6B: 7C 07 1D LCALL _LCD_Position      (1066) 	lcall LCD_Position
0F6E: 51 51    MOV   A,[0x51]           (1067) 	mov A, [max_hr]
0F70: 7C 05 BA LCALL _LCD_PrHexByte     (1068) 	lcall LCD_PrHexByte
                                        (1069) 	
0F73: 50 01    MOV   A,0x1              (1070) 	mov A, 01h
0F75: 57 03    MOV   X,0x3              (1071) 	mov X, 03h
0F77: 7C 07 1D LCALL _LCD_Position      (1072) 	lcall LCD_Position
0F7A: 51 52    MOV   A,[0x52]           (1073) 	mov A, [max_min]
0F7C: 7C 05 BA LCALL _LCD_PrHexByte     (1074) 	lcall LCD_PrHexByte
                                        (1075) 	
0F7F: 50 01    MOV   A,0x1              (1076) 	mov A, 01h
0F81: 57 06    MOV   X,0x6              (1077) 	mov X, 06h
0F83: 7C 07 1D LCALL _LCD_Position      (1078) 	lcall LCD_Position
0F86: 51 53    MOV   A,[0x53]           (1079) 	mov A, [max_sec]
0F88: 7C 05 BA LCALL _LCD_PrHexByte     (1080) 	lcall LCD_PrHexByte
                                        (1081) 	
0F8B: 50 01    MOV   A,0x1              (1082) 	mov A, 01h
0F8D: 57 09    MOV   X,0x9              (1083) 	mov X, 09h
0F8F: 7C 07 1D LCALL _LCD_Position      (1084) 	lcall LCD_Position
0F92: 51 54    MOV   A,[0x54]           (1085) 	mov A, [max_ms]
0F94: 7C 05 BA LCALL _LCD_PrHexByte     (1086) 	lcall LCD_PrHexByte
                                        (1087) 	
                                        (1088) ;	mov A, 01h
                                        (1089) ;	mov X, 00h
                                        (1090) ;	lcall LCD_Position
                                        (1091) ;	mov A, >CLEAN_LCD
                                        (1092) ;	mov X, <CLEAN_LCD
                                        (1093) ;	lcall LCD_PrCString
                                        (1094) 
0F97: 50 00    MOV   A,0x0              (1095) 	mov A, 00h
0F99: 57 00    MOV   X,0x0              (1096) 	mov X, 00h
0F9B: 7C 07 1D LCALL _LCD_Position      (1097) 	lcall LCD_Position
0F9E: 50 14    MOV   A,0x14             (1098) 	mov A, >MAXIMUM
0FA0: 57 39    MOV   X,0x39             (1099) 	mov X, <MAXIMUM
0FA2: 7C 05 98 LCALL _LCD_PrCString     (1100) 	lcall LCD_PrCString
                                        (1101) 	
0FA5: 7D 09 F2 LJMP  0x09F2             (1102) 	ljmp loop
                                        (1103) 	
                                        (1104) shortest_time:
0FA8: 3C 18 02 CMP   [0x18],0x2         (1105) 	cmp [addr_shrt_p], 02h
0FAB: B0 BE    JNZ   0x106A             (1106) 	jnz average
                                        (1107) 	
0FAD: 55 40 00 MOV   [__r0],0x0         (1108) 	mov [pg6_reference], 00
0FB0: 57 0A    MOV   X,0xA              (1109) 	mov X, 10
0FB2: 3E 40    MVI   A,[__r0]           (1110) 	mvi A, [pg6_reference]
0FB4: 53 55    MOV   [0x55],A           (1111) 	mov [min_hr], A
0FB6: 3E 40    MVI   A,[__r0]           (1112) 	mvi A, [pg6_reference]
0FB8: 53 56    MOV   [0x56],A           (1113) 	mov [min_min], A
0FBA: 3E 40    MVI   A,[__r0]           (1114) 	mvi A, [pg6_reference]
0FBC: 53 57    MOV   [0x57],A           (1115) 	mov [min_sec], A
0FBE: 3E 40    MVI   A,[__r0]           (1116) 	mvi A, [pg6_reference]
0FC0: 53 58    MOV   [0x58],A           (1117) 	mov [min_ms], A
0FC2: 7D 0F DA LJMP  0x0FDA             (1118) 	ljmp next_values
                                        (1119) 	
                                        (1120) min_loop:
                                        (1121) next_1:
0FC5: 06 40 03 ADD   [__r0],0x3         (1122) 	add [pg6_reference], 3
0FC8: 70 FB    AND   F,0xFB             (1123) 	and F, FBh
0FCA: 7D 0F DA LJMP  0x0FDA             (1124) 	ljmp next_values
                                        (1125) next_2:
0FCD: 06 40 02 ADD   [__r0],0x2         (1126) 	add [pg6_reference], 2
0FD0: 70 FB    AND   F,0xFB             (1127) 	and F, FBh
0FD2: 7D 0F DA LJMP  0x0FDA             (1128) 	ljmp next_values
                                        (1129) next_3:
0FD5: 06 40 01 ADD   [__r0],0x1         (1130) 	add [pg6_reference], 1
0FD8: 70 FB    AND   F,0xFB             (1131) 	and F, FBh
                                        (1132) next_values:
0FDA: 79       DEC   X                  (1133) 	dec X
0FDB: A0 4D    JZ    0x1029             (1134) 	jz end_min
0FDD: 3E 40    MVI   A,[__r0]           (1135) 	mvi A, [pg6_reference]
0FDF: 3A 55    CMP   A,[0x55]           (1136) 	cmp A, [min_hr]
0FE1: A0 14    JZ    0x0FF6             (1137) 	jz check_min_min
0FE3: DF E1    JNC   0x0FC5             (1138) 	jnc next_1
0FE5: 53 55    MOV   [0x55],A           (1139) 	mov [min_hr], A
0FE7: 3E 40    MVI   A,[__r0]           (1140) 	mvi A, [pg6_reference]
0FE9: 53 56    MOV   [0x56],A           (1141) 	mov [min_min], A
0FEB: 3E 40    MVI   A,[__r0]           (1142) 	mvi A, [pg6_reference]
0FED: 53 57    MOV   [0x57],A           (1143) 	mov [min_sec], A
0FEF: 3E 40    MVI   A,[__r0]           (1144) 	mvi A, [pg6_reference]
0FF1: 53 58    MOV   [0x58],A           (1145) 	mov [min_ms], A
0FF3: 7D 0F DA LJMP  0x0FDA             (1146) 	ljmp next_values
                                        (1147) check_min_min:
0FF6: 3E 40    MVI   A,[__r0]           (1148) 	mvi A, [pg6_reference]
0FF8: 3A 56    CMP   A,[0x56]           (1149) 	cmp A, [min_min]
0FFA: A0 10    JZ    0x100B             (1150) 	jz check_sec_min
0FFC: DF D0    JNC   0x0FCD             (1151) 	jnc next_2
0FFE: 53 56    MOV   [0x56],A           (1152) 	mov [min_min], A
1000: 3E 40    MVI   A,[__r0]           (1153) 	mvi A, [pg6_reference]
1002: 53 57    MOV   [0x57],A           (1154) 	mov [min_sec], A
1004: 3E 40    MVI   A,[__r0]           (1155) 	mvi A, [pg6_reference]
1006: 53 58    MOV   [0x58],A           (1156) 	mov [min_ms], A
1008: 7D 0F C5 LJMP  0x0FC5             (1157) 	ljmp next_1
                                        (1158) check_sec_min:
100B: 3E 40    MVI   A,[__r0]           (1159) 	mvi A, [pg6_reference]
100D: 3A 57    CMP   A,[0x57]           (1160) 	cmp A, [min_sec]
100F: A0 0C    JZ    0x101C             (1161) 	jz check_ms_min
1011: DF C3    JNC   0x0FD5             (1162) 	jnc next_3
1013: 53 57    MOV   [0x57],A           (1163) 	mov [min_sec], A
1015: 3E 40    MVI   A,[__r0]           (1164) 	mvi A, [pg6_reference]
1017: 53 58    MOV   [0x58],A           (1165) 	mov [min_ms], A
1019: 7D 0F C5 LJMP  0x0FC5             (1166) 	ljmp next_1
                                        (1167) check_ms_min:
101C: 3E 40    MVI   A,[__r0]           (1168) 	mvi A, [pg6_reference]
101E: 3A 58    CMP   A,[0x58]           (1169) 	cmp A, [min_ms]
1020: AF B9    JZ    0x0FDA             (1170) 	jz next_values
1022: DF B7    JNC   0x0FDA             (1171) 	jnc next_values
1024: 53 58    MOV   [0x58],A           (1172) 	mov [min_ms], A
1026: 7D 0F DA LJMP  0x0FDA             (1173) 	ljmp next_values
                                        (1174) 	
                                        (1175) end_min:
                                        (1176) ;	mov A, 01h
                                        (1177) ;	mov X, 00h
                                        (1178) ;	lcall LCD_Position
                                        (1179) ;	mov A, >CLEAN_LCD
                                        (1180) ;	mov X, <CLEAN_LCD
                                        (1181) ;	lcall LCD_PrCString
                                        (1182) 	
1029: 50 01    MOV   A,0x1              (1183) 	mov A, 01h
102B: 57 00    MOV   X,0x0              (1184) 	mov X, 00h
102D: 7C 07 1D LCALL _LCD_Position      (1185) 	lcall LCD_Position
1030: 51 55    MOV   A,[0x55]           (1186) 	mov A, [min_hr]
1032: 7C 05 BA LCALL _LCD_PrHexByte     (1187) 	lcall LCD_PrHexByte
                                        (1188) 	
1035: 50 01    MOV   A,0x1              (1189) 	mov A, 01h
1037: 57 03    MOV   X,0x3              (1190) 	mov X, 03h
1039: 7C 07 1D LCALL _LCD_Position      (1191) 	lcall LCD_Position
103C: 51 56    MOV   A,[0x56]           (1192) 	mov A, [min_min]
103E: 7C 05 BA LCALL _LCD_PrHexByte     (1193) 	lcall LCD_PrHexByte
                                        (1194) 	
1041: 50 01    MOV   A,0x1              (1195) 	mov A, 01h
1043: 57 06    MOV   X,0x6              (1196) 	mov X, 06h
1045: 7C 07 1D LCALL _LCD_Position      (1197) 	lcall LCD_Position
1048: 51 57    MOV   A,[0x57]           (1198) 	mov A, [min_sec]
104A: 7C 05 BA LCALL _LCD_PrHexByte     (1199) 	lcall LCD_PrHexByte
                                        (1200) 	
104D: 50 01    MOV   A,0x1              (1201) 	mov A, 01h
104F: 57 09    MOV   X,0x9              (1202) 	mov X, 09h
1051: 7C 07 1D LCALL _LCD_Position      (1203) 	lcall LCD_Position
1054: 51 58    MOV   A,[0x58]           (1204) 	mov A, [min_ms]
1056: 7C 05 BA LCALL _LCD_PrHexByte     (1205) 	lcall LCD_PrHexByte
                                        (1206) 	
                                        (1207) ;	mov A, 00h
                                        (1208) ;	mov X, 00h
                                        (1209) ;	lcall LCD_Position
                                        (1210) ;	mov A, >CLEAN_LCD
                                        (1211) ;	mov X, <CLEAN_LCD
                                        (1212) ;	lcall LCD_PrCString
                                        (1213) 	
1059: 50 00    MOV   A,0x0              (1214) 	mov A, 00h
105B: 57 00    MOV   X,0x0              (1215) 	mov X, 00h
105D: 7C 07 1D LCALL _LCD_Position      (1216) 	lcall LCD_Position
1060: 50 14    MOV   A,0x14             (1217) 	mov A, >MINIMUM
1062: 57 28    MOV   X,0x28             (1218) 	mov X, <MINIMUM
1064: 7C 05 98 LCALL _LCD_PrCString     (1219) 	lcall LCD_PrCString
                                        (1220) 	
1067: 7D 09 F2 LJMP  0x09F2             (1221) 	ljmp loop
                                        (1222) 	
                                        (1223) average:
106A: 3C 18 03 CMP   [0x18],0x3         (1224) 	cmp [addr_shrt_p],03h
106D: B1 D3    JNZ   0x1241             (1225) 	jnz end_memory_mode
                                        (1226) 	
                                        (1227) 	;Computing sum here
                                        (1228) 	
106F: 55 63 90 MOV   [0x63],0x90        (1229) 	mov [counter_sum],90h
1072: 55 A7 00 MOV   [0xA7],0x0         (1230) 	mov [counter_input],00h	
1075: 50 00    MOV   A,0x0              (1231) 	mov A,00h
1077: 3F 63    MVI   [0x63],A           (1232) 	mvi [counter_sum],A
1079: 3F 63    MVI   [0x63],A           (1233) 	mvi [counter_sum],A
107B: 3F 63    MVI   [0x63],A           (1234) 	mvi [counter_sum],A
107D: 3F 63    MVI   [0x63],A           (1235) 	mvi [counter_sum],A
                                        (1236) 	
                                        (1237) 	;register counter_sum will point to register 90h so that counter_sum can be implemented in MVI
                                        (1238) 	;load the first set of inputs into register that hold sum (90h,91h,92h)
                                        (1239) 	
107F: 55 64 04 MOV   [0x64],0x4         (1240) 	mov [counting_adds],4h	;since there will be 4 additions to finish adding two "times" we will set a counter for that.
1082: 55 62 0A MOV   [0x62],0xA         (1241) 	mov [input_count],0Ah	;This will enable us to add 4 sets of "time" values. This can be changed as per the requirement.
                                        (1242) compute_sum:
1085: 55 64 04 MOV   [0x64],0x4         (1243) 	mov [counting_adds],4h
1088: 55 63 90 MOV   [0x63],0x90        (1244) 	mov [counter_sum],90h
                                        (1245) add_values:
                                        (1246) 	;read value from the 1st set of inputs
108B: 3E A7    MVI   A,[0xA7]           (1247) 	mvi A,[counter_input]
108D: 53 65    MOV   [0x65],A           (1248) 	mov [operand_2],A
                                        (1249) 	;move value in 90h to add to corresponding ms value 
108F: 3E 63    MVI   A,[0x63]           (1250) 	mvi A,[counter_sum]
1091: 02 65    ADD   A,[0x65]           (1251) 	add A,[operand_2]
1093: 39 3C    CMP   A,0x3C             (1252) 	cmp A,3Ch	;compare each value with 60 so that when it exceeds 60, add 1 to next value in the sequence.
1095: D0 15    JNC   0x10AB             (1253) 	jnc add_one	;if A is >= 3C increment the value in the sequence by 1
                                        (1254) 	;move the sum into 90h register which is designated to hold ms values
1097: 7A 63    DEC   [0x63]             (1255) 	dec [counter_sum]
1099: 3F 63    MVI   [0x63],A           (1256) 	mvi [counter_sum],A
109B: 7A 64    DEC   [0x64]             (1257) 	dec [counting_adds]
109D: 3C 64 00 CMP   [0x64],0x0         (1258) 	cmp [counting_adds],00	;compare if all 4 values are added. 
10A0: BF EA    JNZ   0x108B             (1259) 	jnz add_values
10A2: 7A 62    DEC   [0x62]             (1260) 	dec [input_count]		;this counter keeps track of how many sets of values have been added.
10A4: 3C 62 00 CMP   [0x62],0x0         (1261) 	cmp [input_count],00
10A7: BF DD    JNZ   0x1085             (1262) 	jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
10A9: 80 21    JMP   0x10CB             (1263) 	jmp _avg_cal
                                        (1264) 	
                                        (1265) 	;incrementing the next value by 1
                                        (1266) add_one:
10AB: 11 3C    SUB   A,0x3C             (1267) 	sub A,3Ch	;get the value to be written into 90h after subtracting the carry value 
10AD: 7A 63    DEC   [0x63]             (1268) 	dec [counter_sum]
10AF: 3F 63    MVI   [0x63],A           (1269) 	mvi [counter_sum],A 
10B1: 3E 63    MVI   A,[0x63]           (1270) 	mvi A,[counter_sum]	;read value in 91h so that carry value can be added to it
10B3: 01 01    ADD   A,0x1              (1271) 	add A,1		;add carry value
10B5: 7A 63    DEC   [0x63]             (1272) 	dec [counter_sum]		
10B7: 3F 63    MVI   [0x63],A           (1273) 	mvi [counter_sum],A	;write back the value to 91h after adding carry.
10B9: 7A 63    DEC   [0x63]             (1274) 	dec [counter_sum]	
10BB: 7A 64    DEC   [0x64]             (1275) 	dec [counting_adds]
10BD: 3C 64 00 CMP   [0x64],0x0         (1276) 	cmp [counting_adds],00	;compare if all 4 values are added. 
10C0: BF CA    JNZ   0x108B             (1277) 	jnz add_values
10C2: 7A 62    DEC   [0x62]             (1278) 	dec [input_count]		;this counter keeps track of how many sets of values have been added.
10C4: 3C 62 00 CMP   [0x62],0x0         (1279) 	cmp [input_count],00
10C7: BF BD    JNZ   0x1085             (1280) 	jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
10C9: 80 01    JMP   0x10CB             (1281) 	jmp _avg_cal
                                        (1282) 
                                        (1283) 	;Computing average here
                                        (1284) 	
                                        (1285) _avg_cal:
10CB: 55 62 0A MOV   [0x62],0xA         (1286) 	mov [input_count],0Ah
10CE: 55 72 00 MOV   [0x72],0x0         (1287) 	mov [72h],00h
10D1: 62 D0 06 MOV   REG[0xD0],0x6      (1288) 	mov reg[CUR_PP], 06h
10D4: 5F D1 93 MOV   [0xD1],[0x93]      (1289) 	mov [D1h], [93h] 	;ram_2[10h]=value in 93h which is the sum of hours
10D7: 62 D0 00 MOV   REG[0xD0],0x0      (1290) 	mov reg[CUR_PP], 00h		;set Current Page Pointer back to 0
10DA: 55 EB D1 MOV   [0xEB],0xD1        (1291) 	mov [EBh], D1h 				;initialize MVI read pointer to 10h
10DD: 3E EB    MVI   A,[0xEB]           (1292) 	mvi A, [EBh]				;read the value in 93h to A
10DF: 55 86 00 MOV   [0x86],0x0         (1293) 	mov [86h],00h
10E2: 55 77 B0 MOV   [0x77],0xB0        (1294) 	mov [result_avg],B0h
10E5: 55 11 00 MOV   [0x11],0x0         (1295) 	mov [quotient_val], 00h
                                        (1296) 	
                                        (1297) compute_avg_hr:
10E8: 3A 62    CMP   A,[0x62]           (1298) 	cmp A,[input_count]
10EA: D0 09    JNC   0x10F4             (1299) 	jnc find_q_hr
10EC: 53 85    MOV   [0x85],A           (1300) 	mov [85h],A					;85h holds the remainder
10EE: 51 11    MOV   A,[0x11]           (1301) 	mov A,[quotient_val]
10F0: 3F 77    MVI   [0x77],A           (1302) 	mvi [result_avg],A			;register 83h holds the quotient
10F2: 80 07    JMP   0x10FA             (1303) 	jmp compute_avg_min
                                        (1304) 
                                        (1305) find_q_hr:
10F4: 12 62    SUB   A,[0x62]           (1306) 	sub A,[input_count]
10F6: 76 11    INC   [0x11]             (1307) 	inc [quotient_val]
10F8: 8F EF    JMP   0x10E8             (1308) 	jmp compute_avg_hr
                                        (1309) 	
                                        (1310) compute_avg_min:
10FA: 55 72 0A MOV   [0x72],0xA         (1311) 	mov [72h],0Ah
10FD: 55 61 00 MOV   [0x61],0x0         (1312) 	mov [61h],00h
1100: 55 68 00 MOV   [0x68],0x0         (1313) 	mov [68h],00h
1103: 50 00    MOV   A,0x0              (1314) 	mov A,00h
                                        (1315) 	
                                        (1316) Com_rem:
1105: 55 11 00 MOV   [0x11],0x0         (1317) 	mov [quotient_val],00h
1108: 55 75 06 MOV   [0x75],0x6         (1318) 	mov [75h], 06h
                                        (1319) 	
                                        (1320) compute_prd:
110B: 02 85    ADD   A,[0x85]           (1321) 	add A,[85h]
110D: 7A 75    DEC   [0x75]             (1322) 	dec [75h]
110F: 3C 75 00 CMP   [0x75],0x0         (1323) 	cmp [75h],00h
1112: BF F8    JNZ   0x110B             (1324) 	jnz compute_prd
                                        (1325) 	
                                        (1326) compute_rem:
1114: 3A 62    CMP   A,[0x62]           (1327) 	cmp A,[input_count]
1116: D0 17    JNC   0x112E             (1328) 	jnc find_q1
1118: 53 86    MOV   [0x86],A           (1329) 	mov [86h],A			;86h holds the remainder
111A: 5F 68 11 MOV   [0x68],[0x11]      (1330) 	mov [68h],[quotient_val]		;holds the quotient
111D: 51 68    MOV   A,[0x68]           (1331) 	mov A,[68h]
111F: 04 61    ADD   [0x61],A           (1332) 	add [61h],A
1121: 50 00    MOV   A,0x0              (1333) 	mov A,00h
1123: 02 86    ADD   A,[0x86]           (1334) 	add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
1125: 7A 72    DEC   [0x72]             (1335) 	dec [72h]
1127: 3C 72 00 CMP   [0x72],0x0         (1336) 	cmp [72h],00h
112A: BF DA    JNZ   0x1105             (1337) 	jnz Com_rem
112C: 80 07    JMP   0x1134             (1338) 	jmp add_tonext
                                        (1339) 
                                        (1340) find_q1:
112E: 12 62    SUB   A,[0x62]           (1341) 	sub A,[input_count]
1130: 76 11    INC   [0x11]             (1342) 	inc [quotient_val]
1132: 8F E1    JMP   0x1114             (1343) 	jmp compute_rem
                                        (1344) 	
                                        (1345) add_tonext:
1134: 62 D0 06 MOV   REG[0xD0],0x6      (1346) 	mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
1137: 5F D2 92 MOV   [0xD2],[0x92]      (1347) 	mov [D2h], [92h]
113A: 62 D0 00 MOV   REG[0xD0],0x0      (1348) 	mov reg[CUR_PP], 00h	;initialize MVI read pointer to 10h
113D: 55 EC D2 MOV   [0xEC],0xD2        (1349) 	mov [ECh], D2h
1140: 3E EC    MVI   A,[0xEC]           (1350) 	mvi A, [ECh]		;read the value in 92h into A
1142: 02 86    ADD   A,[0x86]           (1351) 	add A,[86h]
1144: 55 11 00 MOV   [0x11],0x0         (1352) 	mov [quotient_val],00h
                                        (1353) 	
                                        (1354) compute_avg:
1147: 3A 62    CMP   A,[0x62]           (1355) 	cmp A,[input_count]
1149: D0 0B    JNC   0x1155             (1356) 	jnc find_q_min
114B: 53 85    MOV   [0x85],A           (1357) 	mov [85h],A					;85h holds the remainder
114D: 51 11    MOV   A,[0x11]           (1358) 	mov A,[quotient_val]
114F: 02 61    ADD   A,[0x61]           (1359) 	add A,[61h]
1151: 3F 77    MVI   [0x77],A           (1360) 	mvi [result_avg],A			;register 81h holds the quotient
1153: 80 07    JMP   0x115B             (1361) 	jmp compute_avg_sec
                                        (1362) 
                                        (1363) find_q_min:
1155: 12 62    SUB   A,[0x62]           (1364) 	sub A,[input_count]
1157: 76 11    INC   [0x11]             (1365) 	inc [quotient_val]
1159: 8F ED    JMP   0x1147             (1366) 	jmp compute_avg
                                        (1367) 	
                                        (1368) compute_avg_sec:
115B: 55 72 0A MOV   [0x72],0xA         (1369) 	mov [72h],0Ah
115E: 55 61 00 MOV   [0x61],0x0         (1370) 	mov [61h],00h
1161: 55 68 00 MOV   [0x68],0x0         (1371) 	mov [68h],00h
1164: 50 00    MOV   A,0x0              (1372) 	mov A,00h
                                        (1373) 	
                                        (1374) Com_rem_sec:
1166: 55 11 00 MOV   [0x11],0x0         (1375) 	mov [quotient_val],00h
1169: 55 75 06 MOV   [0x75],0x6         (1376) 	mov [75h],06h	
                                        (1377) 	
                                        (1378) compute_prd_sec:
116C: 02 85    ADD   A,[0x85]           (1379) 	add A,[85h]
116E: 7A 75    DEC   [0x75]             (1380) 	dec [75h]
1170: 3C 75 00 CMP   [0x75],0x0         (1381) 	cmp [75h],00h
1173: BF F8    JNZ   0x116C             (1382) 	jnz compute_prd_sec
                                        (1383) 	
                                        (1384) compute_rem_sec:
1175: 3A 62    CMP   A,[0x62]           (1385) 	cmp A,[input_count]
1177: D0 17    JNC   0x118F             (1386) 	jnc find_q1_sec
1179: 53 86    MOV   [0x86],A           (1387) 	mov [86h],A			;86h holds the remainder
117B: 5F 68 11 MOV   [0x68],[0x11]      (1388) 	mov [68h],[quotient_val]		;holds the quotient
117E: 51 68    MOV   A,[0x68]           (1389) 	mov A,[68h]
1180: 04 61    ADD   [0x61],A           (1390) 	add [61h],A
1182: 50 00    MOV   A,0x0              (1391) 	mov A,00h
1184: 02 86    ADD   A,[0x86]           (1392) 	add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
1186: 7A 72    DEC   [0x72]             (1393) 	dec [72h]
1188: 3C 72 00 CMP   [0x72],0x0         (1394) 	cmp [72h],00h
118B: BF DA    JNZ   0x1166             (1395) 	jnz Com_rem_sec
118D: 80 07    JMP   0x1195             (1396) 	jmp add_tonext_sec
                                        (1397) 
                                        (1398) find_q1_sec:
118F: 12 62    SUB   A,[0x62]           (1399) 	sub A,[input_count]
1191: 76 11    INC   [0x11]             (1400) 	inc [quotient_val]
1193: 8F E1    JMP   0x1175             (1401) 	jmp compute_rem_sec
                                        (1402) 	
                                        (1403) add_tonext_sec:
1195: 62 D0 06 MOV   REG[0xD0],0x6      (1404) 	mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
1198: 5F D3 91 MOV   [0xD3],[0x91]      (1405) 	mov [D3h], [91h]
119B: 62 D0 00 MOV   REG[0xD0],0x0      (1406) 	mov reg[CUR_PP], 00h
119E: 55 ED D3 MOV   [0xED],0xD3        (1407) 	mov [EDh], D3h		;initialize MVI read pointer to 10h
11A1: 3E ED    MVI   A,[0xED]           (1408) 	mvi A, [EDh]		;read the value in 92h into A
11A3: 02 86    ADD   A,[0x86]           (1409) 	add A,[86h]
11A5: 55 11 00 MOV   [0x11],0x0         (1410) 	mov [quotient_val],00h
                                        (1411) 	
                                        (1412) compute_avg_sec1:
11A8: 3A 62    CMP   A,[0x62]           (1413) 	cmp A,[input_count]
11AA: D0 0B    JNC   0x11B6             (1414) 	jnc find_q_sec
11AC: 53 85    MOV   [0x85],A           (1415) 	mov [85h],A					;85h holds the remainder
11AE: 51 11    MOV   A,[0x11]           (1416) 	mov A,[quotient_val]
11B0: 02 61    ADD   A,[0x61]           (1417) 	add A,[61h]
11B2: 3F 77    MVI   [0x77],A           (1418) 	mvi [result_avg],A					;register 81h holds the quotient
11B4: 80 07    JMP   0x11BC             (1419) 	jmp compute_avg_end
                                        (1420) 
                                        (1421) find_q_sec:
11B6: 12 62    SUB   A,[0x62]           (1422) 	sub A,[input_count]
11B8: 76 11    INC   [0x11]             (1423) 	inc [quotient_val]
11BA: 8F ED    JMP   0x11A8             (1424) 	jmp compute_avg_sec1
                                        (1425) 	
                                        (1426) compute_avg_end:
11BC: 55 64 B3 MOV   [0x64],0xB3        (1427) 	mov [counting_adds],B3h
11BF: 51 85    MOV   A,[0x85]           (1428) 	mov A,[85h]
11C1: 3F 64    MVI   [0x64],A           (1429) 	mvi [counting_adds],A
                                        (1430) 	
11C3: 55 A7 B0 MOV   [0xA7],0xB0        (1431) 	mov [counter_input],B0h
11C6: 3E A7    MVI   A,[0xA7]           (1432) 	mvi A,[counter_input]
11C8: 53 C0    MOV   [0xC0],A           (1433) 	mov [C0h],A
11CA: 3E A7    MVI   A,[0xA7]           (1434) 	mvi A,[counter_input]
11CC: 53 C1    MOV   [0xC1],A           (1435) 	mov [C1h],A
11CE: 3E A7    MVI   A,[0xA7]           (1436) 	mvi A,[counter_input]
11D0: 53 C2    MOV   [0xC2],A           (1437) 	mov [C2h],A
11D2: 3E A7    MVI   A,[0xA7]           (1438) 	mvi A,[counter_input]
11D4: 53 C3    MOV   [0xC3],A           (1439) 	mov [C3h],A
                                        (1440) 	
                                        (1441) 	;Display
                                        (1442) 	;lcall   LCD_Start       ; Initialize LCD
11D6: 50 00    MOV   A,0x0              (1443) 	mov    A,00h           ; Set cursor position at row = 0
11D8: 57 00    MOV   X,0x0              (1444)    	mov    X,00h           ; col = 5
11DA: 7C 07 1D LCALL _LCD_Position      (1445)    	lcall   LCD_Position
11DD: 50 14    MOV   A,0x14             (1446)    	mov    A, >STRING3     	; Higher byte
11DF: 57 20    MOV   X,0x20             (1447)    	mov	   X, <STRING3
11E1: 7C 05 98 LCALL _LCD_PrCString     (1448)     lcall  LCD_PrCString   
                                        (1449) 
11E4: 50 01    MOV   A,0x1              (1450) 	mov    A,01h           ; Set cursor position at row = 0
11E6: 57 00    MOV   X,0x0              (1451)    	mov    X,00h           ; col = 5
11E8: 7C 07 1D LCALL _LCD_Position      (1452)    	lcall   LCD_Position
11EB: 51 C0    MOV   A,[0xC0]           (1453)    	mov    A,[C0h]      	; Higher byte
11ED: 7C 05 BA LCALL _LCD_PrHexByte     (1454)     lcall   LCD_PrHexByte     
                                        (1455) 	
11F0: 50 01    MOV   A,0x1              (1456) 	mov    A,01h           ; Set cursor position at row = 0
11F2: 57 02    MOV   X,0x2              (1457)    	mov    X,02h           ; col = 5
11F4: 7C 07 1D LCALL _LCD_Position      (1458)    	lcall   LCD_Position
11F7: 50 14    MOV   A,0x14             (1459)    	mov    A, >THE_STRING20     	; Higher byte
11F9: 57 1C    MOV   X,0x1C             (1460)    	mov	   X, <THE_STRING20
11FB: 7C 05 98 LCALL _LCD_PrCString     (1461)     lcall  LCD_PrCString          
                                        (1462) 	
11FE: 50 01    MOV   A,0x1              (1463)   	mov    A,01h           ; Set cursor position at row = 0
1200: 57 03    MOV   X,0x3              (1464)    	mov    X,03h           ; col = 5
1202: 7C 07 1D LCALL _LCD_Position      (1465)    	lcall   LCD_Position
1205: 51 C1    MOV   A,[0xC1]           (1466)    	mov    A,[C1h]      	; Lower byte
1207: 7C 05 BA LCALL _LCD_PrHexByte     (1467)    	lcall   LCD_PrHexByte  
                                        (1468) 	
120A: 50 01    MOV   A,0x1              (1469) 	mov    A,01h           ; Set cursor position at row = 0
120C: 57 05    MOV   X,0x5              (1470)    	mov    X,05h           ; col = 5
120E: 7C 07 1D LCALL _LCD_Position      (1471)    	lcall   LCD_Position
1211: 50 14    MOV   A,0x14             (1472)    	mov    A, >THE_STRING20     	; Higher byte
1213: 57 1C    MOV   X,0x1C             (1473) 	mov	   X, <THE_STRING20
1215: 7C 05 98 LCALL _LCD_PrCString     (1474)     lcall   LCD_PrCString          
                                        (1475) 	
1218: 50 01    MOV   A,0x1              (1476) 	mov    A,01h           ; Set cursor position at row = 0
121A: 57 06    MOV   X,0x6              (1477)    	mov    X,06h           ; col = 5
121C: 7C 07 1D LCALL _LCD_Position      (1478)    	lcall   LCD_Position
121F: 51 C2    MOV   A,[0xC2]           (1479)    	mov    A,[C2h]      	; Load pointer to ROM string
1221: 7C 05 BA LCALL _LCD_PrHexByte     (1480)    	lcall   LCD_PrHexByte   
                                        (1481) 	
1224: 50 01    MOV   A,0x1              (1482) 	mov    A,01h           ; Set cursor position at row = 0
1226: 57 08    MOV   X,0x8              (1483)    	mov    X,08h           ; col = 5
1228: 7C 07 1D LCALL _LCD_Position      (1484)    	lcall   LCD_Position
122B: 50 14    MOV   A,0x14             (1485)    	mov    A, >THE_STRING21      	; Higher byte
122D: 57 1E    MOV   X,0x1E             (1486) 	mov	   X, <THE_STRING21
122F: 7C 05 98 LCALL _LCD_PrCString     (1487)     lcall   LCD_PrCString          
                                        (1488) 	
1232: 50 01    MOV   A,0x1              (1489) 	mov    A,01h           ; Set cursor position at row = 0
1234: 57 09    MOV   X,0x9              (1490)    	mov    X,09h           ; col = 5
1236: 7C 07 1D LCALL _LCD_Position      (1491)    	lcall   LCD_Position
1239: 51 C3    MOV   A,[0xC3]           (1492)    	mov    A,[C3h]      	; Load pointer to ROM string
123B: 7C 05 BA LCALL _LCD_PrHexByte     (1493)    	lcall   LCD_PrHexByte  
                                        (1494) end123:
123E: 7D 12 3E LJMP  0x123E             (1495) ljmp end123
                                        (1496) 	
                                        (1497) end_memory_mode:
1241: 3C 18 04 CMP   [0x18],0x4         (1498) 	cmp [addr_shrt_p], 04h
1244: 55 18 00 MOV   [0x18],0x0         (1499) 	mov [addr_shrt_p], 00h
1247: 7D 09 F2 LJMP  0x09F2             (1500) 	ljmp loop
                                        (1501) 
                                        (1502) 
                                        (1503) ;---------------------END MEMORY MODE----------------------------------------
                                        (1504) 	
                                        (1505) .terminate:
124A: 7D 12 4A LJMP  0x124A             (1506)     ljmp .terminate
                                        (1507) 	
                                        (1508) ;---------------------END OF MAIN CODE----------------------------------------
                                        (1509) ;-----------------------------------------------------------------------------
                                        (1510) 
                                        (1511) divide_32_routine:	
124D: 10       PUSH  X                  (1512) 	push X ; preserve the X register if necessary 
124E: 50 00    MOV   A,0x0              (1513) 	mov A, >dRes ; push the address of result variable 
1250: 08       PUSH  A                  (1514) 	push A 
1251: 50 32    MOV   A,0x32             (1515) 	mov A, <dRes 
1253: 08       PUSH  A                  (1516) 	push A 
1254: 51 2A    MOV   A,[0x2A]           (1517) 	mov A, [dOpr2+0] ; push the second parameter dOpr2 
1256: 08       PUSH  A                  (1518) 	push A 
1257: 51 2B    MOV   A,[0x2B]           (1519) 	mov A, [dOpr2+1] 
1259: 08       PUSH  A                  (1520) 	push A 
125A: 51 2C    MOV   A,[0x2C]           (1521) 	mov A, [dOpr2+2] 
125C: 08       PUSH  A                  (1522) 	push A 
125D: 51 2D    MOV   A,[0x2D]           (1523) 	mov A, [dOpr2+3] 
125F: 08       PUSH  A                  (1524) 	push A 
1260: 51 2E    MOV   A,[0x2E]           (1525) 	mov A, [dOpr1+0] ; push the first parameter dOpr1 
1262: 08       PUSH  A                  (1526) 	push A 
1263: 51 2F    MOV   A,[0x2F]           (1527) 	mov A, [dOpr1+1] 
1265: 08       PUSH  A                  (1528) 	push A 
1266: 51 30    MOV   A,[0x30]           (1529) 	mov A, [dOpr1+2] 
1268: 08       PUSH  A                  (1530) 	push A 
1269: 51 31    MOV   A,[0x31]           (1531) 	mov A, [dOpr1+3] 
126B: 08       PUSH  A                  (1532) 	push A 
126C: 7C 14 7A LCALL 0x147A             (1533) 	lcall divu_32x32_32 ; do the application 
126F: 38 F6    ADD   SP,0xF6            (1534) 	add SP, 246 ; pop the stack 
1271: 20       POP   X                  (1535) 	pop X ; restore the X register if necessary
1272: 7F       RET                      (1536) ret	
                                        (1537) 
                                        (1538) 
                                        (1539) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (1540) ;alex charan
                                        (1541) Sound_mode_generic_timer:
                                        (1542) ;check_run_timer:
                                        (1543) 
                                        (1544) 	;lcall Display_Time_LCD
                                        (1545) 	;ljmp loop
                                        (1546) 
1273: 3C 19 01 CMP   [0x19],0x1         (1547) 		cmp [addr_acc_mode],sec_mode
1276: A0 24    JZ    0x129B             (1548) 		jz Sound_label_sec_mode
                                        (1549) 
1278: 3C 19 02 CMP   [0x19],0x2         (1550) 		cmp [addr_acc_mode],halfsec_mode
127B: A0 07    JZ    0x1283             (1551) 		jz Sound_label_halfsec_mode
                                        (1552) 
                                        (1553) 	Sound_label_tenthsec_mode:
                                        (1554) 		;mov [addr_inc_ms], [addr_internal_inc_ms]
127D: 5F 0E 0B MOV   [0xE],[0xB]        (1555) 		mov [addr_inc_ms], [addr_timer_inc_ms]
1280: 7D 12 A4 LJMP  0x12A4             (1556) 		ljmp Sound_check_ms
                                        (1557) 
                                        (1558) 	Sound_label_halfsec_mode: 
                                        (1559) ;		mov A, [addr_internal_inc_ms]
1283: 51 0B    MOV   A,[0xB]            (1560) 		mov A, [addr_timer_inc_ms]
1285: 5C       MOV   X,A                (1561) 		mov X, A
1286: 39 32    CMP   A,0x32             (1562) 		cmp A, 32h
1288: B0 07    JNZ   0x1290             (1563) 		jnz Sound_check_if_00
                                        (1564) ;		mov [addr_inc_ms], [addr_internal_inc_ms]
128A: 5F 0E 0B MOV   [0xE],[0xB]        (1565) 		mov [addr_inc_ms], [addr_timer_inc_ms]
128D: 7D 12 A4 LJMP  0x12A4             (1566) 		ljmp Sound_check_ms
                                        (1567) 	Sound_check_if_00:
1290: 5B       MOV   A,X                (1568) 		mov A, X
1291: 39 00    CMP   A,0x0              (1569) 		cmp A, 00h
1293: B0 10    JNZ   0x12A4             (1570) 		jnz Sound_check_ms
                                        (1571) ;		mov [addr_inc_ms], [addr_internal_inc_ms]
1295: 5F 0E 0B MOV   [0xE],[0xB]        (1572) 		mov [addr_inc_ms], [addr_timer_inc_ms]
1298: 7D 12 A4 LJMP  0x12A4             (1573) 		ljmp Sound_check_ms
                                        (1574) 		
                                        (1575) 	Sound_label_sec_mode: 
                                        (1576) ;		mov A, [addr_internal_inc_ms]					;copy over because you need to compare
129B: 51 0B    MOV   A,[0xB]            (1577) 		mov A, [addr_timer_inc_ms]
129D: 39 00    CMP   A,0x0              (1578) 		cmp A, 00h
129F: B0 04    JNZ   0x12A4             (1579) 		jnz Sound_check_ms									;keep display value as is
                                        (1580) 		;if it is 00 
                                        (1581) ;		mov [addr_inc_ms], [addr_internal_inc_ms]		;update value to be displayed
12A1: 5F 0E 0B MOV   [0xE],[0xB]        (1582) 		mov [addr_inc_ms], [addr_timer_inc_ms]
                                        (1583) 		;ljmp Sound_check_ms
                                        (1584) 		
                                        (1585) 
                                        (1586) 	Sound_check_ms:
                                        (1587) ;		mov A, [addr_internal_inc_ms] 	;
12A4: 51 0B    MOV   A,[0xB]            (1588) 		mov A, [addr_timer_inc_ms] 	;
12A6: 39 64    CMP   A,0x64             (1589) 		cmp A, 64h 		;compare to 100
12A8: B0 06    JNZ   0x12AF             (1590) 		jnz Sound_display_ms
                                        (1591) 		
                                        (1592) 	Sound_reset_ms:
                                        (1593) ;		mov [addr_internal_inc_ms], 00h
12AA: 55 0B 00 MOV   [0xB],0x0          (1594) 		mov [addr_timer_inc_ms], 00h
12AD: 76 0F    INC   [0xF]              (1595) 		inc [addr_inc_s]		;increment seconds
                                        (1596) 		
                                        (1597) 	Sound_display_ms:
12AF: 50 00    MOV   A,0x0              (1598) 		mov A, 00h
12B1: 57 09    MOV   X,0x9              (1599) 		mov X, 09h
12B3: 7C 07 1D LCALL _LCD_Position      (1600) 		lcall LCD_Position
12B6: 51 0E    MOV   A,[0xE]            (1601) 		mov A, [addr_inc_ms]
12B8: 7C 05 BA LCALL _LCD_PrHexByte     (1602) 		lcall LCD_PrHexByte
                                        (1603) 		
                                        (1604) 	Sound_check_sec:	
12BB: 51 0F    MOV   A,[0xF]            (1605) 		mov A, [addr_inc_s]	;move [251] to A as to not mess up the actual number in [251] during compare
12BD: 39 3C    CMP   A,0x3C             (1606) 		cmp A, 3Ch		;compare with 60
                                        (1607) 						;need to check CF : if it's not set than [251] is larger than 60
12BF: B0 06    JNZ   0x12C6             (1608) 		jnz Sound_display_sec
                                        (1609) 
                                        (1610) 	Sound_reset_sec:
12C1: 55 0F 00 MOV   [0xF],0x0          (1611) 		mov [addr_inc_s],00h
12C4: 76 10    INC   [0x10]             (1612) 		inc [addr_inc_m]		;increment minutes
                                        (1613) 		
                                        (1614) 	Sound_display_sec:
12C6: 50 00    MOV   A,0x0              (1615) 	    mov A, 00h
12C8: 57 06    MOV   X,0x6              (1616) 		mov X, 06h
12CA: 7C 07 1D LCALL _LCD_Position      (1617) 		lcall LCD_Position
12CD: 51 0F    MOV   A,[0xF]            (1618) 		mov A, [addr_inc_s]
12CF: 7C 05 BA LCALL _LCD_PrHexByte     (1619) 		lcall LCD_PrHexByte
                                        (1620) 		
                                        (1621) 		
                                        (1622) 	Sound_check_min:
12D2: 51 10    MOV   A,[0x10]           (1623) 		mov A, [addr_inc_m]	;move [251] to A as to not mess up the actual number in [251] during compare
12D4: 39 3C    CMP   A,0x3C             (1624) 		cmp A, 3Ch		;compare with 60
                                        (1625) 						;need to check CF : if it's not set than [251] is larger than 60
12D6: B0 06    JNZ   0x12DD             (1626) 		jnz Sound_display_min
                                        (1627) 
                                        (1628) 	Sound_reset_min:
12D8: 55 0F 00 MOV   [0xF],0x0          (1629) 		mov [addr_inc_s],00h
12DB: 76 11    INC   [0x11]             (1630) 		inc [addr_inc_h]
                                        (1631) 
                                        (1632) 	Sound_display_min:
12DD: 50 00    MOV   A,0x0              (1633) 	    mov A, 00h
12DF: 57 03    MOV   X,0x3              (1634) 		mov X, 03h
12E1: 7C 07 1D LCALL _LCD_Position      (1635) 		lcall LCD_Position
12E4: 51 10    MOV   A,[0x10]           (1636) 		mov A, [addr_inc_m]
12E6: 7C 05 BA LCALL _LCD_PrHexByte     (1637) 		lcall LCD_PrHexByte
                                        (1638) 		
                                        (1639) 	Sound_check_hour:
12E9: 51 11    MOV   A,[0x11]           (1640) 		mov A, [addr_inc_h]
12EB: 39 18    CMP   A,0x18             (1641) 		cmp A, 18h		;compare with 24
12ED: B0 04    JNZ   0x12F2             (1642) 		jnz Sound_display_hour
                                        (1643) 		
                                        (1644) 	Sound_reset_hour:
12EF: 55 11 00 MOV   [0x11],0x0         (1645) 		mov [addr_inc_h], 00h
                                        (1646) 		
                                        (1647) 	Sound_display_hour:
12F2: 50 00    MOV   A,0x0              (1648) 		mov A, 00h
12F4: 57 00    MOV   X,0x0              (1649) 		mov X, 00h
12F6: 7C 07 1D LCALL _LCD_Position      (1650) 		lcall LCD_Position
12F9: 51 11    MOV   A,[0x11]           (1651) 		mov A, [addr_inc_h]
12FB: 7C 05 BA LCALL _LCD_PrHexByte     (1652) 		lcall LCD_PrHexByte
12FE: 7F       RET                      (1653) ret
                                        (1654) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (1655) ;
                                        (1656) ;
                                        (1657) 
                                        (1658) ;-----------------------------------------------------------------------------
                                        (1659) ;---------------------ROUTINE lcallS-------------------------------------------
                                        (1660) 
                                        (1661) 
                                        (1662) ;---------------------END OF ROUTINE lcallS------------------------------------
                                        (1663) ;-----------------------------------------------------------------------------
                                        (1664) 
                                        (1665) 
                                        (1666) 
                                        (1667) .LITERAL 
                                        (1668) THE_STRNG:
                                        (1669) ds "EvryTng is Awsme"
                                        (1670) db 00h
                                        (1671) .ENDLITERAL 
                                        (1672) 
                                        (1673) .LITERAL 
                                        (1674) TENTHSEC_MODE:
                                        (1675) ds "ACC: TENTH      "
                                        (1676) db 00h
                                        (1677) .ENDLITERAL 
                                        (1678) 
                                        (1679) .LITERAL 
                                        (1680) HALFSEC_MODE:
                                        (1681) ds "ACC: HALF     "
                                        (1682) db 00h
                                        (1683) .ENDLITERAL 
                                        (1684) 
                                        (1685) .LITERAL 
                                        (1686) SEC_MODE:
                                        (1687) ds "ACC: SEC       "
                                        (1688) db 00h
                                        (1689) .ENDLITERAL 
                                        (1690) 
                                        (1691) .LITERAL 
                                        (1692) ACCURACY_MODE:
                                        (1693) ds "ACCURACY MODE "
                                        (1694) db 00h
                                        (1695) .ENDLITERAL
                                        (1696) 
                                        (1697) .LITERAL 
                                        (1698) BUTTON_MODE:
                                        (1699) ds "BUTTON MODE    "
                                        (1700) db 00h
                                        (1701) .ENDLITERAL
                                        (1702) 
                                        (1703) .LITERAL 
                                        (1704) DEBUG_MODE:
                                        (1705) ds "DEBUG MODE      "
                                        (1706) db 00h
                                        (1707) .ENDLITERAL
                                        (1708) 
                                        (1709) .LITERAL 
                                        (1710) CLEAR_TIME:
                                        (1711) ds "00:00:00:00     "
                                        (1712) db 00h
                                        (1713) .ENDLITERAL
                                        (1714) 
                                        (1715) 
                                        (1716) .LITERAL 
                                        (1717) MEMORY_MODE:
                                        (1718) ds "MEMORY MODE     "
                                        (1719) db 00h
                                        (1720) .ENDLITERAL
                                        (1721) 
                                        (1722) .LITERAL 
                                        (1723) THRESHOLD_MODE:
                                        (1724) ds "THRESHOLD MODE  "
                                        (1725) db 00h
                                        (1726) .ENDLITERAL
                                        (1727) 
                                        (1728) 
                                        (1729) .LITERAL 
                                        (1730) CALC_THRESH_MODE:
                                        (1731) ds "CALC THRESH:    "
                                        (1732) db 00h
                                        (1733) .ENDLITERAL
                                        (1734) 
                                        (1735) .LITERAL 
                                        (1736) WHISTLE_MODE:
                                        (1737) ds "WHISTLE:        "
                                        (1738) db 00h
                                        (1739) .ENDLITERAL
                                        (1740) 
                                        (1741) .LITERAL 
                                        (1742) SOUND_MODE:
                                        (1743) ds "SOUND MODE      "
                                        (1744) db 00h
                                        (1745) .ENDLITERAL
                                        (1746) 
                                        (1747) .LITERAL 
                                        (1748) SOUND_TIMER:
                                        (1749) ds "START S TIMER   "
                                        (1750) db 00h
                                        (1751) .ENDLITERAL
                                        (1752) 
                                        (1753) .LITERAL 
                                        (1754) STOP_SOUND_TIMER:
                                        (1755) ds "STOP S TIMER    "
                                        (1756) db 00h
                                        (1757) .ENDLITERAL
                                        (1758) 
                                        (1759) .LITERAL 
                                        (1760) CLEAN_LCD:
                                        (1761) ds "                "
                                        (1762) db 00h
                                        (1763) .ENDLITERAL
                                        (1764) 
                                        (1765) 
                                        (1766) .LITERAL 
                                        (1767) SAVE:
                                        (1768) ds "SAVE"
                                        (1769) db 00h
                                        (1770) .ENDLITERAL 
                                        (1771) 
                                        (1772) .LITERAL 
                                        (1773) THREE_SPACE:
                                        (1774) ds "   "
                                        (1775) db 00h
                                        (1776) .ENDLITERAL 
                                        (1777) 
                                        (1778) .LITERAL 
                                        (1779) NINE_SPACE:
                                        (1780) ds "         "
                                        (1781) db 00h
                                        (1782) .ENDLITERAL 
                                        (1783) 
                                        (1784) .LITERAL 
                                        (1785) THE_STRING20:
                                        (1786) ds ":"
                                        (1787) db 00h
                                        (1788) .ENDLITERAL 
                                        (1789) 
                                        (1790) .LITERAL 
                                        (1791) THE_STRING21:
                                        (1792) ds "."
                                        (1793) db 00h
                                        (1794) .ENDLITERAL 
                                        (1795) 
                                        (1796) .LITERAL 
                                        (1797) STRING3:
                                        (1798) ds "AVERAGE"
                                        (1799) db 00h
                                        (1800) .ENDLITERAL 
                                        (1801) 
                                        (1802) .LITERAL 
                                        (1803) MINIMUM:
                                        (1804) ds "MINIMUM         "
                                        (1805) db 00h
                                        (1806) .ENDLITERAL 
                                        (1807) 
                                        (1808) .LITERAL 
                                        (1809) MAXIMUM:
                                        (1810) ds "MAXIMUM          "
                                        (1811) db 00h
                                        (1812) .ENDLITERAL 
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) include "program_defines.inc"
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059)     	;M8C_DisableGInt
144B: 08       PUSH  A                  (0060) 	push A
144C: 10       PUSH  X                  (0061)     push X
                                        (0062) 
144D: 76 3B    INC   [0x3B]             (0063) 	inc [debug_register]
                                        (0064) 	
                                        (0065) 
                                        (0066) 
                                        (0067) 	
144F: 5D 08    MOV   A,REG[0x8]         (0068) 	mov A,reg[PRT2DR]  ; detect falling edge or rising edge
1451: 21 80    AND   A,0x80             (0069) 	and A,80h
1453: A0 06    JZ    0x145A             (0070) 	jz falling
                                        (0071) 	
                                        (0072) 	rising:
                                        (0073) 	;mov [addr_internal_inc_ms],00h
1455: 55 0C 00 MOV   [0xC],0x0          (0074) 	mov [addr_pin_inc_ms],00h
1458: 80 1D    JMP   0x1476             (0075) 	jmp finished
                                        (0076) 	
                                        (0077) 	falling:
                                        (0078) ;	mov A,[addr_internal_inc_ms]
                                        (0079) ;	mov X,[addr_internal_inc_ms]
145A: 51 0C    MOV   A,[0xC]            (0080) 	mov A,[addr_pin_inc_ms]
145C: 58 0C    MOV   X,[0xC]            (0081) 	mov X,[addr_pin_inc_ms]
                                        (0082) 	
145E: 11 01    SUB   A,0x1              (0083) 	sub A,01h     ; noise smaller than 0.1s
1460: D0 03    JNC   0x1464             (0084) 	jnc shrt_prs         ; not switch noise
1462: 80 13    JMP   0x1476             (0085) 	jmp finished
                                        (0086) 	
                                        (0087) 	shrt_prs:
1464: 5B       MOV   A,X                (0088) 	mov A,X     ; noise smaller than 0.1s
1465: 11 1E    SUB   A,0x1E             (0089) 	sub A, 1Eh
1467: D0 08    JNC   0x1470             (0090) 	jnc lng_prs
1469: 55 17 00 MOV   [0x17],0x0         (0091) 	mov [addr_lng_p], 00h
146C: 76 18    INC   [0x18]             (0092) 	inc [addr_shrt_p]
146E: 80 07    JMP   0x1476             (0093) 	jmp finished
                                        (0094) 	
                                        (0095) 	lng_prs:
1470: 55 17 01 MOV   [0x17],0x1         (0096) 	mov [addr_lng_p],01h
1473: 55 18 00 MOV   [0x18],0x0         (0097) 	mov [addr_shrt_p],00h
                                        (0098) 	 
                                        (0099)     finished:
                                        (0100)    	;M8C_EnableGInt;alex1:42PM
1476: 20       POP   X                  (0101) 	pop X
1477: 18       POP   A                  (0102)     pop A
1478: 7E       RETI                     (0103)     reti
                                        (0104)    ;---------------------------------------------------
                                        (0105)    ; Insert your custom code above this banner
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0108) 
1479: 7E       RETI                     (0109)    reti
                                        (0110) 
                                        (0111) 
                                        (0112) ; end of file PSoCGPIOINT.asm
