FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  VERSION:    4.18
                                        (0007) ;  DATE:       28 June 2007
                                        (0008) ;
                                        (0009) ;  DESCRIPTION:
                                        (0010) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0011) ;
                                        (0012) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
                                        (0013) ;
                                        (0014) ; NOTES:
                                        (0015) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0016) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0017) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0018) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0019) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0020) ; are not accidentally modified.
                                        (0021) ;
                                        (0022) ;=============================================================================
                                        (0023) 
                                        (0024) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0025) include "m8c.inc"			;Part specific file
                                        (0026) include "m8ssc.inc"			;Part specific file
                                        (0027) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0028) 
                                        (0029) ;--------------------------------------
                                        (0030) ; Export Declarations
                                        (0031) ;--------------------------------------
                                        (0032) 
                                        (0033) export __Start
                                        (0034) IF	(TOOLCHAIN & HITECH)
                                        (0035) ELSE
                                        (0036) export __bss_start
                                        (0037) export __data_start
                                        (0038) export __idata_start
                                        (0039) export __func_lit_start
                                        (0040) export __text_start
                                        (0041) ENDIF
                                        (0042) export  _bGetPowerSetting
                                        (0043) export   bGetPowerSetting
                                        (0044) 
                                        (0045) 
                                        (0046) ;--------------------------------------
                                        (0047) ; Optimization flags
                                        (0048) ;--------------------------------------
                                        (0049) ;
                                        (0050) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0051) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0052) ; this file.
                                        (0053) 
                                        (0054) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0055) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0056) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0057) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0058) ;
                                        (0059) IF	(TOOLCHAIN & HITECH)
                                        (0060) ; The C compiler will customize the startup code - it's not required here
                                        (0061) 
                                        (0062) C_LANGUAGE_SUPPORT:              equ 0
                                        (0063) ELSE
                                        (0064) C_LANGUAGE_SUPPORT:              equ 1
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) 
                                        (0068) ; The following equate is required for proper operation. Reseting its value
                                        (0069) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0070) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0071) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0072) ; the requirements of starting the ECO and PLL lock mode.
                                        (0073) ;
                                        (0074) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0075) ;                invoking main
                                        (0076) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0077) ;               the time code in main starts executing.
                                        (0078) ;
                                        (0079) WAIT_FOR_32K:                    equ 1
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 67    JMP   0x0068             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117) 
                                        (0118)     org   04h                      ;Supply Monitor Interrupt Vector
0004: 30       HALT                     (0119)     halt                           ;Stop execution if power falls too low
                                        (0120) 
                                        (0121)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0122)     // call	void_handler
0008: 7E       RETI                     (0123)     reti
                                        (0124) 
                                        (0125)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0126)     // call	void_handler
000C: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0130)     // call	void_handler
0010: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0134)     // call	void_handler
0014: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   18h                      ;VC3 Interrupt Vector
                                        (0138)     // call	void_handler
0018: 7E       RETI                     (0139)     reti
                                        (0140) 
                                        (0141)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 10 A4 LJMP  PSoC_GPIO_ISR      (0142)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0146)     // call	void_handler
0020: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 1E LJMP  _Timer16_1_ISR     (0150)     ljmp	_Timer16_1_ISR
0027: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0154)     // call	void_handler
0028: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0158)     // call	void_handler
002C: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0162)     // call	void_handler
0030: 7E       RETI                     (0163)     reti
                                        (0164) 
                                        (0165)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0166)     // call	void_handler
0034: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0170)     // call	void_handler
0038: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0174)     // call	void_handler
003C: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 07 57 LJMP  _DUALADC_1_CNT1_ISR(0178)     ljmp	_DUALADC_1_CNT1_ISR
0043: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0182)     // call	void_handler
0044: 7E       RETI                     (0183)     reti
                                        (0184) 
                                        (0185)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 07 5D LJMP  _DUALADC_1_PWM16_ISR(0186)     ljmp	_DUALADC_1_PWM16_ISR
004B: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 07 5A LJMP  _DUALADC_1_CNT2_ISR(0190)     ljmp	_DUALADC_1_CNT2_ISR
004F: 7E       RETI                     (0191)     reti
                                        (0192) 
                                        (0193)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0194)     // call	void_handler
0050: 7E       RETI                     (0195)     reti
                                        (0196) 
                                        (0197)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0198)     // call	void_handler
0054: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0202)     // call	void_handler
0058: 7E       RETI                     (0203)     reti
                                        (0204) 
                                        (0205)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0206)     // call	void_handler
005C: 7E       RETI                     (0207)     reti
                                        (0208) 
                                        (0209)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0210)     // call	void_handler
0060: 7E       RETI                     (0211)     reti
                                        (0212) 
                                        (0213)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0214)     // call	void_handler
0064: 7E       RETI                     (0215)     reti
0068: 71 10    OR    F,0x10             
                                        (0216) 
                                        (0217) ;-----------------------------------------------------------------------------
                                        (0218) ;  Start of Execution.
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0221) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0222) ;
                                        (0223) 
                                        (0224) IF	(TOOLCHAIN & HITECH)
                                        (0225)  	AREA PD_startup(CODE, REL, CON)
                                        (0226) ELSE
                                        (0227)     org 68h
                                        (0228) ENDIF
                                        (0229) __Start:
                                        (0230) 
                                        (0231)     ; initialize SMP values for voltage stabilization, if required,
                                        (0232)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0233)     ; least for now. 
                                        (0234)     ;
                                        (0235)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0236)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0237)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0238)     M8C_SetBank0
                                        (0239) 
                                        (0240)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0241)     mov   A, 20h
0074: 28       ROMX                     (0242)     romx
0075: 50 40    MOV   A,0x40             (0243)     mov   A, 40h
0077: 28       ROMX                     (0244)     romx
0078: 50 60    MOV   A,0x60             (0245)     mov   A, 60h
007A: 28       ROMX                     (0246)     romx
                                        (0247)     ; %45%20%46%46% End workaround
                                        (0248) 
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
                                        (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) 
                                        (0273) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0274)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0275)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0276)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0277)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0278)   IF ( AGND_BYPASS )
                                        (0279)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0280)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0281)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0282)     ; value using the proper trim values.
                                        (0283)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0284)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0285)   ENDIF
                                        (0286)  ENDIF
                                        (0287) ENDIF ; 5.0 V Operation
                                        (0288) 
                                        (0289) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0290)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0291)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0292)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0293)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0294)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 3.3 Volt Operation
                                        (0297) 
0081: 55 F8 00 MOV   [0xF8],0x0         (0298)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [0xF9],0x0         (0299)     mov  [bSSC_KEYSP], 0
0087: 71 10    OR    F,0x10             
                                        (0300) 
                                        (0301)     ;---------------------------------------
                                        (0302)     ; Initialize Crystal Oscillator and PLL
                                        (0303)     ;---------------------------------------
                                        (0304) 
                                        (0305) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0306)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0307)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0308)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0309)     ; the ECO to stabilize.
                                        (0310)     ;
                                        (0311)     M8C_SetBank1
                                        (0312)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0313)     M8C_SetBank0
                                        (0314)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0315)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0316)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0317) .WaitFor1s:
                                        (0318)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0319)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0320)                                           ;   since interrupts are not globally enabled
                                        (0321) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0322)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0323)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0324)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             
008E: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0325)     M8C_SetBank0
                                        (0326)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0327) 
                                        (0328) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0329) 
                                        (0330) IF ( PLL_MODE )
                                        (0331)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0332)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0333)     ;
                                        (0334)     M8C_SetBank1
                                        (0335)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0336)     M8C_SetBank0
                                        (0337)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0338)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0339) 
                                        (0340) .WaitFor16ms:
                                        (0341)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0342)     jz   .WaitFor16ms
                                        (0343)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0345)     M8C_SetBank0
                                        (0346) 
                                        (0347) IF      ( WAIT_FOR_32K )
                                        (0348) ELSE ; !( WAIT_FOR_32K )
                                        (0349)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0350)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0351) ENDIF ;(WAIT_FOR_32K)
                                        (0352) ENDIF ;(PLL_MODE)
                                        (0353) 
                                        (0354)     ;------------------------
                                        (0355)     ; Close CT leakage path.
                                        (0356)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0357)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0358)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0359)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0360)     mov   reg[ACB03CR0], 05h
009D: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0361) 
                                        (0362) 
                                        (0363) IF	(TOOLCHAIN & HITECH)
                                        (0364)     ;---------------------------------------------
                                        (0365)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0366)     ;---------------------------------------------
                                        (0367) 	global		__Lstackps
                                        (0368) 	mov     a,low __Lstackps
                                        (0369) 	swap    a,sp
                                        (0370) 
                                        (0371) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0372)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0373)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0374)     RAM_SETPAGE_CUR 0
                                        (0375)     RAM_SETPAGE_MVW 0
                                        (0376)     RAM_SETPAGE_MVR 0
                                        (0377)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0378)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0379)     ELSE
                                        (0380)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0381)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0382) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0383) ELSE
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0388)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0389)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0390)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      
00A6: 62 D0 00 MOV   REG[0xD0],0x0      
00A9: 62 D5 00 MOV   REG[0xD5],0x0      
00AC: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0391)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0392)     RAM_SETPAGE_CUR 0
                                        (0393)     RAM_SETPAGE_MVW 0
                                        (0394)     RAM_SETPAGE_MVR 0
                                        (0395) 
                                        (0396)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0397)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0398)   ELSE
                                        (0399)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0400)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0401) ELSE
                                        (0402)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0403)     swap  SP, A
                                        (0404) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0405) ENDIF ;	TOOLCHAIN
                                        (0406) 
                                        (0407)     ;-------------------------
                                        (0408)     ; Load Base Configuration
                                        (0409)     ;-------------------------
                                        (0410)     ; Load global parameter settings and load the user modules in the
                                        (0411)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0412)     ; to minimize start up time; (2) We may still need to play with the
                                        (0413)     ; Sleep Timer.
                                        (0414)     ;
00B1: 7C 03 B3 LCALL 0x03B3             (0415)     lcall LoadConfigInit
                                        (0416) 
                                        (0417)     ;-----------------------------------
                                        (0418)     ; Initialize C Run-Time Environment
                                        (0419)     ;-----------------------------------
                                        (0420) IF ( C_LANGUAGE_SUPPORT )
                                        (0421) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0422)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0423)     mov  [__r0],<__bss_start
                                        (0424) BssLoop:
                                        (0425)     cmp  [__r0],<__bss_end
                                        (0426)     jz   BssDone
                                        (0427)     mvi  [__r0],A
                                        (0428)     jmp  BssLoop
                                        (0429) BssDone:
                                        (0430)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0431)     mov  X,<__idata_start
                                        (0432)     mov  [__r0],<__data_start
                                        (0433) IDataLoop:
                                        (0434)     cmp  [__r0],<__data_end
                                        (0435)     jz   C_RTE_Done
                                        (0436)     push A
                                        (0437)     romx
                                        (0438)     mvi  [__r0],A
                                        (0439)     pop  A
                                        (0440)     inc  X
                                        (0441)     adc  A,0
                                        (0442)     jmp  IDataLoop
                                        (0443) 
                                        (0444) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0445) 
                                        (0446) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0447)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0448)                                        ; to use the Virtual Register page.
                                        (0449) 
                                        (0450)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0451)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0452)     ; text segment and may have been relocated by the Code Compressor.
                                        (0453)     ;
00B7: 50 02    MOV   A,0x2              (0454)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 AC    MOV   X,0xAC             (0455)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0456)     push  A
00BC: 28       ROMX                     (0457)     romx                               ; get the MSB of xidata's address
00BD: 53 1E    MOV   [__r0],A           (0458)     mov   [__r0], A
00BF: 18       POP   A                  (0459)     pop   A
00C0: 75       INC   X                  (0460)     inc   X
00C1: 09 00    ADC   A,0x0              (0461)     adc   A, 0
00C3: 28       ROMX                     (0462)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0463)     swap  A, X
00C5: 51 1E    MOV   A,[__r0]           (0464)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0465)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0466)     jmp   .AccessStruct
                                        (0467) 
                                        (0468)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0469)     ; values of C variables. Each structure contains 3 member elements.
                                        (0470)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0471)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0472)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0473)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0474)     ; value in the second member element, an unsigned byte:
                                        (0475)     ; (1) If the value of the second element is non-zero, it represents
                                        (0476)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0477)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0478)     ; the bytes are copied to the block of RAM.
                                        (0479)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0480)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0481)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0482) 
                                        (0483) .AccessNextStructLoop:
00C9: 75       INC   X                  (0484)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0485)     adc   A, 0
00CC: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0486) .AccessStruct:                         ; Entry point for first block
                                        (0487)     ;
                                        (0488)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0489)     ;
                                        (0490)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0491)     push  A
00D0: 28       ROMX                     (0492)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0493)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0494)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0495)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0496)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0497)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0498)     adc   A, 0
00DA: 08       PUSH  A                  (0499)     push  A
00DB: 28       ROMX                     (0500)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 1E    MOV   [__r0],A           (0501)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0502)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0503)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0504)     adc   A, 0
00E2: 08       PUSH  A                  (0505)     push  A
00E3: 28       ROMX                     (0506)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0507)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 1D    MOV   [__r1],A           (0508)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0509)     pop   A                            ; restore pXIData to [A,X]
                                        (0510) 
                                        (0511) .CopyNextByteLoop:
                                        (0512)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0513)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0514)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0515)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0516)     ;
00E9: 75       INC   X                  (0517)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0518)     adc   A, 0
00EC: 08       PUSH  A                  (0519)     push  A
00ED: 28       ROMX                     (0520)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 1E    MVI   [__r0],A           (0521)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 1E FF TST   [__r0],0xFF        (0522)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0523)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0524)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0525)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0526)     mov   reg[ MVW_PP], A
                                        (0527) .CopyLoopTail:
00FA: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 1D    DEC   [__r1]             (0529)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0530)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0531)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0532) 
                                        (0533) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0534)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0535)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0536)     adc   A, 0
0105: 08       PUSH  A                  (0537)     push  A
0106: 28       ROMX                     (0538)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 1D    MOV   [__r1],A           (0539)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0540)     mov   A, 0                         ; Initialize source data
                                        (0541) 
                                        (0542) .ClearRAMBlockLoop:
                                        (0543)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0544)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0545)     ;
010B: 3F 1E    MVI   [__r0],A           (0546)     mvi   [__r0], A                    ; Clear a byte
010D: 47 1E FF TST   [__r0],0xFF        (0547)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0548)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0549)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0550)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0551)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0553) .ClearLoopTail:
0119: 7A 1D    DEC   [__r1]             (0554)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0555)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0556)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0557)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0558) 
                                        (0559) .C_RTE_WrapUp:
0120: 18       POP   A                  (0560)     pop   A                            ; balance stack
0121: 71 10    OR    F,0x10             
                                        (0561) 
                                        (0562) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0563) 
                                        (0564) C_RTE_Done:
                                        (0565) 
                                        (0566) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0567) 
                                        (0568)     ;-------------------------------
                                        (0569)     ; Voltage Stabilization for SMP
                                        (0570)     ;-------------------------------
                                        (0571) 
                                        (0572) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0573) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0574)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0575)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0576)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0577)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0578)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0579)     M8C_SetBank1
                                        (0580)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0581)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0582)     M8C_SetBank0
                                        (0583)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0584)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0585) .WaitFor2ms:
                                        (0586)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0587)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0588) ENDIF ; SMP is operational
                                        (0589) ENDIF ; 5.0V Operation
                                        (0590) 
                                        (0591)     ;-------------------------------
                                        (0592)     ; Set Power-On Reset (POR) Level
                                        (0593)     ;-------------------------------
                                        (0594) 
                                        (0595)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0596)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0597)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0598)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0599)     ;  lead to corruption of PSoC flash.
                                        (0600) 
                                        (0601)     M8C_SetBank1
                                        (0602) 
                                        (0603) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0604)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0605)  ELSE                                       ;    No, fast mode
                                        (0606)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0607)                                             ;       no, set midpoint POR in user code, if desired
                                        (0608)   ELSE ; 24HMz                              ;
0123: 43 E3 20 OR    REG[0xE3],0x20     (0609)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
0126: 70 EF    AND   F,0xEF             
                                        (0610)   ENDIF ; 24MHz
                                        (0611)  ENDIF ; Slow Mode
                                        (0612) ENDIF ; 5.0V Operation
                                        (0613) 
                                        (0614)     M8C_SetBank0
                                        (0615) 
                                        (0616)     ;----------------------------
                                        (0617)     ; Wrap up and invoke "main"
                                        (0618)     ;----------------------------
                                        (0619) 
                                        (0620)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0621)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0622)     ;
0128: 62 E0 00 MOV   REG[0xE0],0x0      (0623)     mov  reg[INT_MSK0],0
012B: 71 10    OR    F,0x10             
                                        (0624) 
                                        (0625)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0626)     ; And put decimator in full mode so it does not consume too much current.
                                        (0627)     ;
                                        (0628)     M8C_SetBank1
012D: 62 E0 03 MOV   REG[0xE0],0x3      (0629)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0130: 43 E7 80 OR    REG[0xE7],0x80     (0630)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0133: 70 EF    AND   F,0xEF             
                                        (0631)     M8C_SetBank0
                                        (0632) 
                                        (0633)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0634)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0635)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0636)     ;
0135: 62 E2 00 MOV   REG[0xE2],0x0      (0637)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0638)                                    ; have been set during the boot process.
                                        (0639) IF	(TOOLCHAIN & HITECH)
                                        (0640) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0641) ELSE
                                        (0642) IF ENABLE_LJMP_TO_MAIN
                                        (0643)     ljmp  _main                    ; goto main (no return)
                                        (0644) ELSE
0138: 7C 09 18 LCALL __UserModules_end|_main|__text_start(0645)     lcall _main                    ; call main
                                        (0646) .Exit:
013B: 8F FF    JMP   0x013B             (0647)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0648) ENDIF
                                        (0649) ENDIF ; TOOLCHAIN
                                        (0650) 
                                        (0651)     ;---------------------------------
                                        (0652)     ; Library Access to Global Parms
                                        (0653)     ;---------------------------------
                                        (0654)     ;
                                        (0655)  bGetPowerSetting:
                                        (0656) _bGetPowerSetting:
                                        (0657)     ; Returns value of POWER_SETTING in the A register.
                                        (0658)     ; No inputs. No Side Effects.
                                        (0659)     ;
013D: 50 10    MOV   A,0x10             (0660)     mov   A, POWER_SETTING
013F: 7F       RET                      (0661)     ret
                                        (0662) 
                                        (0663) IF	(TOOLCHAIN & HITECH)
                                        (0664) ELSE
                                        (0665)     ;---------------------------------
                                        (0666)     ; Order Critical RAM & ROM AREAs
                                        (0667)     ;---------------------------------
                                        (0668)     ;  'TOP' is all that has been defined so far...
                                        (0669) 
                                        (0670)     ;  ROM AREAs for C CONST, static & global items
                                        (0671)     ;
                                        (0672)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0673)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0674) __idata_start:
                                        (0675) 
                                        (0676)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0677) __func_lit_start:
                                        (0678) 
                                        (0679) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0680)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0681)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0682)     ; relocated by the code compressor, but the text area may shrink and
                                        (0683)     ; that moves xidata around.
                                        (0684)     ;
                                        (0685) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0686) ENDIF
                                        (0687) 
                                        (0688)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0689)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0690) 
                                        (0691)     ; CODE segment for general use
                                        (0692)     ;
                                        (0693)     AREA text (ROM, REL, CON)
                                        (0694) __text_start:
                                        (0695) 
                                        (0696)     ; RAM area usage
                                        (0697)     ;
                                        (0698)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0699) __data_start:
                                        (0700) 
                                        (0701)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0702)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0703)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0704) __bss_start:
                                        (0705) 
                                        (0706) ENDIF ; TOOLCHAIN
                                        (0707) 
                                        (0708) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
02AE: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_project1_Bank1
                                        (0019) export LoadConfigTBL_project1_Bank0
                                        (0020) export LoadConfigTBL_project1_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_project1_Bank0:
                                        (0023) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0024) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0025) 	db		90h, 90h		;DUALADC_1_bfADC1cr0(ASD20CR0)
                                        (0026) 	db		91h, a0h		;DUALADC_1_bfADC1cr1(ASD20CR1)
                                        (0027) 	db		92h, 61h		;DUALADC_1_bfADC1cr2(ASD20CR2)
                                        (0028) 	db		93h, f0h		;DUALADC_1_bfADC1cr3(ASD20CR3)
                                        (0029) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0030) 	db		98h, 90h		;DUALADC_1_bfADC2cr0(ASD22CR0)
                                        (0031) 	db		99h, a0h		;DUALADC_1_bfADC2cr1(ASD22CR1)
                                        (0032) 	db		9ah, 60h		;DUALADC_1_bfADC2cr2(ASD22CR2)
                                        (0033) 	db		9bh, f0h		;DUALADC_1_bfADC2cr3(ASD22CR3)
                                        (0034) ;       Instance name DUALADC_1, Block Name CNT1(DBB20)
                                        (0035) 	db		43h, 00h		;DUALADC_1_bCounter1_CR0(DBB20CR0)
                                        (0036) 	db		41h, 00h		;DUALADC_1_bPeriod1(DBB20DR1)
                                        (0037) 	db		42h, 00h		;DUALADC_1_bCompare1(DBB20DR2)
                                        (0038) ;       Instance name DUALADC_1, Block Name CNT2(DCB23)
                                        (0039) 	db		4fh, 00h		;DUALADC_1_bCounter2_CR0(DCB23CR0)
                                        (0040) 	db		4dh, 00h		;DUALADC_1_bPeriod2(DCB23DR1)
                                        (0041) 	db		4eh, 00h		;DUALADC_1_bCompare2(DCB23DR2)
                                        (0042) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB21)
                                        (0043) 	db		47h, 00h		;DUALADC_1_fPWM_LSB_CR0(DBB21CR0)
                                        (0044) 	db		45h, 00h		;DUALADC_1_bPWM_Period_LSB(DBB21DR1)
                                        (0045) 	db		46h, 00h		;DUALADC_1_bPWM_IntTime_LSB(DBB21DR2)
                                        (0046) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB22)
                                        (0047) 	db		4bh, 00h		;DUALADC_1_fPWM_MSB_CR0(DCB22CR0)
                                        (0048) 	db		49h, 00h		;DUALADC_1_bPWM_Period_MSB(DCB22DR1)
                                        (0049) 	db		4ah, 00h		;DUALADC_1_bPWM_IntTime_MSB(DCB22DR2)
                                        (0050) ;  Instance name LCD, User Module LCD
                                        (0051) ;  Instance name LPF2_1, User Module LPF2
                                        (0052) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0053) 	db		80h, 94h		;LPF2_1_FLIN_CR0(ASC10CR0)
                                        (0054) 	db		81h, 88h		;LPF2_1_FLIN_CR1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;LPF2_1_FLIN_CR2(ASC10CR2)
                                        (0056) 	db		83h, 24h		;LPF2_1_FLIN_CR3(ASC10CR3)
                                        (0057) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0058) 	db		84h, 9fh		;LPF2_1_FLOUT_CR0(ASD11CR0)
                                        (0059) 	db		85h, 40h		;LPF2_1_FLOUT_CR1(ASD11CR1)
                                        (0060) 	db		86h, 9fh		;LPF2_1_FLOUT_CR2(ASD11CR2)
                                        (0061) 	db		87h, 20h		;LPF2_1_FLOUT_CR3(ASD11CR3)
                                        (0062) ;  Instance name LPF2_2, User Module LPF2
                                        (0063) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0064) 	db		88h, 94h		;LPF2_2_FLIN_CR0(ASC12CR0)
                                        (0065) 	db		89h, 88h		;LPF2_2_FLIN_CR1(ASC12CR1)
                                        (0066) 	db		8ah, 00h		;LPF2_2_FLIN_CR2(ASC12CR2)
                                        (0067) 	db		8bh, 24h		;LPF2_2_FLIN_CR3(ASC12CR3)
                                        (0068) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0069) 	db		8ch, 92h		;LPF2_2_FLOUT_CR0(ASD13CR0)
                                        (0070) 	db		8dh, 40h		;LPF2_2_FLOUT_CR1(ASD13CR1)
                                        (0071) 	db		8eh, 9fh		;LPF2_2_FLOUT_CR2(ASD13CR2)
                                        (0072) 	db		8fh, 20h		;LPF2_2_FLOUT_CR3(ASD13CR3)
                                        (0073) ;  Instance name PGA_1, User Module PGA
                                        (0074) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0075) 	db		71h, fdh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0076) 	db		72h, a3h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0077) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0078) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0079) ;  Instance name PGA_2, User Module PGA
                                        (0080) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0081) 	db		75h, 1dh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0082) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0083) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0084) 	db		74h, 01h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0085) ;  Instance name PGA_3, User Module PGA
                                        (0086) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0087) 	db		79h, fdh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0088) 	db		7ah, a3h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0089) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0090) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0091) ;  Instance name PGA_4, User Module PGA
                                        (0092) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0093) 	db		7dh, 1dh		;PGA_4_GAIN_CR0(ACB03CR0)
                                        (0094) 	db		7eh, 21h		;PGA_4_GAIN_CR1(ACB03CR1)
                                        (0095) 	db		7fh, 20h		;PGA_4_GAIN_CR2(ACB03CR2)
                                        (0096) 	db		7ch, 01h		;PGA_4_GAIN_CR3(ACB03CR3)
                                        (0097) ;  Instance name Timer16_1, User Module Timer16
                                        (0098) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0099) 	db		23h, 00h		;Timer16_1_CONTROL_LSB_REG(DBB00CR0)
                                        (0100) 	db		21h, 98h		;Timer16_1_PERIOD_LSB_REG(DBB00DR1)
                                        (0101) 	db		22h, 00h		;Timer16_1_COMPARE_LSB_REG(DBB00DR2)
                                        (0102) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0103) 	db		27h, 04h		;Timer16_1_CONTROL_MSB_REG(DBB01CR0)
                                        (0104) 	db		25h, 3ah		;Timer16_1_PERIOD_MSB_REG(DBB01DR1)
                                        (0105) 	db		26h, 00h		;Timer16_1_COMPARE_MSB_REG(DBB01DR2)
                                        (0106) ;  Global Register values Bank 0
                                        (0107) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0108) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0109) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0110) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0111) 	db		e6h, 50h		; DecimatorControl_0 register (DEC_CR0)
                                        (0112) 	db		e7h, 20h		; DecimatorControl_1 register (DEC_CR1)
                                        (0113) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0114) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0115) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0116) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0117) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0118) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0119) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0120) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0121) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0122) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0123) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0124) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0125) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0126) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0127) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0128) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0129) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0130) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0131) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0132) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0133) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0134) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0135) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0136) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0137) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0138) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0139) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0140) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0141) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0142) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0143) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0144) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0145) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0146) 	db		ffh
                                        (0147) LoadConfigTBL_project1_Bank1:
                                        (0148) ;  Instance name DUALADC_1, User Module DUALADC
                                        (0149) ;       Instance name DUALADC_1, Block Name ADC1(ASD20)
                                        (0150) ;       Instance name DUALADC_1, Block Name ADC2(ASD22)
                                        (0151) ;       Instance name DUALADC_1, Block Name CNT1(DBB20)
                                        (0152) 	db		40h, 21h		;DUALADC_1_fCounter1FN(DBB20FN)
                                        (0153) 	db		41h, 45h		;DUALADC_1_fCounter1SL(DBA20IN)
                                        (0154) 	db		42h, 40h		;DUALADC_1_fCounter1OS(DBA20OU)
                                        (0155) ;       Instance name DUALADC_1, Block Name CNT2(DCB23)
                                        (0156) 	db		4ch, 21h		;DUALADC_1_fCounter2FN(DCB23FN)
                                        (0157) 	db		4dh, 65h		;DUALADC_1_fCounter2SL(DCB23IN)
                                        (0158) 	db		4eh, 40h		;DUALADC_1_fCounter2OS(DCB23OU)
                                        (0159) ;       Instance name DUALADC_1, Block Name PWM16_LSB(DBB21)
                                        (0160) 	db		44h, 01h		;DUALADC_1_bfPWM_LSB_FN(DBB21FN)
                                        (0161) 	db		45h, 15h		;DUALADC_1_(DBB21IN)
                                        (0162) 	db		46h, 40h		;DUALADC_1_(DBB21OU)
                                        (0163) ;       Instance name DUALADC_1, Block Name PWM16_MSB(DCB22)
                                        (0164) 	db		48h, 21h		;DUALADC_1_bfPWM_MSB_FN(DCB22FN)
                                        (0165) 	db		49h, 35h		;DUALADC_1_(DCB22IN)
                                        (0166) 	db		4ah, 40h		;DUALADC_1_(DCB22OU)
                                        (0167) ;  Instance name LCD, User Module LCD
                                        (0168) ;  Instance name LPF2_1, User Module LPF2
                                        (0169) ;       Instance name LPF2_1, Block Name FLIN(ASC10)
                                        (0170) ;       Instance name LPF2_1, Block Name FLOUT(ASD11)
                                        (0171) ;  Instance name LPF2_2, User Module LPF2
                                        (0172) ;       Instance name LPF2_2, Block Name FLIN(ASC12)
                                        (0173) ;       Instance name LPF2_2, Block Name FLOUT(ASD13)
                                        (0174) ;  Instance name PGA_1, User Module PGA
                                        (0175) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0176) ;  Instance name PGA_2, User Module PGA
                                        (0177) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0178) ;  Instance name PGA_3, User Module PGA
                                        (0179) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0180) ;  Instance name PGA_4, User Module PGA
                                        (0181) ;       Instance name PGA_4, Block Name GAIN(ACB03)
                                        (0182) ;  Instance name Timer16_1, User Module Timer16
                                        (0183) ;       Instance name Timer16_1, Block Name TIMER16_LSB(DBB00)
                                        (0184) 	db		20h, 10h		;Timer16_1_FUNC_LSB_REG(DBB00FN)
                                        (0185) 	db		21h, 05h		;Timer16_1_INPUT_LSB_REG(DBB00IN)
                                        (0186) 	db		22h, 40h		;Timer16_1_OUTPUT_LSB_REG(DBB00OU)
                                        (0187) ;       Instance name Timer16_1, Block Name TIMER16_MSB(DBB01)
                                        (0188) 	db		24h, 30h		;Timer16_1_FUNC_MSB_REG(DBB01FN)
                                        (0189) 	db		25h, 35h		;Timer16_1_INPUT_MSB_REG(DBB01IN)
                                        (0190) 	db		26h, 40h		;Timer16_1_OUTPUT_MSB_REG(DBB01OU)
                                        (0191) ;  Global Register values Bank 1
                                        (0192) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0193) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0194) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0195) 	db		62h, bch		; AnalogIOControl_0 register (ABF_CR0)
                                        (0196) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0197) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0198) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0199) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0200) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0201) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0202) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0203) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0204) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0205) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0206) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0207) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0208) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0209) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0210) 	db		ffh
                                        (0211) AREA psoc_config(rom, rel)
                                        (0212) LoadConfigTBL_project1_Ordered:
                                        (0213) ;  Ordered Global Register values
                                        (0214) 	M8C_SetBank0
02B0: 62 00 00 MOV   REG[0x0],0x0       (0215) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02B3: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
02B5: 62 00 00 MOV   REG[0x0],0x0       (0217) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
02B8: 62 01 FF MOV   REG[0x1],0xFF      (0218) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
02BB: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
02BD: 62 03 FF MOV   REG[0x3],0xFF      (0220) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
02C0: 62 02 00 MOV   REG[0x2],0x0       (0221) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02C3: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
02C5: 62 02 00 MOV   REG[0x2],0x0       (0223) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02C8: 62 03 00 MOV   REG[0x3],0x0       (0224) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02CB: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
02CD: 62 01 00 MOV   REG[0x1],0x0       (0226) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02D0: 62 04 00 MOV   REG[0x4],0x0       (0227) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02D3: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
02D5: 62 04 0F MOV   REG[0x4],0xF       (0229) 	mov	reg[04h], 0fh		; Port_1_DriveMode_0 register (PRT1DM0)
02D8: 62 05 F0 MOV   REG[0x5],0xF0      (0230) 	mov	reg[05h], f0h		; Port_1_DriveMode_1 register (PRT1DM1)
02DB: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
02DD: 62 07 F0 MOV   REG[0x7],0xF0      (0232) 	mov	reg[07h], f0h		; Port_1_DriveMode_2 register (PRT1DM2)
02E0: 62 06 00 MOV   REG[0x6],0x0       (0233) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02E3: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
02E5: 62 06 00 MOV   REG[0x6],0x0       (0235) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02E8: 62 07 00 MOV   REG[0x7],0x0       (0236) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02EB: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
02ED: 62 05 00 MOV   REG[0x5],0x0       (0238) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02F0: 62 08 00 MOV   REG[0x8],0x0       (0239) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02F3: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
02F5: 62 08 7F MOV   REG[0x8],0x7F      (0241) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
02F8: 62 09 00 MOV   REG[0x9],0x0       (0242) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
02FB: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
02FD: 62 0B 00 MOV   REG[0xB],0x0       (0244) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0300: 62 0A 00 MOV   REG[0xA],0x0       (0245) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0303: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0305: 62 0A 80 MOV   REG[0xA],0x80      (0247) 	mov	reg[0ah], 80h		; Port_2_IntCtrl_0 register (PRT2IC0)
0308: 62 0B 80 MOV   REG[0xB],0x80      (0248) 	mov	reg[0bh], 80h		; Port_2_IntCtrl_1 register (PRT2IC1)
030B: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
030D: 62 09 80 MOV   REG[0x9],0x80      (0250) 	mov	reg[09h], 80h		; Port_2_IntEn register (PRT2IE)
0310: 62 0C 00 MOV   REG[0xC],0x0       (0251) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0313: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
0315: 62 0C 00 MOV   REG[0xC],0x0       (0253) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0318: 62 0D 00 MOV   REG[0xD],0x0       (0254) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
031B: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
031D: 62 0F 00 MOV   REG[0xF],0x0       (0256) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0320: 62 0E 00 MOV   REG[0xE],0x0       (0257) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0323: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
0325: 62 0E 00 MOV   REG[0xE],0x0       (0259) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0328: 62 0F 00 MOV   REG[0xF],0x0       (0260) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
032B: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
032D: 62 0D 00 MOV   REG[0xD],0x0       (0262) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0330: 62 10 00 MOV   REG[0x10],0x0      (0263) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0333: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0335: 62 10 00 MOV   REG[0x10],0x0      (0265) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0338: 62 11 00 MOV   REG[0x11],0x0      (0266) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
033B: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
033D: 62 13 00 MOV   REG[0x13],0x0      (0268) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0340: 62 12 00 MOV   REG[0x12],0x0      (0269) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0343: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0345: 62 12 00 MOV   REG[0x12],0x0      (0271) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0348: 62 13 00 MOV   REG[0x13],0x0      (0272) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
034B: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
034D: 62 11 00 MOV   REG[0x11],0x0      (0274) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0350: 62 14 00 MOV   REG[0x14],0x0      (0275) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0353: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
0355: 62 14 00 MOV   REG[0x14],0x0      (0277) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0358: 62 15 00 MOV   REG[0x15],0x0      (0278) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
035B: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
035D: 62 17 00 MOV   REG[0x17],0x0      (0280) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0360: 62 16 00 MOV   REG[0x16],0x0      (0281) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0363: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
0365: 62 16 00 MOV   REG[0x16],0x0      (0283) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0368: 62 17 00 MOV   REG[0x17],0x0      (0284) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
036B: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
036D: 62 15 00 MOV   REG[0x15],0x0      (0286) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0370: 62 18 00 MOV   REG[0x18],0x0      (0287) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0373: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
0375: 62 18 00 MOV   REG[0x18],0x0      (0289) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0378: 62 19 00 MOV   REG[0x19],0x0      (0290) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
037B: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
037D: 62 1B 00 MOV   REG[0x1B],0x0      (0292) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0380: 62 1A 00 MOV   REG[0x1A],0x0      (0293) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0383: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
0385: 62 1A 00 MOV   REG[0x1A],0x0      (0295) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0388: 62 1B 00 MOV   REG[0x1B],0x0      (0296) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
038B: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
038D: 62 19 00 MOV   REG[0x19],0x0      (0298) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0390: 62 1C 00 MOV   REG[0x1C],0x0      (0299) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0393: 71 10    OR    F,0x10             
                                        (0300) 	M8C_SetBank1
0395: 62 1C 00 MOV   REG[0x1C],0x0      (0301) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0398: 62 1D 00 MOV   REG[0x1D],0x0      (0302) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
039B: 70 EF    AND   F,0xEF             
                                        (0303) 	M8C_SetBank0
039D: 62 1F 00 MOV   REG[0x1F],0x0      (0304) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03A0: 62 1E 00 MOV   REG[0x1E],0x0      (0305) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03A3: 71 10    OR    F,0x10             
                                        (0306) 	M8C_SetBank1
03A5: 62 1E 00 MOV   REG[0x1E],0x0      (0307) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03A8: 62 1F 00 MOV   REG[0x1F],0x0      (0308) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03AB: 70 EF    AND   F,0xEF             
                                        (0309) 	M8C_SetBank0
03AD: 62 1D 00 MOV   REG[0x1D],0x0      (0310) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03B0: 70 EF    AND   F,0xEF             
                                        (0311) 	M8C_SetBank0
03B2: 7F       RET                      (0312) 	ret
                                        (0313) 
                                        (0314) 
                                        (0315) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
03B3: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
03B6: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
03B9: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
03BC: 7C 03 C3 LCALL 0x03C3             (0069) 	lcall	LoadConfig_project1
03BF: 7C 02 AE LCALL 0x02AE             (0070) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
03C2: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration project1
                                        (0078) ;
                                        (0079) ;    Load configuration registers for project1.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_project1:
                                        (0096)  LoadConfig_project1:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
03C3: 10       PUSH  X                  (0099) 	push	x
03C4: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
03C6: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
03C8: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
03C9: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_project1_Bank0
03CB: 57 A0    MOV   X,0xA0             (0105)     mov     X, <LoadConfigTBL_project1_Bank0
03CD: 7C 03 DE LCALL 0x03DE             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
03D0: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
03D2: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
03D3: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_project1_Bank1
03D5: 57 63    MOV   X,0x63             (0112)     mov     X, <LoadConfigTBL_project1_Bank1
03D7: 7C 03 DE LCALL 0x03DE             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03DA: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03DC: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03DD: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03DE: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03E0: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03E1: 08       PUSH  A                  (0143)     push    A
03E2: 4F       MOV   X,SP               (0144)     mov     X, SP
03E3: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03E6: D0 04    JNC   0x03EB             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03E8: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03EB: 18       POP   A                  (0149)     pop     A
03EC: 20       POP   X                  (0150)     pop     X
03ED: 70 EF    AND   F,0xEF             
03EF: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03F2: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03F3: 08       PUSH  A                  (0156)     push    A
03F4: 28       ROMX                     (0157)     romx                            ; Load register address from table
03F5: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03F7: A0 1F    JZ    0x0417             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03F9: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03FA: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03FD: A0 03    JZ    0x0401             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03FF: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0401: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0403: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0404: 20       POP   X                  (0167)     pop     X
0405: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0406: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0408: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0409: 08       PUSH  A                  (0171)     push    A
040A: 28       ROMX                     (0172)     romx                            ; load config data from the table
040B: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
040C: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
040E: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0410: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0411: 20       POP   X                  (0177)     pop     X
0412: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0413: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0415: 8F D7    JMP   0x03ED             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0417: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0419: 70 3F    AND   F,0x3F             
041B: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
041D: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer16_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) include "program_defines.inc"
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
041E: 08       PUSH  A                  (0074)     push A
041F: 10       PUSH  X                  (0075) 	push X
                                        (0076) 	
0420: 76 0B    INC   [0xB]              (0077)    	inc [addr_internal_inc_ms]
                                        (0078) 	
                                        (0079) 
0422: 20       POP   X                  (0080) 	pop X
0423: 18       POP   A                  (0081) 	pop A
                                        (0082)    
                                        (0083)    ;---------------------------------------------------
                                        (0084)    ; Insert a lcall to a C function below this banner
                                        (0085)    ; and un-comment the lines between these banners
                                        (0086)    ;---------------------------------------------------
                                        (0087)    
                                        (0088)    ;PRESERVE_CPU_CONTEXT
                                        (0089)    ;lcall _My_C_Function
                                        (0090)    ;RESTORE_CPU_CONTEXT
                                        (0091)    
                                        (0092)    ;---------------------------------------------------
                                        (0093)    ; Insert a lcall to a C function above this banner
                                        (0094)    ; and un-comment the lines between these banners
                                        (0095)    ;---------------------------------------------------
                                        (0096)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0097) 
0424: 7E       RETI                     (0098)    reti
                                        (0099) 
                                        (0100) 
                                        (0101) ; end of file Timer16_1INT.asm
FILE: lib\timer16_1.asm                 (0001) ;;*****************************************************************************
0425: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_1_EnableInt
                                        (0030) export _Timer16_1_EnableInt
                                        (0031) export  Timer16_1_DisableInt
                                        (0032) export _Timer16_1_DisableInt
                                        (0033) export  Timer16_1_Start
                                        (0034) export _Timer16_1_Start
                                        (0035) export  Timer16_1_Stop
                                        (0036) export _Timer16_1_Stop
                                        (0037) export  Timer16_1_WritePeriod
                                        (0038) export _Timer16_1_WritePeriod
                                        (0039) export  Timer16_1_WriteCompareValue
                                        (0040) export _Timer16_1_WriteCompareValue
                                        (0041) export  Timer16_1_wReadCompareValue
                                        (0042) export _Timer16_1_wReadCompareValue
                                        (0043) export  Timer16_1_wReadTimer
                                        (0044) export _Timer16_1_wReadTimer
                                        (0045) export  Timer16_1_wReadTimerSaveCV
                                        (0046) export _Timer16_1_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_1_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_1_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_1_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_1_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_1_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_1_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_1_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA project1_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_1_EnableInt:
                                        (0098) _Timer16_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0428: 7F       RET                      (0102)    ret
0429: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_1_DisableInt:
                                        (0126) _Timer16_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
042C: 7F       RET                      (0130)    ret
042D: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_1_Start:
                                        (0154) _Timer16_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0430: 7F       RET                      (0158)    ret
0431: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_1_Stop:
                                        (0182) _Timer16_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0434: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_1_WritePeriod:
                                        (0211) _Timer16_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0435: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_1_PERIOD_LSB_REG], A
0437: 5B       MOV   A,X                (0214)    mov   A, X
0438: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_1_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
043A: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_1_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_1_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_1_WriteCompareValue:
                                        (0243) _Timer16_1_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
043B: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
043D: 5B       MOV   A,X                (0246)    mov   A, X
043E: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0440: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_1_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_1_wReadCompareValue:
                                        (0272) _Timer16_1_wReadCompareValue:
                                        (0273)  wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0274) _wTimer16_1_ReadCompareValue:                    ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0441: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0443: 5C       MOV   X,A                (0277)    mov   X, A
0444: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0446: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_1_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_1_wReadTimerSaveCV:
                                        (0321) _Timer16_1_wReadTimerSaveCV:
                                        (0322)  wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0323) _wTimer16_1_ReadTimerSaveCV:                     ; this name deprecated
                                        (0324)  wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0325) _wTimer16_1_ReadCounter:                         ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0447: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0448: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
044A: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_1_CONTROL_LSB_REG]       ; save the Control register
044C: 08       PUSH  A                  (0335)    push  A
044D: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]       ; save the Compare register
044F: 08       PUSH  A                  (0337)    push  A
0450: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]
0452: 08       PUSH  A                  (0339)    push  A
0453: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0455: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Now grab DR2 (DR0) and save
0457: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0459: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
045B: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
045D: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
045F: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0462: A0 03    JZ    0x0466             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0464: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0466: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0468: 70 FE    AND   F,0xFE             
046A: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_1_Stop_M                              ; Disable (stop) the timer
046D: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
046E: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_1_COMPARE_MSB_REG], A
0470: 18       POP   A                  (0356)    pop   A
0471: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_1_COMPARE_LSB_REG], A
0473: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0474: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_1_CONTROL_LSB_REG], A
0476: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
0477: 20       POP   X                  (0361)    pop   X
0478: 70 3F    AND   F,0x3F             
047A: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
047C: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_1_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_1_wReadTimer:
                                        (0397) _Timer16_1_wReadTimer:
                                        (0398)  wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0399) _wTimer16_1_ReadTimer:                           ; this name deprecated
                                        (0400)  wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0401) _wTimer16_1_CaptureCounter:                      ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
047D: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_1_COUNTER_LSB_REG]       ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
047F: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_1_COMPARE_MSB_REG]       ; Return DR2 (actually DR0)
0481: 5C       MOV   X,A                (0408)    mov   X, A
0482: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_1_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0484: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_1.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0485: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0487: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0488: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0489: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
048B: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
048D: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
048F: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
0491: 18       POP   A                  (0124)    pop  A
0492: 70 3F    AND   F,0x3F             
0494: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0496: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0497: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0499: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
049A: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
049B: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
049D: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
049F: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
04A2: B0 0E    JNZ   0x04B1             (0164)    jnz  .SETHIGHGAIN
04A4: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
04A7: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
04A9: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
04AB: 18       POP   A                  (0168)    pop  A
04AC: 70 3F    AND   F,0x3F             
04AE: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
04B0: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
04B1: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
04B4: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
04B6: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
04B8: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
04BB: 18       POP   A                  (0177)    pop  A
04BC: 70 3F    AND   F,0x3F             
04BE: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
04C0: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
04C1: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
04C4: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
04C5: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
04C7: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
04C8: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
04C9: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
04CB: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
04CD: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
04CF: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
04D1: 18       POP   A                  (0124)    pop  A
04D2: 70 3F    AND   F,0x3F             
04D4: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
04D6: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
04D7: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
04D9: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
04DA: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
04DB: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
04DD: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
04DF: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
04E2: B0 0E    JNZ   0x04F1             (0164)    jnz  .SETHIGHGAIN
04E4: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
04E7: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
04E9: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
04EB: 18       POP   A                  (0168)    pop  A
04EC: 70 3F    AND   F,0x3F             
04EE: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
04F0: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
04F1: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
04F4: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
04F6: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
04F8: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
04FB: 18       POP   A                  (0177)    pop  A
04FC: 70 3F    AND   F,0x3F             
04FE: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0500: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0501: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0504: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: lib\lpf2_1.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LPF2_1.asm
                                        (0004) ;;   Version: 4.10, Updated on 2015/3/4 at 22:26:40
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Asm source for 2 Pole Switched Capacitor Low Pass Filter
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "LPF2_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  LPF2_1_Start
                                        (0031) export _LPF2_1_Start
                                        (0032) export  LPF2_1_SetPower
                                        (0033) export _LPF2_1_SetPower
                                        (0034) 
                                        (0035) export  LPF2_1_SetC1
                                        (0036) export _LPF2_1_SetC1
                                        (0037) export  LPF2_1_SetC2
                                        (0038) export _LPF2_1_SetC2
                                        (0039) export  LPF2_1_SetC3
                                        (0040) export _LPF2_1_SetC3
                                        (0041) export  LPF2_1_SetC4
                                        (0042) export _LPF2_1_SetC4
                                        (0043) export  LPF2_1_SetCA
                                        (0044) export _LPF2_1_SetCA
                                        (0045) export  LPF2_1_SetCB
                                        (0046) export _LPF2_1_SetCB
                                        (0047) export  LPF2_1_SetPolarity
                                        (0048) export _LPF2_1_SetPolarity
                                        (0049) 
                                        (0050) export  LPF2_1_Stop
                                        (0051) export _LPF2_1_Stop
                                        (0052) 
                                        (0053) 
                                        (0054) ;-----------------------------------------------
                                        (0055) ; Variable Allocation
                                        (0056) ;-----------------------------------------------
                                        (0057) AREA bss (RAM,REL)
                                        (0058) 
                                        (0059) 
                                        (0060) 
                                        (0061) ;-----------------------------------------------
                                        (0062) ;  EQUATES
                                        (0063) ;-----------------------------------------------
                                        (0064) bPOWERMASK:          equ   03h         ; Power field mask for CR3
                                        (0065) LPF_CNUMMASK:        equ   1fh         ; Mask for A, B & C Caps
                                        (0066) LPF_CFBMASK:         equ   80h         ; Mask for Feedback Caps
                                        (0067) LPF_POLARITYMASK:    equ   20h         ; Mask of Asign field for CR0
                                        (0068) 
                                        (0069) LPF2_1_IfCond:          equ LPF2_1_AMD_MSK & 0x01
                                        (0070) 
                                        (0071) IF (LPF2_1_AMD_VAL)
                                        (0072)  IF (LPF2_1_IfCond)
                                        (0073)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL
                                        (0074)  ELSE
                                        (0075)   LPF2_1_AMD:           equ LPF2_1_AMD_VAL << 4
                                        (0076)  ENDIF
                                        (0077) ENDIF
                                        (0078) 
                                        (0079) AREA UserModules (ROM,REL)
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: LPF2_1_Start
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Applies power setting to the module's PSoC blocks
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:    A register contains the power setting (constant)
                                        (0088) ;  RETURNS:      Nothing
                                        (0089) ;  SIDE EFFECTS: 
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) 
                                        (0097)  LPF2_1_Start:
                                        (0098) _LPF2_1_Start:
                                        (0099)  LPF2_1_SetPower:
                                        (0100) _LPF2_1_SetPower:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_2
0505: 21 03    AND   A,0x3              (0102)     and A, bPOWERMASK                        ; mask A to protect unchanged bits
0507: 4F       MOV   X,SP               (0103)     mov X, SP                                ; define temp store location
                                        (0104) 
0508: 08       PUSH  A                  (0105)     push A                                   ; put power value in temp store
                                        (0106) 
                                        (0107) IF (LPF2_1_AMD_VAL)
                                        (0108)    M8C_SetBank1
                                        (0109)    mov   A, reg[LPF2_1_AMD_REG]                  ; read modulator register
                                        (0110)    and   A, ~LPF2_1_AMD_MSK                      ; clear modulator bittfield in A
                                        (0111)    or    A, LPF2_1_AMD                           ; combine modulator value with balance of register
                                        (0112)    mov   reg[LPF2_1_AMD_REG], A                  ; move complete value back to register
                                        (0113)    M8C_SetBank0
                                        (0114) ENDIF
                                        (0115) 
0509: 5D 83    MOV   A,REG[0x83]        (0116)     mov A, reg[LPF2_1_FLIN_CR3]    ; read power value
050B: 21 FC    AND   A,0xFC             (0117)     and A, ~bPOWERMASK                       ; clear power bits in A
050D: 2B 00    OR    A,[X+0]            (0118)     or  A, [X]                               ; combine power value with balance of reg.
050F: 60 83    MOV   REG[0x83],A        (0119)     mov reg[LPF2_1_FLIN_CR3], A    ; move complete value back to register
                                        (0120) 
0511: 5D 87    MOV   A,REG[0x87]        (0121)     mov A, reg[LPF2_1_FLOUT_CR3]   ; read power value
0513: 21 FC    AND   A,0xFC             (0122)     and A, ~bPOWERMASK                       ; clear power bits in A
0515: 2B 00    OR    A,[X+0]            (0123)     or  A, [X]                               ; combine power value with balance of reg.
0517: 60 87    MOV   REG[0x87],A        (0124)     mov reg[LPF2_1_FLOUT_CR3], A   ; move complete value back to register
0519: 18       POP   A                  (0125)     pop A
051A: 70 3F    AND   F,0x3F             
051C: 71 C0    OR    F,0xC0             
                                        (0126)     RAM_EPILOGUE RAM_USE_CLASS_2
051E: 7F       RET                      (0127)     ret
                                        (0128) 
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: LPF2_1_SetCn, n=1..4
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0133) ;                 of the capacitors (defined in LPF2_1.inc)
                                        (0134) ;
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    The A register contains a non-negative integer less than 32
                                        (0138) ;  RETURNS:
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146) 
                                        (0147)  LPF2_1_SetC1:
                                        (0148) _LPF2_1_SetC1:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
051F: 21 1F    AND   A,0x1F             (0150)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0521: 4F       MOV   X,SP               (0151)     mov X, SP                                ; define temp store location
0522: 08       PUSH  A                  (0152)     push A                                   ; put C1 value in temp store
0523: 5D 80    MOV   A,REG[0x80]        (0153)     mov A, reg[LPF2_1_FILT_C1_REG] ; read current C1
0525: 21 E0    AND   A,0xE0             (0154)     and A, ~LPF_CNUMMASK                     ; clear C1 bits in A
0527: 2B 00    OR    A,[X+0]            (0155)     or  A, [X]                               ; combine C1 value with balance of reg.
0529: 60 80    MOV   REG[0x80],A        (0156)     mov reg[LPF2_1_FILT_C1_REG], A ; move complete value back to register
052B: 18       POP   A                  (0157)     pop  A
052C: 70 3F    AND   F,0x3F             
052E: 71 C0    OR    F,0xC0             
                                        (0158)     RAM_EPILOGUE RAM_USE_CLASS_2
0530: 7F       RET                      (0159)     ret
                                        (0160) 
                                        (0161)  LPF2_1_SetC2:
                                        (0162) _LPF2_1_SetC2:
                                        (0163)     RAM_PROLOGUE RAM_USE_CLASS_2
0531: 21 1F    AND   A,0x1F             (0164)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0533: 4F       MOV   X,SP               (0165)     mov X, SP                                ; define temp store location
0534: 08       PUSH  A                  (0166)     push A                                   ; put C2 value in temp store
0535: 5D 81    MOV   A,REG[0x81]        (0167)     mov A, reg[LPF2_1_FILT_C2_REG] ; read current C2
0537: 21 E0    AND   A,0xE0             (0168)     and A, ~LPF_CNUMMASK                     ; clear C2 bits in A
0539: 2B 00    OR    A,[X+0]            (0169)     or  A, [X]                               ; combine C2 value with balance of reg.
053B: 60 81    MOV   REG[0x81],A        (0170)     mov reg[LPF2_1_FILT_C2_REG], A ; move complete value back to register
053D: 18       POP   A                  (0171)     pop A
053E: 70 3F    AND   F,0x3F             
0540: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0542: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175)  LPF2_1_SetC3:
                                        (0176) _LPF2_1_SetC3:
                                        (0177)     RAM_PROLOGUE RAM_USE_CLASS_2
0543: 21 1F    AND   A,0x1F             (0178)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0545: 4F       MOV   X,SP               (0179)     mov X, SP                                ; define temp store location
0546: 08       PUSH  A                  (0180)     push A                                   ; put C3 value in temp store
0547: 5D 84    MOV   A,REG[0x84]        (0181)     mov A, reg[LPF2_1_FILT_C3_REG] ; read current C3
0549: 21 E0    AND   A,0xE0             (0182)     and A, ~LPF_CNUMMASK                     ; clear C3 bits in A
054B: 2B 00    OR    A,[X+0]            (0183)     or  A, [X]                               ; combine C3 value with balance of reg.
054D: 60 84    MOV   REG[0x84],A        (0184)     mov reg[LPF2_1_FILT_C3_REG], A ; move complete value back to register
054F: 18       POP   A                  (0185)     pop A
0550: 70 3F    AND   F,0x3F             
0552: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0554: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189)  LPF2_1_SetC4:
                                        (0190) _LPF2_1_SetC4:
                                        (0191)     RAM_PROLOGUE RAM_USE_CLASS_2
0555: 21 1F    AND   A,0x1F             (0192)     and A, LPF_CNUMMASK                      ; mask A to protect unchanged bits
0557: 4F       MOV   X,SP               (0193)     mov X, SP                                ; define temp store location
0558: 08       PUSH  A                  (0194)     push A                                   ; put C4 value in temp store
0559: 5D 86    MOV   A,REG[0x86]        (0195)     mov A, reg[LPF2_1_FILT_C4_REG] ; read current C4
055B: 21 E0    AND   A,0xE0             (0196)     and A, ~LPF_CNUMMASK                     ; clear C4 bits in A
055D: 2B 00    OR    A,[X+0]            (0197)     or  A, [X]                               ; combine C4 value with balance of reg.
055F: 60 86    MOV   REG[0x86],A        (0198)     mov reg[LPF2_1_FILT_C4_REG], A ; move complete value back to register
0561: 18       POP   A                  (0199)     pop A
0562: 70 3F    AND   F,0x3F             
0564: 71 C0    OR    F,0xC0             
                                        (0200)     RAM_EPILOGUE RAM_USE_CLASS_2
0566: 7F       RET                      (0201)     ret
                                        (0202) 
                                        (0203) 
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: LPF2_1_SetCA
                                        (0206) ;            and  LPF2_1_SetCB
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:   Alters the filter transfer function by modifying the value
                                        (0209) ;                 of the op-amp feedback capacitors (see LPF2_1.inc)
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:    The A register contains one of the LPF2_1_FEEDBACK
                                        (0213) ;                  constants defined in LPF2_1.inc
                                        (0214) ;  RETURNS:      Nothing.
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) 
                                        (0223)  LPF2_1_SetCA:
                                        (0224) _LPF2_1_SetCA:
                                        (0225)     RAM_PROLOGUE RAM_USE_CLASS_1
0567: 39 01    CMP   A,0x1              (0226)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
0569: A0 05    JZ    0x056F             (0227)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0228)                                              ;     No, clear it to 16 units...
056B: 41 80 7F AND   REG[0x80],0x7F     (0229)     and   reg[LPF2_1_FILT_CA_REG], ~LPF_CFBMASK
                                        (0230)     RAM_EPILOGUE RAM_USE_CLASS_1 
056E: 7F       RET                      (0231)     ret
                                        (0232) .SetCAto32:
056F: 43 80 80 OR    REG[0x80],0x80     (0233)     or    reg[LPF2_1_FILT_CA_REG],  LPF_CFBMASK
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_1
0572: 7F       RET                      (0235)     ret
                                        (0236) 
                                        (0237) 
                                        (0238)  LPF2_1_SetCB:
                                        (0239) _LPF2_1_SetCB:
                                        (0240)     RAM_PROLOGUE RAM_USE_CLASS_1
0573: 39 01    CMP   A,0x1              (0241)     cmp   A, LPF2_1_FEEDBACK_32    ; Change Feedback to 32 units?
0575: A0 05    JZ    0x057B             (0242)     jz    .SetCAto32                         ;    Yes, go make it so
                                        (0243)                                              ;     No, clear it to 16 units...
0577: 41 84 7F AND   REG[0x84],0x7F     (0244)     and   reg[LPF2_1_FILT_CB_REG], ~LPF_CFBMASK
                                        (0245)     RAM_EPILOGUE RAM_USE_CLASS_1
057A: 7F       RET                      (0246)     ret
                                        (0247) .SetCAto32:
057B: 43 84 80 OR    REG[0x84],0x80     (0248)     or    reg[LPF2_1_FILT_CB_REG],  LPF_CFBMASK
                                        (0249)     RAM_EPILOGUE RAM_USE_CLASS_1
057E: 7F       RET                      (0250)     ret
                                        (0251) 
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: LPF2_1_SetPolarity
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Alters the output polarity of the data by altering the
                                        (0256) ;                 input polarity at FLIN
                                        (0257) ;-----------------------------------------------------------------------------
                                        (0258) ;
                                        (0259) ;  ARGUMENTS:    The A register contains one of the LPF2_1_POLARITY
                                        (0260) ;                  constants defined in LPF2_1.inc
                                        (0261) ;  RETURNS:      Nothing.
                                        (0262) ;  SIDE EFFECTS: 
                                        (0263) ;    The A and X registers may be modified by this or future implementations
                                        (0264) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0265) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0266) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0267) ;    functions.
                                        (0268) ;
                                        (0269) 
                                        (0270)  LPF2_1_SetPolarity:
                                        (0271) _LPF2_1_SetPolarity:
                                        (0272)     RAM_PROLOGUE RAM_USE_CLASS_1
057F: 39 01    CMP   A,0x1              (0273)     cmp   A, LPF2_1_POLARITY_NON_INVERTING ; Should the output be non-inverting?
0581: A0 05    JZ    0x0587             (0274)     jz    .SetPoltoNonInv                         ;    Yes, go make it so
                                        (0275)                                                   ;    No, then set it to Inverting...
0583: 43 80 20 OR    REG[0x80],0x20     (0276)     or    reg[LPF2_1_FLIN_CR0], LPF_POLARITYMASK
                                        (0277)     RAM_EPILOGUE RAM_USE_CLASS_1
0586: 7F       RET                      (0278)     ret
                                        (0279) .SetPoltoNonInv:
0587: 41 80 DF AND   REG[0x80],0xDF     (0280)     and   reg[LPF2_1_FLIN_CR0], ~LPF_POLARITYMASK
                                        (0281)     RAM_EPILOGUE RAM_USE_CLASS_1
058A: 7F       RET                      (0282)     ret
                                        (0283) 
                                        (0284) ;-----------------------------------------------------------------------------
                                        (0285) ;  FUNCTION NAME: LPF2_1_Stop
                                        (0286) ;
                                        (0287) ;  DESCRIPTION: Cuts power to the user module.
                                        (0288) ;
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;
                                        (0291) ;  ARGUMENTS:     None
                                        (0292) ;  RETURNS:       Nothing
                                        (0293) ;  SIDE EFFECTS: 
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;
                                        (0300)  LPF2_1_Stop:
                                        (0301) _LPF2_1_Stop:
                                        (0302) 
                                        (0303)     RAM_PROLOGUE RAM_USE_CLASS_1
058B: 41 83 FC AND   REG[0x83],0xFC     (0304)     and reg[LPF2_1_FLIN_CR3],  ~bPOWERMASK
058E: 41 87 FC AND   REG[0x87],0xFC     (0305)     and reg[LPF2_1_FLOUT_CR3], ~bPOWERMASK
                                        (0306)     RAM_EPILOGUE RAM_USE_CLASS_1
0591: 7F       RET                      (0307)     ret
                                        (0308) 
                                        (0309) 
                                        (0310) ; End of File LPF2_1.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0592: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0593: 10       PUSH  X                  (0209)     push  X
0594: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0595: B0 04    JNZ   0x059A             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0597: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0598: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0599: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
059A: 90 44    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
059C: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
059D: 18       POP   A                  (0220)     pop   A
059E: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
059F: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
05A1: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
05A2: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05B4: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05B5: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05B6: 67       ASR   A                  (0262)     asr   A
05B7: 67       ASR   A                  (0263)     asr   A
05B8: 67       ASR   A                  (0264)     asr   A
05B9: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
05BB: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
05BD: 90 21    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
05BF: 18       POP   A                  (0268)     pop   A                            ; Restore value
05C0: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
05C2: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
05C4: 90 1A    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
05C6: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
05C7: 4B       SWAP  A,X                (0305)     swap  A,X
05C8: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
05CA: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
05CB: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
05CD: 7F       RET                      (0310)     ret
05CE: 70 BF    AND   F,0xBF             
05D0: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
05D2: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
05D4: A0 06    JZ    0x05DB             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
05D6: 90 08    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
05D8: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
05D9: 8F F8    JMP   0x05D2             (0351)     jmp   .Loop_PrString               ; Go get next character
05DB: 70 3F    AND   F,0x3F             
05DD: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
05DF: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
05E0: 90 65    CALL  0x0647             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
05E2: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
05E3: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
05E4: 67       ASR   A                  (0390)     asr   A
05E5: 67       ASR   A                  (0391)     asr   A
05E6: 67       ASR   A                  (0392)     asr   A
05E7: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05E9: 90 3B    CALL  0x0626             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
05EB: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05EC: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05EE: 40       NOP                      (0397)     nop
05EF: 40       NOP                      (0398)     nop
05F0: 40       NOP                      (0399)     nop
05F1: 90 33    CALL  0x0626             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
05F3: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
05F4: 90 51    CALL  0x0647             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
05F6: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
05F7: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
05F8: 67       ASR   A                  (0436)     asr   A
05F9: 67       ASR   A                  (0437)     asr   A
05FA: 67       ASR   A                  (0438)     asr   A
05FB: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
05FD: 90 09    CALL  0x0608             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
05FF: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0600: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0602: 40       NOP                      (0443)     nop
0603: 40       NOP                      (0444)     nop
0604: 40       NOP                      (0445)     nop
0605: 90 01    CALL  0x0608             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0607: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0608: 08       PUSH  A                  (0477)     push  A
0609: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
060C: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
060F: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0611: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0613: 18       POP   A                  (0483)     pop   A
0614: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0616: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0618: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
061A: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
061C: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
061E: 40       NOP                      (0489)     nop
061F: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0621: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0623: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0625: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0626: 08       PUSH  A                  (0523)     push  A
0627: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
062A: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
062D: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0630: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0632: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0634: 18       POP   A                  (0530)     pop   A
0635: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0637: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0639: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
063B: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
063D: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
063F: 40       NOP                      (0536)     NOP
0640: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0642: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0644: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0646: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0647: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0648: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
064B: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
064E: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0650: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0652: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0655: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0657: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0659: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
065B: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
065D: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0660: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0662: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0664: 40       NOP                      (0586)     NOP
                                        (0587) 
0665: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0666: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0668: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
066B: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
066D: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
066F: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0670: 40       NOP                      (0597)     nop
0671: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0673: 08       PUSH  A                  (0610)     push  A
0674: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0677: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0679: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
067B: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
067C: 40       NOP                      (0616)     nop                                    ; fastest PSoC
067D: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
067E: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0681: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0683: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0685: 40       NOP                      (0623)     nop
0686: 40       NOP                      (0624)     nop
                                        (0625) 
0687: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
068A: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
068C: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
068E: 18       POP   A                  (0630)     pop   A
068F: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0691: A0 04    JZ    0x0696             (0633)     jz    .UNLOCK
0693: 79       DEC   X                  (0634)     dec   X
0694: BF D3    JNZ   0x0668             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0696: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0697: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
069A: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
069C: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
069E: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
06A0: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
06A2: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
06A3: 7F       RET                      (0646)     ret
06A4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
06A7: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
06AA: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
06AD: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
06B0: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
06B2: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
06B4: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
06B6: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
06B8: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
06BA: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06BC: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06BE: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
06C0: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06C2: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
06C4: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06C6: 9F 40    CALL  0x0608             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
06C8: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06CA: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
06CC: 50 03    MOV   A,0x3              (0707)     mov   A,03h
06CE: 9F 38    CALL  0x0608             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
06D0: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
06D2: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
06D4: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
06D6: 50 03    MOV   A,0x3              (0714)     mov   A,03h
06D8: 9F 2E    CALL  0x0608             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
06DA: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06DC: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
06DE: 50 02    MOV   A,0x2              (0720)     mov   A,02h
06E0: 9F 26    CALL  0x0608             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
06E2: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06E4: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
06E6: 50 08    MOV   A,0x8              (0726)     mov   A,08h
06E8: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
06EA: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06EC: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
06EE: 50 01    MOV   A,0x1              (0731)     mov   A,01h
06F0: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
06F2: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06F4: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
06F6: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06F8: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
06FA: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
06FC: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
06FE: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0700: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0702: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0704: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0706: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0708: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
070A: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
070C: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
070E: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0710: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0712: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0717: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0719: 10       PUSH  X                  (0791)     push  X                            ; Store COL
071A: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
071C: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
071D: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
071F: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0720: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0722: 70 3F    AND   F,0x3F             
0724: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0726: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0727: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0729: 78       DEC   A                  (0828)     dec   A
072A: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
072C: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0735: 08       PUSH  A                  (0871)     push  A
0736: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0738: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
073A: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
073C: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
073E: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0740: D0 06    JNC   0x0747             (0877)     jnc   .Delay50u_End
0742: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0744: 78       DEC   A                  (0880)     dec   A                              ; [4]
0745: BF FE    JNZ   0x0744             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0747: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0748: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadc_1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADC_1INT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC_1.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_1_CNT1_ISR
                                        (0022) export _DUALADC_1_CNT2_ISR
                                        (0023) export _DUALADC_1_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_1_cCounter1U
                                        (0026) export  DUALADC_1_cCounter2U
                                        (0027) export _DUALADC_1_iResult1
                                        (0028) export  DUALADC_1_iResult1
                                        (0029) export _DUALADC_1_iResult2
                                        (0030) export  DUALADC_1_iResult2
                                        (0031) export _DUALADC_1_bfStatus
                                        (0032) export  DUALADC_1_bfStatus
                                        (0033) export  DUALADC_1_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_1_iResult1:
                                        (0044)  DUALADC_1_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_1_iResult2:
                                        (0046)  DUALADC_1_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_1_bfStatus:
                                        (0048)  DUALADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADC_1MaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADC_1MaxPosX4Table:
                                        (0095) IF (DUALADC_1_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_1_CNT1_ISR:
0757: 76 03    INC   [0x3]              (0118)    inc [DUALADC_1_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125) 
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
0759: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _DUALADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0135) ;
                                        (0136) ;
                                        (0137) ;  DESCRIPTION:
                                        (0138) ;  Increment the upper (software) half on the counter whenever the
                                        (0139) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0140) ;  should start out at the most negative value (0xFF).
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) _DUALADC_1_CNT2_ISR:
075A: 76 04    INC   [0x4]              (0145)    inc [DUALADC_1_cCounter2U]
                                        (0146)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0147)    ;---------------------------------------------------
                                        (0148)    ; Insert your custom code below this banner
                                        (0149)    ;---------------------------------------------------
                                        (0150)    ;   NOTE: interrupt service routines must preserve
                                        (0151)    ;   the values of the A and X CPU registers.
                                        (0152) 
                                        (0153)    ;---------------------------------------------------
                                        (0154)    ; Insert your custom code above this banner
                                        (0155)    ;---------------------------------------------------
                                        (0156)    ;@PSoC_UserCode_END@ (Do not change this line.)
075C: 7E       RETI                     (0157)    reti
                                        (0158) 
                                        (0159) 
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;  FUNCTION NAME: _DUALADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0162) ;
                                        (0163) ;  DESCRIPTION:
                                        (0164) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0165) ;  The ADC value is calculated and stored in a global location before
                                        (0166) ;  the end of the ISR.
                                        (0167) ;
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) _DUALADC_1_PWM16_ISR:
075D: 41 43 FE AND   REG[0x43],0xFE     (0171)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
0760: 41 4F FE AND   REG[0x4F],0xFE     (0172)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0173) IF DUALADC_1_NoAZ
0763: 43 92 20 OR    REG[0x92],0x20     (0174)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
0766: 43 9A 20 OR    REG[0x9A],0x20     (0175)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero     ; Put Integrator in AutoZero
                                        (0176) ENDIF
0769: 43 93 10 OR    REG[0x93],0x10     (0177)    or   reg[DUALADC_1_bfADC1cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
076C: 43 9B 10 OR    REG[0x9B],0x10     (0178)    or   reg[DUALADC_1_bfADC2cr3],DUALADC_1_fFSW0           ; Put Integrator in reset
076F: 71 01    OR    F,0x1              
                                        (0179) 
                                        (0180)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0181)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0182)    M8C_EnableGInt
0771: 40       NOP                      (0183)    nop                                                     ; Wait a couple cycles
0772: 70 FE    AND   F,0xFE             
                                        (0184)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0774: 08       PUSH  A                  (0185)    push  A                                                 ; Save the Accumulator
                                        (0186) 
                                        (0187) 
                                        (0188)    ; Get ADC1 result
0775: 5D 40    MOV   A,REG[0x40]        (0189)    mov   A,reg[DUALADC_1_bCount1]                          ; Read counter value  (Bogus read puts value in Period register)
0777: 5D 42    MOV   A,REG[0x42]        (0190)    mov   A,reg[DUALADC_1_bCompare1]                        ; Read counter value
0779: 78       DEC   A                  (0191)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
077A: 73       CPL   A                  (0192)    cpl   A                                                 ; Invert the value
077B: D0 03    JNC   0x077F             (0193)    jnc   DUALADC_1_INT_CALCV1                              ; if carry, then inc MSB as well
077D: 76 03    INC   [0x3]              (0194)    inc   [DUALADC_1_cCounter1U]
                                        (0195) DUALADC_1_INT_CALCV1:
077F: 53 06    MOV   [0x6],A            (0196)    mov   [(DUALADC_1_iResult1 + LowByte)],A                ; Store LSB value
0781: 51 03    MOV   A,[0x3]            (0197)    mov   A, [DUALADC_1_cCounter1U]                         ; Store MSB from temp counter
0783: 53 05    MOV   [0x5],A            (0198)    mov   [(DUALADC_1_iResult1 + HighByte)],A
                                        (0199) 
                                        (0200)    ; Get ADC2 result
0785: 5D 4C    MOV   A,REG[0x4C]        (0201)    mov   A,reg[DUALADC_1_bCount2]                          ; Read counter value  (Bogus read puts value in Period register)
0787: 5D 4E    MOV   A,REG[0x4E]        (0202)    mov   A,reg[DUALADC_1_bCompare2]                        ; Read counter value
0789: 78       DEC   A                  (0203)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
078A: 73       CPL   A                  (0204)    cpl   A                                                 ; Invert the value
078B: D0 03    JNC   0x078F             (0205)    jnc   DUALADC_1_INT_CALCV2                              ; if carry, then inc MSB as well
078D: 76 04    INC   [0x4]              (0206)    inc   [DUALADC_1_cCounter2U]
                                        (0207) DUALADC_1_INT_CALCV2:
078F: 53 08    MOV   [0x8],A            (0208)    mov   [(DUALADC_1_iResult2 + LowByte)],A                ; Store LSB value
0791: 51 04    MOV   A,[0x4]            (0209)    mov   A, [DUALADC_1_cCounter2U]                         ; Store MSB from temp counter
0793: 53 07    MOV   [0x7],A            (0210)    mov   [(DUALADC_1_iResult2 + HighByte)],A
                                        (0211) 
                                        (0212)                                                            ; The new value has been stored,
                                        (0213)                                                            ; so get counters ready for next reading first.
0795: 62 41 FF MOV   REG[0x41],0xFF     (0214)    mov   reg[DUALADC_1_bPeriod1], ffh                      ; Initialize counter1 to FF - Set to overflow after 256 counts
0798: 62 4D FF MOV   REG[0x4D],0xFF     (0215)    mov   reg[DUALADC_1_bPeriod2], ffh                      ; Initialize counter2 to FF - Set to overflow after 256 counts
079B: 43 43 01 OR    REG[0x43],0x1      (0216)    or    reg[DUALADC_1_bCounter1_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter1
079E: 43 4F 01 OR    REG[0x4F],0x1      (0217)    or    reg[DUALADC_1_bCounter2_CR0],DUALADC_1_fDBLK_ENABLE  ; Enable Counter2
                                        (0218) 
                                        (0219) 
                                        (0220) IF (DUALADC_1_DATA_FORMAT)                                 ; Only check for Negative numbers if SIGNED result
                                        (0221)    mov   A, [DUALADC_1_bfStatus]                           ; Get Status with Resolution
                                        (0222)    and   A, DUALADC_1_bRES_MASK                            ; Mask of resolution
                                        (0223)    index DUALADC_1MaxNegX4Table                            ; Get Maximum negative value from table
                                        (0224)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter
                                        (0225)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter
                                        (0226) ELSE
07A1: 55 03 00 MOV   [0x3],0x0          (0227)    mov   [DUALADC_1_cCounter1U], 00h                       ; Place result back into MSB of counter
07A4: 55 04 00 MOV   [0x4],0x0          (0228)    mov   [DUALADC_1_cCounter2U], 00h                       ; Place result back into MSB of counter
                                        (0229) ENDIF
                                        (0230) 
                                        (0231)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0232)    ;---------------------------------------------------
                                        (0233)    ; If the input is muxed with multiple inputs
                                        (0234)    ; this is a good place to change inputs.
                                        (0235)    ; Insert your custom code below this banner
                                        (0236)    ;---------------------------------------------------
                                        (0237)    ;   NOTE: interrupt service routines must preserve
                                        (0238)    ;   the values of the A and X CPU registers. At this
                                        (0239)    ;   point A has been preserved on the stack and will
                                        (0240)    ;   be restored before the return from interrupt.
                                        (0241)    ;   However, if you use the X register, you must
                                        (0242)    ;   preserve its value and restore it here.
                                        (0243) 
                                        (0244) 
                                        (0245)    ;---------------------------------------------------
                                        (0246)    ; Insert your custom code above this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0249) 
07A7: 41 93 EF AND   REG[0x93],0xEF     (0250)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
07AA: 41 9B EF AND   REG[0x9B],0xEF     (0251)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0252) IF DUALADC_1_NoAZ
07AD: 41 92 DF AND   REG[0x92],0xDF     (0253)    and   reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
07B0: 41 9A DF AND   REG[0x9A],0xDF     (0254)    and   reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0255) ENDIF
                                        (0256) 
                                        (0257) 
                                        (0258)    ;****************************************************************************
                                        (0259)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0260)    ;                          ; if stack space isn't at a premium.
                                        (0261)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0262)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0263)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0264)    ;        successful acquisition of the next byte.
                                        (0265)    ;****************************************************************************
                                        (0266) 
                                        (0267) ; ADC1
                                        (0268) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0269)                                                  ; Negative Overflow Check
                                        (0270)    tst   [(DUALADC_1_iResult1 + HighByte)],80h
                                        (0271)    jnz   DUALADC_1_NOT_2POVFL1
                                        (0272) 
                                        (0273) ENDIF
                                        (0274)                                                  ; Postive Overflow Check
                                        (0275)                                                  ; Get MSB of Max Positive value x4 + 1
07B3: 51 09    MOV   A,[0x9]            (0276)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
07B5: 21 0F    AND   A,0xF              (0277)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
07B7: FF 97    INDEX 0x0750             (0278)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
07B9: 08       PUSH  A                  (0279)    push  A
07BA: 22 05    AND   A,[0x5]            (0280)    and   A, [(DUALADC_1_iResult1 + HighByte)]
07BC: A0 0B    JZ    0x07C8             (0281)    jz    DUALADC_1_NOT_POVFL1
                                        (0282)                                                  ; Positive overflow, fix it - set to Max Positive + 1
07BE: 18       POP   A                  (0283)    pop   A
07BF: 11 01    SUB   A,0x1              (0284)    sub   A, 01h
                                        (0285)                                                  ; Force most positive * 4 into result
07C1: 53 05    MOV   [0x5],A            (0286)    mov   [(DUALADC_1_iResult1 + HighByte)], A
07C3: 55 06 FF MOV   [0x6],0xFF         (0287)    mov   [(DUALADC_1_iResult1 + LowByte)], ffh
07C6: 80 02    JMP   0x07C9             (0288)    jmp   DUALADC_1_NOT_2POVFL1
                                        (0289) DUALADC_1_NOT_POVFL1:
07C8: 18       POP   A                  (0290)    pop   A
                                        (0291) 
                                        (0292) DUALADC_1_NOT_2POVFL1:
07C9: 68 05    ASR   [0x5]              (0293)    asr   [(DUALADC_1_iResult1 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
07CB: 6E 06    RRC   [0x6]              (0294)    rrc   [(DUALADC_1_iResult1 + LowByte)]        ; Remember digital clock 4 times analog clock
07CD: 68 05    ASR   [0x5]              (0295)    asr   [(DUALADC_1_iResult1 + HighByte)]
07CF: 6E 06    RRC   [0x6]              (0296)    rrc   [(DUALADC_1_iResult1 + LowByte)]
                                        (0297) 
                                        (0298) ; ADC2
                                        (0299) IF (DUALADC_1_DATA_FORMAT)                       ; Only check for Negative numbers if SIGNED result
                                        (0300)                                                  ; Negative Overflow Check
                                        (0301)    tst   [(DUALADC_1_iResult2 + HighByte)],80h
                                        (0302)    jnz   DUALADC_1_NOT_2POVFL2
                                        (0303) 
                                        (0304) ENDIF
                                        (0305)                                                  ; Postive Overflow Check
                                        (0306)                                                  ; Get MSB of Max Positive value x4 + 1
07D1: 51 09    MOV   A,[0x9]            (0307)    mov   A,[DUALADC_1_bfStatus]                  ; Get Status with Resolution
07D3: 21 0F    AND   A,0xF              (0308)    and   A,DUALADC_1_bRES_MASK                   ; Mask of resolution normalized to 0
07D5: FF 79    INDEX 0x0750             (0309)    index DUALADC_1MaxPosX4Table                  ; Get Maximum positive value x4 + 1 from table
07D7: 08       PUSH  A                  (0310)    push  A
07D8: 22 07    AND   A,[0x7]            (0311)    and   A, [(DUALADC_1_iResult2 + HighByte)]
07DA: A0 0B    JZ    0x07E6             (0312)    jz    DUALADC_1_NOT_POVFL2
                                        (0313)                                                  ; Positive overflow, fix it - set to Max Positive + 1
07DC: 18       POP   A                  (0314)    pop   A
07DD: 11 01    SUB   A,0x1              (0315)    sub   A, 01h
                                        (0316)                                                  ; Force most positive * 4 into result
07DF: 53 07    MOV   [0x7],A            (0317)    mov   [(DUALADC_1_iResult2 + HighByte)], A
07E1: 55 08 FF MOV   [0x8],0xFF         (0318)    mov   [(DUALADC_1_iResult2 + LowByte)], ffh
07E4: 80 02    JMP   0x07E7             (0319)    jmp   DUALADC_1_NOT_2POVFL2
                                        (0320) DUALADC_1_NOT_POVFL2:
07E6: 18       POP   A                  (0321)    pop   A
                                        (0322) 
                                        (0323) DUALADC_1_NOT_2POVFL2:
07E7: 68 07    ASR   [0x7]              (0324)    asr   [(DUALADC_1_iResult2 + HighByte)]       ; Shift MSB and LSB right twice to divide by four
07E9: 6E 08    RRC   [0x8]              (0325)    rrc   [(DUALADC_1_iResult2 + LowByte)]        ; Remember digital clock 4 times analog clock
07EB: 68 07    ASR   [0x7]              (0326)    asr   [(DUALADC_1_iResult2 + HighByte)]
07ED: 6E 08    RRC   [0x8]              (0327)    rrc   [(DUALADC_1_iResult2 + LowByte)]
                                        (0328) 
                                        (0329)    ;**********************************************
                                        (0330)    ; Data is ready at this point.
                                        (0331)    ; If processing Data at Interrupt level - add
                                        (0332)    ;     User Code to handle the data
                                        (0333)    ;**********************************************
                                        (0334)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0335)    ;---------------------------------------------------
                                        (0336)    ; Insert your custom code below this banner
                                        (0337)    ;---------------------------------------------------
                                        (0338)    ;   NOTE: interrupt service routines must preserve
                                        (0339)    ;   the values of the A and X CPU registers. At this
                                        (0340)    ;   point A has been preserved on the stack and wil
                                        (0341)    ;   be restored later. However, if you use X, be
                                        (0342)    ;   sure to take care of it yourself!
                                        (0343) 
                                        (0344) 
                                        (0345)    ;---------------------------------------------------
                                        (0346)    ; Insert your custom code above this banner
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0349) 
07EF: 18       POP   A                  (0350)    pop   A                                       ; Restore A, not used any more
                                        (0351) 
07F0: 2E 09 10 OR    [0x9],0x10         (0352)    or    [DUALADC_1_bfStatus],DUALADC_1_fDATA_READY  ; Set Data ready bit
                                        (0353) 
07F3: 47 0A FF TST   [0xA],0xFF         (0354)    tst   [DUALADC_1_bSampC], ffh                 ; If sample_counter == 0 -->> continuous data collection
07F6: A0 23    JZ    0x081A             (0355)    jz    DUALADC_1_END_PWM16_ISR
                                        (0356) 
07F8: 7A 0A    DEC   [0xA]              (0357)    dec   [DUALADC_1_bSampC]                      ; Dec sample counter and check for zero
07FA: B0 1F    JNZ   0x081A             (0358)    jnz   DUALADC_1_END_PWM16_ISR
                                        (0359) 
07FC: 41 47 FE AND   REG[0x47],0xFE     (0360)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0361) 
07FF: 41 43 FE AND   REG[0x43],0xFE     (0362)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0802: 41 4F FE AND   REG[0x4F],0xFE     (0363)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0364) 
                                        (0365) IF DUALADC_1_NoAZ
0805: 43 92 20 OR    REG[0x92],0x20     (0366)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
0808: 43 9A 20 OR    REG[0x9A],0x20     (0367)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0368) ENDIF
                                        (0369) 
080B: 43 93 10 OR    REG[0x93],0x10     (0370)    or    reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
080E: 43 9B 10 OR    REG[0x9B],0x10     (0371)    or    reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0             ; Put Integrator into reset
                                        (0372) 
0811: 41 DF FB AND   REG[0xDF],0xFB     (0373)    and   reg[DUALADC_1_bfPWM16_INT_REG], ~DUALADC_1_bfPWM16_Mask      ; Disable interrupts
0814: 41 DF FE AND   REG[0xDF],0xFE     (0374)    and   reg[DUALADC_1_bfCounter1_INT_REG], ~DUALADC_1_bfCounter1_Mask
0817: 41 DF F7 AND   REG[0xDF],0xF7     (0375)    and   reg[DUALADC_1_bfCounter2_INT_REG], ~DUALADC_1_bfCounter2_Mask
                                        (0376) 
                                        (0377) DUALADC_1_END_PWM16_ISR:
081A: 7E       RETI                     (0378)    reti
                                        (0379) 
                                        (0380) DUALADC_1_APIINT_END:
FILE: lib\dualadc_1.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
081B: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  DUALADC_1.asm
                                        (0004) ;;  Version: 2.30, Updated on 2015/3/4 at 22:26:9
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC_1.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_1_Start
                                        (0030) export _DUALADC_1_Start
                                        (0031) export  DUALADC_1_SetPower
                                        (0032) export _DUALADC_1_SetPower
                                        (0033) export  DUALADC_1_Stop
                                        (0034) export _DUALADC_1_Stop
                                        (0035) export  DUALADC_1_GetSamples
                                        (0036) export _DUALADC_1_GetSamples
                                        (0037) export  DUALADC_1_StopAD
                                        (0038) export _DUALADC_1_StopAD
                                        (0039) export  DUALADC_1_fIsData
                                        (0040) export _DUALADC_1_fIsData
                                        (0041) export  DUALADC_1_fIsDataAvailable
                                        (0042) export _DUALADC_1_fIsDataAvailable
                                        (0043) export  DUALADC_1_iGetData1
                                        (0044) export _DUALADC_1_iGetData1
                                        (0045) export  DUALADC_1_iGetData2
                                        (0046) export _DUALADC_1_iGetData2
                                        (0047) export  DUALADC_1_ClearFlag
                                        (0048) export _DUALADC_1_ClearFlag
                                        (0049) export  DUALADC_1_iGetData1ClearFlag
                                        (0050) export _DUALADC_1_iGetData1ClearFlag
                                        (0051) export  DUALADC_1_iGetData2ClearFlag
                                        (0052) export _DUALADC_1_iGetData2ClearFlag
                                        (0053) export  DUALADC_1_SetResolution
                                        (0054) export _DUALADC_1_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_1_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_1_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_1_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_1_Start:
                                        (0097) _DUALADC_1_Start:
                                        (0098)  DUALADC_1_SetPower:
                                        (0099) _DUALADC_1_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
                                        (0103) 
081E: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_1_bfPOWERMASK                     ; Mask only the valid power setting bits
0820: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0821: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0822: 5D 93    MOV   A,REG[0x93]        (0109)    mov   A, reg[DUALADC_1_bfADC1cr3]                 ; Get current value of ADC1cr3
0824: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0826: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0828: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
082A: 60 93    MOV   REG[0x93],A        (0113)    mov   reg[DUALADC_1_bfADC1cr3], A                 ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
082C: 5D 9B    MOV   A,REG[0x9B]        (0116)    mov   A, reg[DUALADC_1_bfADC2cr3]                 ; Get current value of ADC2cr3
082E: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_1_bfPOWERMASK                   ; Mask off old power value
0830: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0832: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0834: 60 9B    MOV   REG[0x9B],A        (0120)    mov   reg[DUALADC_1_bfADC2cr3], A                 ; Reload CR with new power value
                                        (0121) 
0836: 49 92 01 TST   REG[0x92],0x1      (0122)    tst   reg[DUALADC_1_bfADC1cr2], DUALADC_1_fRES_SET
0839: A0 05    JZ    0x083F             (0123)    jz    .DoNotLoadRes
083B: 50 00    MOV   A,0x0              (0124)    mov   A,DUALADC_1_bNUMBITS - DUALADC_1_bMINRES               ; get and set the resolution
083D: 53 09    MOV   [0x9],A            (0125)    mov   [DUALADC_1_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
083F: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
0840: 70 3F    AND   F,0x3F             
0842: 71 C0    OR    F,0xC0             
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
0844: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_1_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_1_Stop:
                                        (0156) _DUALADC_1_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
0845: 41 93 FC AND   REG[0x93],0xFC     (0158)    and   reg[DUALADC_1_bfADC1cr3], ~DUALADC_1_bfPOWERMASK
0848: 41 9B FC AND   REG[0x9B],0xFC     (0159)    and   reg[DUALADC_1_bfADC2cr3], ~DUALADC_1_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
084B: 7F       RET                      (0161)    ret
084C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_1_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_1_GetSamples:
                                        (0191) _DUALADC_1_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_1_bSampC
084F: 53 0A    MOV   [0xA],A            (0194)    mov   [DUALADC_1_bSampC], A                             ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
0851: 51 09    MOV   A,[0x9]            (0196)    mov   A,[DUALADC_1_bfStatus]                            ; get and set the resolution
0853: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_1_bRES_MASK
0855: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_1_bMINRES
0857: 90 8C    CALL  _DUALADC_1_SetResolution(0199)    call  DUALADC_1_SetResolution
                                        (0200) 
                                        (0201) DUALADC_1_LoadMSBCounter:                                  ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0859: 5D 4A    MOV   A,REG[0x4A]        (0205)    mov   A,reg[DUALADC_1_bPWM_IntTime_MSB]                 ; Get MSB of PWM and move it into RAM
085B: 53 03    MOV   [0x3],A            (0206)    mov   [DUALADC_1_cCounter1U], A                         ; Use counter as temp location
085D: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
085F: 12 03    SUB   A,[0x3]            (0208)    sub   A, [DUALADC_1_cCounter1U]                         ; 0 - MSB_PWM = MSB_of_most_neg_value
0861: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_1_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_1_cCounter1U], A                         ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_1_cCounter2U], A                         ; Place result back into MSB of counter2
                                        (0213) ELSE
0862: 55 03 00 MOV   [0x3],0x0          (0214)    mov   [DUALADC_1_cCounter1U], 00h                       ; Always start at zero for unsigned values for ADC1
0865: 55 04 00 MOV   [0x4],0x0          (0215)    mov   [DUALADC_1_cCounter2U], 00h                       ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
0868: 5D 46    MOV   A,REG[0x46]        (0217)    mov   A, reg[DUALADC_1_bPWM_IntTime_LSB]                ; Dummy Read  - required do not remove
086A: 62 41 FF MOV   REG[0x41],0xFF     (0218)    mov   reg[DUALADC_1_bPeriod1], FFh                      ; Make sure counter1 starts at FF
086D: 62 4D FF MOV   REG[0x4D],0xFF     (0219)    mov   reg[DUALADC_1_bPeriod2], FFh                      ; Make sure counter2 starts at FF
                                        (0220) 
0870: 41 93 EF AND   REG[0x93],0xEF     (0221)    and   reg[DUALADC_1_bfADC1cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
0873: 41 9B EF AND   REG[0x9B],0xEF     (0222)    and   reg[DUALADC_1_bfADC2cr3],~DUALADC_1_fFSW0         ; Take Integrator out of reset
                                        (0223) IF DUALADC_1_NoAZ
0876: 41 92 DF AND   REG[0x92],0xDF     (0224)     and  reg[DUALADC_1_bfADC1cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
0879: 41 9A DF AND   REG[0x9A],0xDF     (0225)     and  reg[DUALADC_1_bfADC2cr2],~DUALADC_1_fAutoZero     ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
087C: 43 43 05 OR    REG[0x43],0x5      (0228)    or    reg[DUALADC_1_bCounter1_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
087F: 43 4F 05 OR    REG[0x4F],0x5      (0229)    or    reg[DUALADC_1_bCounter2_CR0], (DUALADC_1_fDBLK_ENABLE|DUALADC_1_fPULSE_WIDE)   ; Enable the Counter
0882: 43 47 01 OR    REG[0x47],0x1      (0230)    or    reg[DUALADC_1_fPWM_LSB_CR0], DUALADC_1_fDBLK_ENABLE          ; Enable PWM
0885: 43 DF 04 OR    REG[0xDF],0x4      (0231)    or    reg[DUALADC_1_bfPWM16_INT_REG], DUALADC_1_bfPWM16_Mask      ; Enable PWM and Counter interrupts
0888: 43 DF 01 OR    REG[0xDF],0x1      (0232)    or    reg[DUALADC_1_bfCounter1_INT_REG], DUALADC_1_bfCounter1_Mask
088B: 43 DF 08 OR    REG[0xDF],0x8      (0233)    or    reg[DUALADC_1_bfCounter2_INT_REG], DUALADC_1_bfCounter2_Mask
                                        (0234) 
088E: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_1_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_1_StopAD:
                                        (0261) _DUALADC_1_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
088F: 41 47 FE AND   REG[0x47],0xFE     (0263)    and   reg[DUALADC_1_fPWM_LSB_CR0], ~DUALADC_1_fDBLK_ENABLE     ; Disable the PWM
                                        (0264) 
0892: 41 43 FE AND   REG[0x43],0xFE     (0265)    and   reg[DUALADC_1_bCounter1_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
0895: 41 4F FE AND   REG[0x4F],0xFE     (0266)    and   reg[DUALADC_1_bCounter2_CR0], ~DUALADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_1_NoAZ
0898: 43 92 20 OR    REG[0x92],0x20     (0269)    or    reg[DUALADC_1_bfADC1cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
089B: 43 9A 20 OR    REG[0x9A],0x20     (0270)    or    reg[DUALADC_1_bfADC2cr2], DUALADC_1_fAutoZero         ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
089E: 43 93 10 OR    REG[0x93],0x10     (0273)    or   reg[DUALADC_1_bfADC1cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
08A1: 43 9B 10 OR    REG[0x9B],0x10     (0274)    or   reg[DUALADC_1_bfADC2cr3], DUALADC_1_fFSW0              ; Put Integrator into reset
                                        (0275) 
08A4: 08       PUSH  A                  (0276)    push A
08A5: 41 DF FB AND   REG[0xDF],0xFB     
08A8: 41 DF FE AND   REG[0xDF],0xFE     
08AB: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0277)    M8C_DisableIntMask DUALADC_1_bfPWM16_INT_REG, DUALADC_1_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_1_bfCounter1_INT_REG, DUALADC_1_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_1_bfCounter2_INT_REG, DUALADC_1_bfCounter1_Mask
08AE: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
08AF: 7F       RET                      (0283)    ret
08B0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_1_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_1_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_1_fIsData:
                                        (0314) _DUALADC_1_fIsData:
                                        (0315)  DUALADC_1_fIsDataAvailable:
                                        (0316) _DUALADC_1_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus
08B3: 51 09    MOV   A,[0x9]            (0319)    mov   A, [DUALADC_1_bfStatus]                      ; Get status byte
08B5: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_1_fDATA_READY                     ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
08B7: 7F       RET                      (0322)    ret
08B8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_1_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_1_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_1_iGetData1ClearFlag:
                                        (0353) _DUALADC_1_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_1_iResult1 
08BB: 26 09 EF AND   [0x9],0xEF         (0356)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
08BE: 58 05    MOV   X,[0x5]            (0357)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
08C0: 51 06    MOV   A,[0x6]            (0358)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
08C2: 7F       RET                      (0360)    ret
08C3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0361) 
                                        (0362)  DUALADC_1_iGetData1:
                                        (0363) _DUALADC_1_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08C6: 58 05    MOV   X,[0x5]            (0366)    mov   X, [(DUALADC_1_iResult1 + HighByte)]
08C8: 51 06    MOV   A,[0x6]            (0367)    mov   A, [(DUALADC_1_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
08CA: 7F       RET                      (0369)    ret
08CB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_1_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_1_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_1_iGetData2ClearFlag:
                                        (0400) _DUALADC_1_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08CE: 26 09 EF AND   [0x9],0xEF         (0403)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
08D1: 58 07    MOV   X,[0x7]            (0404)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
08D3: 51 08    MOV   A,[0x8]            (0405)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
08D5: 7F       RET                      (0407)    ret
08D6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0408) 
                                        (0409)  DUALADC_1_iGetData2:
                                        (0410) _DUALADC_1_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_1_iResult1  
08D9: 58 07    MOV   X,[0x7]            (0413)    mov   X, [(DUALADC_1_iResult2 + HighByte)]
08DB: 51 08    MOV   A,[0x8]            (0414)    mov   A, [(DUALADC_1_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
08DD: 7F       RET                      (0416)    ret
08DE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_1_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_1_ClearFlag:
                                        (0443) _DUALADC_1_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
08E1: 26 09 EF AND   [0x9],0xEF         (0446)    and   [DUALADC_1_bfStatus], ~DUALADC_1_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
08E4: 7F       RET                      (0448)    ret
08E5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_1_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_1_SetResolution:
                                        (0481) _DUALADC_1_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_1_bfStatus  
                                        (0484) 
08E8: 41 92 FE AND   REG[0x92],0xFE     (0485)    and   reg[DUALADC_1_bfADC1cr2], ~DUALADC_1_fRES_SET
                                        (0486)    
08EB: 9F A2    CALL  _DUALADC_1_StopAD  (0487)    call  DUALADC_1_StopAD                          ; Stop the A/D if it is running
08ED: 55 09 00 MOV   [0x9],0x0          (0488)    mov   [DUALADC_1_bfStatus], 00h                 ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
08F0: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_1_bMINRES                       ; Check low end of resolution
08F2: D0 05    JNC   0x08F8             (0492)    jnc   DUALADC_1_CHECKHI
08F4: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_1_bMINRES                       ; Too low - load legal low value
08F6: 80 07    JMP   0x08FE             (0494)    jmp   DUALADC_1_RES_OK
                                        (0495) 
                                        (0496) DUALADC_1_CHECKHI:                                 ; Check high end of resolution
08F8: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_1_bMAXRES
08FA: C0 03    JC    0x08FE             (0498)    jc    DUALADC_1_RES_OK
08FC: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_1_bMAXRES                       ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_1_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
08FE: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_1_bMINRES                      ; Normalize with min resolution
0900: 2C 09    OR    [0x9],A            (0505)    or    [DUALADC_1_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
0902: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
0904: 5C       MOV   X,A                (0509)    mov   X,A
0905: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_1_CALC_INTTIME:                            ; Now shift the MSB left for every bit of resolution of min (7).
0907: 64       ASL   A                  (0513)    asl   A
0908: 79       DEC   X                  (0514)    dec   X
0909: BF FD    JNZ   0x0907             (0515)    jnz   DUALADC_1_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_1_LOAD_INTTIME:                            ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
090B: 62 46 00 MOV   REG[0x46],0x0      (0519)    mov   reg[DUALADC_1_bPWM_IntTime_LSB], 00h
090E: 60 4A    MOV   REG[0x4A],A        (0520)    mov   reg[DUALADC_1_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
0910: 62 45 58 MOV   REG[0x45],0x58     (0523)    mov   reg[DUALADC_1_bPWM_Period_LSB], <wCalcTime
0913: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
0915: 60 49    MOV   REG[0x49],A        (0525)    mov   reg[DUALADC_1_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
0917: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC_1.asm
FILE: .\main.asm                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;inititalize index page
                                        (0004) ;-----------------------------------------------------------------------------
                                        (0005) 
                                        (0006) include "m8c.inc"       ; part specific constants and macros
                                        (0007) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0008) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0009) include "program_defines.inc"
                                        (0010) 
                                        (0011) 
                                        (0012) export _main
                                        (0013) export addr_internal_inc_ms
                                        (0014) export addr_inc_ms
                                        (0015) export addr_inc_s
                                        (0016) export addr_inc_m
                                        (0017) export addr_inc_h
                                        (0018) 
                                        (0019) export read_addr_inc_ms
                                        (0020) export read_addr_inc_s
                                        (0021) export read_addr_inc_m
                                        (0022) export read_addr_inc_h
                                        (0023) 
                                        (0024) export addr_lng_p
                                        (0025) export addr_shrt_p
                                        (0026) 
                                        (0027) export addr_acc_mode
                                        (0028) 
                                        (0029) export md_flg
                                        (0030) 
                                        (0031) export count_saved
                                        (0032) export read_saved
                                        (0033) export save_time_index
                                        (0034) 
                                        (0035) export iResult1
                                        (0036) 
                                        (0037) 
                                        (0038) 
                                        (0039) 
                                        (0040) 
                                        (0041) area var(RAM)                     
                                        (0042) addr_internal_inc_ms: 	blk 1
                                        (0043) addr_inc_ms: 			blk 1
                                        (0044) addr_inc_s: 			blk 1
                                        (0045) addr_inc_m: 			blk 1
                                        (0046) addr_inc_h: 			blk 1
                                        (0047) 
                                        (0048) read_addr_inc_ms: 		blk 1
                                        (0049) read_addr_inc_s: 		blk 1
                                        (0050) read_addr_inc_m: 		blk 1
                                        (0051) read_addr_inc_h: 		blk 1
                                        (0052) 
                                        (0053) addr_lng_p: 			blk 1
                                        (0054) addr_shrt_p: 			blk 1
                                        (0055) 
                                        (0056) addr_acc_mode: 			blk 1
                                        (0057) 
                                        (0058) md_flg: 				blk 1
                                        (0059) 
                                        (0060) count_saved:			blk 1
                                        (0061) read_saved: 			blk 1
                                        (0062) save_time_index:		blk 1
                                        (0063) 
                                        (0064) iResult1:       		blk 2
                                        (0065) 
                                        (0066) 
                                        (0067) area text(ROM,REL)
                                        (0068) ;export time_counter
                                        (0069) _main:
                                        (0070) 
                                        (0071) ;==================================================
                                        (0072) ;DUMMY VALUES
                                        (0073) ;==================================================
                                        (0074) 
                                        (0075) 
0918: 62 D5 06 MOV   REG[0xD5],0x6      (0076) mov reg[MVW_PP],06
                                        (0077) ;1st
091B: 55 00 00 MOV   [0x0],0x0          (0078) mov [00h],00h
091E: 50 20    MOV   A,0x20             (0079) mov A,20h
0920: 3F 00    MVI   [0x0],A            (0080) mvi [00h],A		;milli-seconds
0922: 50 30    MOV   A,0x30             (0081) mov A,30h
0924: 3F 00    MVI   [0x0],A            (0082) mvi [00h],A		;seconds
0926: 50 10    MOV   A,0x10             (0083) mov A,10h
0928: 3F 00    MVI   [0x0],A            (0084) mvi [00h],A		;minutes	
092A: 50 02    MOV   A,0x2              (0085) mov A,02h
092C: 3F 00    MVI   [0x0],A            (0086) mvi [00h],A		;hours
                                        (0087) ;2nd
092E: 50 10    MOV   A,0x10             (0088) mov A,10h
0930: 3F 00    MVI   [0x0],A            (0089) mvi [00h],A
0932: 50 3B    MOV   A,0x3B             (0090) mov A,3Bh
0934: 3F 00    MVI   [0x0],A            (0091) mvi [00h],A
0936: 50 20    MOV   A,0x20             (0092) mov A,20h
0938: 3F 00    MVI   [0x0],A            (0093) mvi [00h],A
093A: 50 07    MOV   A,0x7              (0094) mov A,07h
093C: 3F 00    MVI   [0x0],A            (0095) mvi [00h],A
                                        (0096) ;3rd
093E: 50 20    MOV   A,0x20             (0097) mov A,20h
0940: 3F 00    MVI   [0x0],A            (0098) mvi [00h],A
0942: 50 30    MOV   A,0x30             (0099) mov A,30h
0944: 3F 00    MVI   [0x0],A            (0100) mvi [00h],A
0946: 50 10    MOV   A,0x10             (0101) mov A,10h
0948: 3F 00    MVI   [0x0],A            (0102) mvi [00h],A
094A: 50 02    MOV   A,0x2              (0103) mov A,02h
094C: 3F 00    MVI   [0x0],A            (0104) mvi [00h],A
                                        (0105) ;4th
094E: 50 10    MOV   A,0x10             (0106) mov A,10h
0950: 3F 00    MVI   [0x0],A            (0107) mvi [00h],A
0952: 50 3B    MOV   A,0x3B             (0108) mov A,3Bh
0954: 3F 00    MVI   [0x0],A            (0109) mvi [00h],A
0956: 50 20    MOV   A,0x20             (0110) mov A,20h
0958: 3F 00    MVI   [0x0],A            (0111) mvi [00h],A
095A: 50 07    MOV   A,0x7              (0112) mov A,07h
095C: 3F 00    MVI   [0x0],A            (0113) mvi [00h],A
                                        (0114) ;5th
095E: 50 20    MOV   A,0x20             (0115) mov A,20h
0960: 3F 00    MVI   [0x0],A            (0116) mvi [00h],A
0962: 50 30    MOV   A,0x30             (0117) mov A,30h
0964: 3F 00    MVI   [0x0],A            (0118) mvi [00h],A
0966: 50 10    MOV   A,0x10             (0119) mov A,10h
0968: 3F 00    MVI   [0x0],A            (0120) mvi [00h],A
096A: 50 02    MOV   A,0x2              (0121) mov A,02h
096C: 3F 00    MVI   [0x0],A            (0122) mvi [00h],A
                                        (0123) ;6th
096E: 50 10    MOV   A,0x10             (0124) mov A,10h
0970: 3F 00    MVI   [0x0],A            (0125) mvi [00h],A
0972: 50 3B    MOV   A,0x3B             (0126) mov A,3Bh
0974: 3F 00    MVI   [0x0],A            (0127) mvi [00h],A
0976: 50 20    MOV   A,0x20             (0128) mov A,20h
0978: 3F 00    MVI   [0x0],A            (0129) mvi [00h],A
097A: 50 07    MOV   A,0x7              (0130) mov A,07h
097C: 3F 00    MVI   [0x0],A            (0131) mvi [00h],A
                                        (0132) ;7th
097E: 50 20    MOV   A,0x20             (0133) mov A,20h
0980: 3F 00    MVI   [0x0],A            (0134) mvi [00h],A
0982: 50 30    MOV   A,0x30             (0135) mov A,30h
0984: 3F 00    MVI   [0x0],A            (0136) mvi [00h],A
0986: 50 10    MOV   A,0x10             (0137) mov A,10h
0988: 3F 00    MVI   [0x0],A            (0138) mvi [00h],A
098A: 50 02    MOV   A,0x2              (0139) mov A,02h
098C: 3F 00    MVI   [0x0],A            (0140) mvi [00h],A
                                        (0141) ;8th
098E: 50 10    MOV   A,0x10             (0142) mov A,10h
0990: 3F 00    MVI   [0x0],A            (0143) mvi [00h],A
0992: 50 3B    MOV   A,0x3B             (0144) mov A,3Bh
0994: 3F 00    MVI   [0x0],A            (0145) mvi [00h],A
0996: 50 20    MOV   A,0x20             (0146) mov A,20h
0998: 3F 00    MVI   [0x0],A            (0147) mvi [00h],A
099A: 50 07    MOV   A,0x7              (0148) mov A,07h
099C: 3F 00    MVI   [0x0],A            (0149) mvi [00h],A
                                        (0150) ;9th
099E: 50 20    MOV   A,0x20             (0151) mov A,20h
09A0: 3F 00    MVI   [0x0],A            (0152) mvi [00h],A
09A2: 50 30    MOV   A,0x30             (0153) mov A,30h
09A4: 3F 00    MVI   [0x0],A            (0154) mvi [00h],A
09A6: 50 10    MOV   A,0x10             (0155) mov A,10h
09A8: 3F 00    MVI   [0x0],A            (0156) mvi [00h],A
09AA: 50 02    MOV   A,0x2              (0157) mov A,02h
09AC: 3F 00    MVI   [0x0],A            (0158) mvi [00h],A
                                        (0159) ;10th
09AE: 50 10    MOV   A,0x10             (0160) mov A,10h
09B0: 3F 00    MVI   [0x0],A            (0161) mvi [00h],A
09B2: 50 3B    MOV   A,0x3B             (0162) mov A,3Bh
09B4: 3F 00    MVI   [0x0],A            (0163) mvi [00h],A
09B6: 50 20    MOV   A,0x20             (0164) mov A,20h
09B8: 3F 00    MVI   [0x0],A            (0165) mvi [00h],A
09BA: 50 07    MOV   A,0x7              (0166) mov A,07h
09BC: 3F 00    MVI   [0x0],A            (0167) mvi [00h],A
                                        (0168) 
09BE: 62 D0 00 MOV   REG[0xD0],0x0      (0169) mov reg[CUR_PP],00
                                        (0170) 
                                        (0171) 
09C1: 9C E1    CALL  _LCD_Init|_LCD_Start|LCD_Start(0172)  	call LCD_Start
09C3: 43 E1 02 OR    REG[0xE1],0x2      
09C6: 43 E0 20 OR    REG[0xE0],0x20     
09C9: 71 01    OR    F,0x1              
                                        (0173) 
                                        (0174) 
                                        (0175) Initialize_Interrupt:
                                        (0176) 	M8C_EnableIntMask INT_MSK1, INT_MSK1_DBB01					;enable digital block one interrupt
                                        (0177) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO 					;enable GPIO Interrupt Mask
                                        (0178) 	M8C_EnableGInt	;enable global interrupts
                                        (0179) 
                                        (0180) Initialize_Variables:
09CB: 55 0B 00 MOV   [0xB],0x0          (0181) 	mov [addr_internal_inc_ms],00h
09CE: 55 0C 00 MOV   [0xC],0x0          (0182) 	mov [addr_inc_ms],00h
09D1: 55 0D 00 MOV   [0xD],0x0          (0183) 	mov [addr_inc_s],00h
09D4: 55 0E 00 MOV   [0xE],0x0          (0184) 	mov [addr_inc_m],00h
09D7: 55 0F 00 MOV   [0xF],0x0          (0185) 	mov [addr_inc_h],00h
09DA: 55 17 01 MOV   [0x17],0x1         (0186) 	mov [md_flg],01h
                                        (0187) 
                                        (0188) Set_Up_Anolog:
09DD: 50 03    MOV   A,0x3              (0189) 	mov   A, PGA_1_HIGHPOWER
09DF: 7C 04 C5 LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_Start(0190)     lcall PGA_1_Start		;offset
                                        (0191) 	
09E2: 50 03    MOV   A,0x3              (0192) 	mov   A, PGA_2_HIGHPOWER 
09E4: 7C 04 85 LCALL _PGA_2_SetPower|PGA_2_Start|PGA_2_SetPower|_PGA_2_Start(0193)     lcall PGA_2_Start
                                        (0194) 	
09E7: 50 03    MOV   A,0x3              (0195)     mov   A, LPF2_1_HIGHPOWER
09E9: 7C 05 05 LCALL _LPF2_1_Start|_LPF2_1_SetPower|LPF2_1_SetPower(0196)     lcall LPF2_1_Start
                                        (0197) 	
09EC: 50 07    MOV   A,0x7              (0198)     mov   A, 7                    ; Set resolution to 7 Bits -- I think this gets set in GUI? LS
09EE: 9E F5    CALL  _DUALADC_1_SetResolution(0199)     call  DUALADC_1_SetResolution
                                        (0200) 
09F0: 50 03    MOV   A,0x3              (0201)     mov   A, DUALADC_1_HIGHPOWER     ; Set Power and Enable A/D
09F2: 9E 27    CALL  DUALADC_1_SetPower|_DUALADC_1_Start|DUALADC_1_Start|_DUALADC_1_SetPower(0202)     call  DUALADC_1_Start
                                        (0203) 
09F4: 50 00    MOV   A,0x0              (0204)     mov   A, 00h                   ; Start A/D in continuous sampling mode - or put 20 to get 20 cycles in A
09F6: 9E 54    CALL  _DUALADC_1_GetSamples(0205)     call  DUALADC_1_GetSamples
                                        (0206) 	
                                        (0207) 	
09F8: 7C 04 2D LCALL _Timer16_1_Start   (0208) 	lcall Timer16_1_Start
                                        (0209) 	
09FB: 62 D5 06 MOV   REG[0xD5],0x6      (0210) 	mov reg[MVW_PP], 6				;writing on memory page 6
09FE: 62 D4 06 MOV   REG[0xD4],0x6      (0211) 	mov reg[MVR_PP], 6				;reading from memory page 6
                                        (0212) 
                                        (0213) 	
                                        (0214) loop:
                                        (0215) 
0A01: 50 01    MOV   A,0x1              (0216) 	mov A, 01h
0A03: 57 00    MOV   X,0x0              (0217) 	mov X, 00h
0A05: 9D 10    CALL  _LCD_Position      (0218) 	call LCD_Position
0A07: 51 15    MOV   A,[0x15]           (0219) 	mov A, [addr_shrt_p]
0A09: 9B A9    CALL  _LCD_PrHexByte     (0220) 	call LCD_PrHexByte
                                        (0221) 	
0A0B: 50 01    MOV   A,0x1              (0222) 	mov A, 01h
0A0D: 57 05    MOV   X,0x5              (0223) 	mov X, 05h
0A0F: 9D 06    CALL  _LCD_Position      (0224) 	call LCD_Position
0A11: 51 17    MOV   A,[0x17]           (0225) 	mov A, [md_flg]
0A13: 9B 9F    CALL  _LCD_PrHexByte     (0226) 	call LCD_PrHexByte
                                        (0227) 	
                                        (0228) ;
                                        (0229) ;	mov A, 01h
                                        (0230) ;	mov X, 0Ah
                                        (0231) ;	call LCD_Position
                                        (0232) ;	mov A, [md_flg]
                                        (0233) ;	call LCD_PrHexByte
                                        (0234) 
                                        (0235) 	
                                        (0236) 
                                        (0237) 
                                        (0238) Chcklngp:
0A15: 3C 14 01 CMP   [0x14],0x1         (0239)     cmp [addr_lng_p],01h 
0A18: B0 19    JNZ   0x0A32             (0240) 	jnz StaySameMode		;if its not set stay in same mode
                                        (0241) 
                                        (0242) 	;toggle if you get long press
0A1A: 5D 04    MOV   A,REG[0x4]         (0243) 	mov A, reg[PRT1DR]
0A1C: 31 FF    XOR   A,0xFF             (0244) 	xor A, FFh
0A1E: 60 04    MOV   REG[0x4],A         (0245) 	mov reg[PRT1DR], A
                                        (0246) 	
0A20: 55 14 00 MOV   [0x14],0x0         (0247) 	mov [addr_lng_p],00h  	;reset long press value
0A23: 55 15 00 MOV   [0x15],0x0         (0248) 	mov [addr_shrt_p],00h  	;reset short press value
                                        (0249) 	
                                        (0250) 
                                        (0251) 
                                        (0252) next_Mode:
0A26: 70 FB    AND   F,0xFB             (0253)     and F, FBh			;clear CF
0A28: 65 17    ASL   [0x17]             (0254) 	asl [md_flg]
                                        (0255) 	
                                        (0256) 
0A2A: 3C 17 20 CMP   [0x17],0x20        (0257) 	cmp [md_flg],20h
0A2D: B0 04    JNZ   0x0A32             (0258) 	jnz StaySameMode
0A2F: 55 17 01 MOV   [0x17],0x1         (0259) 	mov [md_flg],01h
                                        (0260) 
                                        (0261) StaySameMode:
0A32: 3C 17 01 CMP   [0x17],0x1         (0262) 	cmp [md_flg],01h
0A35: A0 15    JZ    0x0A4B             (0263) 	jz Accuracy_m          
0A37: 3C 17 02 CMP   [0x17],0x2         (0264) 	cmp [md_flg],02h
0A3A: A0 6F    JZ    0x0AAA             (0265) 	jz Threshold_m
0A3C: 3C 17 04 CMP   [0x17],0x4         (0266) 	cmp [md_flg],04h
0A3F: A0 7E    JZ    0x0ABE             (0267) 	jz Button_m
0A41: 3C 17 08 CMP   [0x17],0x8         (0268) 	cmp [md_flg],08h
0A44: A1 AD    JZ    0x0BF2             (0269) 	jz Sound_m
0A46: 3C 17 10 CMP   [0x17],0x10        (0270) 	cmp [md_flg],10h
0A49: A1 B9    JZ    0x0C03             (0271) 	jz Mem_Display
                                        (0272) 	
                                        (0273) 	
                                        (0274) 
                                        (0275) ;---------------------MODES-----------------------------------------------------
                                        (0276) ;-------------------------------------------------------------------------------
                                        (0277) ;---------------------START ACCURACY MODE---------------------------------------
                                        (0278) 
                                        (0279) Accuracy_m:
0A4B: 3C 15 00 CMP   [0x15],0x0         (0280)    cmp [addr_shrt_p], 00h
0A4E: B0 0F    JNZ   0x0A5E             (0281) 	jnz check_acc_ms
0A50: 50 00    MOV   A,0x0              (0282) 	mov A, 00h
0A52: 57 00    MOV   X,0x0              (0283) 	mov X, 00h
0A54: 9C C1    CALL  _LCD_Position      (0284) 	call LCD_Position
0A56: 50 0E    MOV   A,0xE              (0285) 	mov A, >ACCURACY_MODE
0A58: 57 21    MOV   X,0x21             (0286) 	mov X, <ACCURACY_MODE
0A5A: 9B 36    CALL  _LCD_PrCString     (0287) 	call LCD_PrCString
0A5C: 8F A4    JMP   0x0A01             (0288) 	jmp loop
                                        (0289) 
                                        (0290) check_acc_ms:
0A5E: 3C 15 01 CMP   [0x15],0x1         (0291) 	cmp [addr_shrt_p], 01h
0A61: B0 12    JNZ   0x0A74             (0292) 	jnz check_acc_halfsec
0A63: 55 16 03 MOV   [0x16],0x3         (0293) 	mov [addr_acc_mode], tenthsec_mode	;tenth second mode by default
0A66: 50 00    MOV   A,0x0              (0294) 	mov A, 00h
0A68: 57 00    MOV   X,0x0              (0295) 	mov X, 00h
0A6A: 9C AB    CALL  _LCD_Position      (0296) 	call LCD_Position
0A6C: 50 0D    MOV   A,0xD              (0297) 	mov A, >TENTHSEC_MODE
0A6E: 57 F1    MOV   X,0xF1             (0298) 	mov X, <TENTHSEC_MODE
0A70: 9B 20    CALL  _LCD_PrCString     (0299) 	call LCD_PrCString
0A72: 8F 8E    JMP   0x0A01             (0300) 	jmp loop
                                        (0301) 
                                        (0302) check_acc_halfsec:
0A74: 3C 15 02 CMP   [0x15],0x2         (0303) 	cmp [addr_shrt_p] , 02h
0A77: B0 12    JNZ   0x0A8A             (0304) 	jnz check_acc_sec
0A79: 55 16 02 MOV   [0x16],0x2         (0305) 	mov [addr_acc_mode], halfsec_mode
0A7C: 50 00    MOV   A,0x0              (0306) 	mov A, 00h
0A7E: 57 00    MOV   X,0x0              (0307) 	mov X, 00h
0A80: 9C 95    CALL  _LCD_Position      (0308) 	call LCD_Position
0A82: 50 0E    MOV   A,0xE              (0309) 	mov A, >HALFSEC_MODE
0A84: 57 02    MOV   X,0x2              (0310) 	mov X, <HALFSEC_MODE
0A86: 9B 0A    CALL  _LCD_PrCString     (0311) 	call LCD_PrCString
0A88: 8F 78    JMP   0x0A01             (0312) 	jmp loop
                                        (0313) 	
                                        (0314) check_acc_sec:
0A8A: 3C 15 03 CMP   [0x15],0x3         (0315) 	cmp [addr_shrt_p] , 03h
0A8D: B0 12    JNZ   0x0AA0             (0316) 	jnz check_acc_end
0A8F: 55 16 01 MOV   [0x16],0x1         (0317) 	mov [addr_acc_mode], sec_mode
0A92: 50 00    MOV   A,0x0              (0318) 	mov A, 00h
0A94: 57 00    MOV   X,0x0              (0319) 	mov X, 00h
0A96: 9C 7F    CALL  _LCD_Position      (0320) 	call LCD_Position
0A98: 50 0E    MOV   A,0xE              (0321) 	mov A, >SEC_MODE
0A9A: 57 11    MOV   X,0x11             (0322) 	mov X, <SEC_MODE
0A9C: 9A F4    CALL  _LCD_PrCString     (0323) 	call LCD_PrCString
0A9E: 8F 62    JMP   0x0A01             (0324) 	jmp loop
                                        (0325) 
                                        (0326) check_acc_end:
0AA0: 3C 15 04 CMP   [0x15],0x4         (0327) 	cmp [addr_shrt_p], 04h
0AA3: CF 5D    JC    0x0A01             (0328) 	jc loop				;make sure SP presses is less than 5 in button mode
0AA5: 55 15 00 MOV   [0x15],0x0         (0329) 	mov [addr_shrt_p], 00h
                                        (0330) 	
0AA8: 8F 58    JMP   0x0A01             (0331) 	jmp loop
                                        (0332) 	
                                        (0333) ;---------------------END ACCURACY MODE--------------------------------------
                                        (0334) 	
                                        (0335) ;---------------------START THRESHOLD MODE-----------------------------------
                                        (0336) 	
                                        (0337) Threshold_m:
0AAA: 50 00    MOV   A,0x0              (0338) 	mov A, 00h
0AAC: 57 00    MOV   X,0x0              (0339) 	mov X, 00h
0AAE: 9C 67    CALL  _LCD_Position      (0340) 	call LCD_Position
0AB0: 50 0E    MOV   A,0xE              (0341) 	mov A, >THRESHOLD_MODE
0AB2: 57 73    MOV   X,0x73             (0342) 	mov X, <THRESHOLD_MODE
0AB4: 9A DC    CALL  _LCD_PrCString     (0343) 	call LCD_PrCString 
0AB6: 55 18 00 MOV   [0x18],0x0         (0344) 	mov [count_saved], 00h			;back to initialized value
0AB9: 55 1A 00 MOV   [0x1A],0x0         (0345) 	mov [save_time_index], 00
0ABC: 8F 44    JMP   0x0A01             (0346) 	jmp loop
                                        (0347) 	
                                        (0348) ;---------------------END THRESHOLD MODE--------------------------------------
                                        (0349) 	
                                        (0350) ;---------------------START BUTTON MODE---------------------------------------
                                        (0351) 
                                        (0352) Button_m:
                                        (0353) here:
0ABE: 3C 15 00 CMP   [0x15],0x0         (0354)     cmp [addr_shrt_p], 00h
0AC1: B0 0D    JNZ   0x0ACF             (0355) 	jnz check_but_clear
0AC3: 50 00    MOV   A,0x0              (0356) 	mov A, 00h
0AC5: 57 00    MOV   X,0x0              (0357) 	mov X, 00h
0AC7: 9C 4E    CALL  _LCD_Position      (0358) 	call LCD_Position
0AC9: 50 0E    MOV   A,0xE              (0359) 	mov A, >BUTTON_MODE
0ACB: 57 30    MOV   X,0x30             (0360) 	mov X, <BUTTON_MODE
0ACD: 9A C3    CALL  _LCD_PrCString     (0361) 	call LCD_PrCString
                                        (0362) 	
                                        (0363) 
                                        (0364) check_but_clear:
0ACF: 3C 15 01 CMP   [0x15],0x1         (0365) 	cmp [addr_shrt_p], 01h
0AD2: B0 1B    JNZ   0x0AEE             (0366) 	jnz check_but_start
0AD4: 55 0C 00 MOV   [0xC],0x0          (0367) 	mov [addr_inc_ms], 00h
0AD7: 55 0D 00 MOV   [0xD],0x0          (0368) 	mov [addr_inc_s], 00h
0ADA: 55 0E 00 MOV   [0xE],0x0          (0369) 	mov [addr_inc_m], 00h
0ADD: 55 0F 00 MOV   [0xF],0x0          (0370) 	mov [addr_inc_h], 00h
                                        (0371) 	
0AE0: 50 00    MOV   A,0x0              (0372) 	mov A, 00h
0AE2: 57 00    MOV   X,0x0              (0373) 	mov X, 00h
0AE4: 9C 31    CALL  _LCD_Position      (0374) 	call LCD_Position
0AE6: 50 0E    MOV   A,0xE              (0375) 	mov A, >CLEAR_TIME
0AE8: 57 52    MOV   X,0x52             (0376) 	mov X, <CLEAR_TIME
0AEA: 9A A6    CALL  _LCD_PrCString     (0377) 	call LCD_PrCString
                                        (0378) 	;call Display_Time_LCD
0AEC: 8F 14    JMP   0x0A01             (0379) 	jmp loop
                                        (0380) 	
                                        (0381) check_but_start:
                                        (0382) 
0AEE: 3C 15 02 CMP   [0x15],0x2         (0383) 	cmp [addr_shrt_p], 02h
0AF1: B0 83    JNZ   0x0B75             (0384) 	jnz check_but_stop
                                        (0385) 		
0AF3: 3C 16 01 CMP   [0x16],0x1         (0386) 		cmp [addr_acc_mode],sec_mode
0AF6: A0 21    JZ    0x0B18             (0387) 		jz label_sec_mode
                                        (0388) 
0AF8: 3C 16 02 CMP   [0x16],0x2         (0389) 		cmp [addr_acc_mode],halfsec_mode
0AFB: A0 06    JZ    0x0B02             (0390) 		jz label_halfsec_mode
                                        (0391) 
                                        (0392) 	label_tenthsec_mode:
0AFD: 5F 0C 0B MOV   [0xC],[0xB]        (0393) 		mov [addr_inc_ms], [addr_internal_inc_ms]
0B00: 80 20    JMP   0x0B21             (0394) 		jmp check_ms
                                        (0395) 
                                        (0396) 	label_halfsec_mode: 
0B02: 51 0B    MOV   A,[0xB]            (0397) 		mov A, [addr_internal_inc_ms]
0B04: 5C       MOV   X,A                (0398) 		mov X, A
0B05: 39 32    CMP   A,0x32             (0399) 		cmp A, 32h
0B07: B0 06    JNZ   0x0B0E             (0400) 		jnz check_if_00
0B09: 5F 0C 0B MOV   [0xC],[0xB]        (0401) 		mov [addr_inc_ms], [addr_internal_inc_ms]
0B0C: 80 14    JMP   0x0B21             (0402) 		jmp check_ms
                                        (0403) 	check_if_00:
0B0E: 5B       MOV   A,X                (0404) 		mov A, X
0B0F: 39 00    CMP   A,0x0              (0405) 		cmp A, 00h
0B11: B0 0F    JNZ   0x0B21             (0406) 		jnz check_ms
0B13: 5F 0C 0B MOV   [0xC],[0xB]        (0407) 		mov [addr_inc_ms], [addr_internal_inc_ms]
0B16: 80 0A    JMP   0x0B21             (0408) 		jmp check_ms
                                        (0409) 		
                                        (0410) 	label_sec_mode: 
0B18: 51 0B    MOV   A,[0xB]            (0411) 		mov A, [addr_internal_inc_ms]					;copy over because you need to compare
0B1A: 39 00    CMP   A,0x0              (0412) 		cmp A, 00h
0B1C: B0 04    JNZ   0x0B21             (0413) 		jnz check_ms									;keep display value as is
                                        (0414) 		;if it is 00 
0B1E: 5F 0C 0B MOV   [0xC],[0xB]        (0415) 		mov [addr_inc_ms], [addr_internal_inc_ms]		;update value to be displayed
                                        (0416) 		;jmp check_ms
                                        (0417) 		
                                        (0418) 
                                        (0419) 	check_ms:
0B21: 51 0B    MOV   A,[0xB]            (0420) 		mov A, [addr_internal_inc_ms] 	;
0B23: 39 64    CMP   A,0x64             (0421) 		cmp A, 64h 		;compare to 100
0B25: B0 06    JNZ   0x0B2C             (0422) 		jnz display_ms
                                        (0423) 		
                                        (0424) 	reset_ms:
0B27: 55 0B 00 MOV   [0xB],0x0          (0425) 		mov [addr_internal_inc_ms], 00h
0B2A: 76 0D    INC   [0xD]              (0426) 		inc [addr_inc_s]		;increment seconds
                                        (0427) 		
                                        (0428) 	display_ms:
0B2C: 50 00    MOV   A,0x0              (0429) 		mov A, 00h
0B2E: 57 09    MOV   X,0x9              (0430) 		mov X, 09h
0B30: 9B E5    CALL  _LCD_Position      (0431) 		call LCD_Position
0B32: 51 0C    MOV   A,[0xC]            (0432) 		mov A, [addr_inc_ms]
0B34: 9A 7E    CALL  _LCD_PrHexByte     (0433) 		call LCD_PrHexByte
                                        (0434) 		
                                        (0435) 	check_sec:	
0B36: 51 0D    MOV   A,[0xD]            (0436) 		mov A, [addr_inc_s]	;move [251] to A as to not mess up the actual number in [251] during compare
0B38: 39 3C    CMP   A,0x3C             (0437) 		cmp A, 3Ch		;compare with 60
                                        (0438) 						;need to check CF : if it's not set than [251] is larger than 60
0B3A: B0 06    JNZ   0x0B41             (0439) 		jnz display_sec
                                        (0440) 
                                        (0441) 	reset_sec:
0B3C: 55 0D 00 MOV   [0xD],0x0          (0442) 		mov [addr_inc_s],00h
0B3F: 76 0E    INC   [0xE]              (0443) 		inc [addr_inc_m]		;increment minutes
                                        (0444) 		
                                        (0445) 	display_sec:
0B41: 50 00    MOV   A,0x0              (0446) 	    mov A, 00h
0B43: 57 06    MOV   X,0x6              (0447) 		mov X, 06h
0B45: 9B D0    CALL  _LCD_Position      (0448) 		call LCD_Position
0B47: 51 0D    MOV   A,[0xD]            (0449) 		mov A, [addr_inc_s]
0B49: 9A 69    CALL  _LCD_PrHexByte     (0450) 		call LCD_PrHexByte
                                        (0451) 		
                                        (0452) 		
                                        (0453) 	check_min:
0B4B: 51 0E    MOV   A,[0xE]            (0454) 		mov A, [addr_inc_m]	;move [251] to A as to not mess up the actual number in [251] during compare
0B4D: 39 3C    CMP   A,0x3C             (0455) 		cmp A, 3Ch		;compare with 60
                                        (0456) 						;need to check CF : if it's not set than [251] is larger than 60
0B4F: B0 06    JNZ   0x0B56             (0457) 		jnz display_min
                                        (0458) 
                                        (0459) 	reset_min:
0B51: 55 0D 00 MOV   [0xD],0x0          (0460) 		mov [addr_inc_s],00h
0B54: 76 0F    INC   [0xF]              (0461) 		inc [addr_inc_h]
                                        (0462) 
                                        (0463) 	display_min:
0B56: 50 00    MOV   A,0x0              (0464) 	    mov A, 00h
0B58: 57 03    MOV   X,0x3              (0465) 		mov X, 03h
0B5A: 9B BB    CALL  _LCD_Position      (0466) 		call LCD_Position
0B5C: 51 0E    MOV   A,[0xE]            (0467) 		mov A, [addr_inc_m]
0B5E: 9A 54    CALL  _LCD_PrHexByte     (0468) 		call LCD_PrHexByte
                                        (0469) 		
                                        (0470) 	check_hour:
0B60: 51 0F    MOV   A,[0xF]            (0471) 		mov A, [addr_inc_h]
0B62: 39 18    CMP   A,0x18             (0472) 		cmp A, 18h		;compare with 24
0B64: B0 04    JNZ   0x0B69             (0473) 		jnz display_hour
                                        (0474) 		
                                        (0475) 	reset_hour:
0B66: 55 0F 00 MOV   [0xF],0x0          (0476) 		mov [addr_inc_h], 00h
                                        (0477) 		
                                        (0478) 	display_hour:
0B69: 50 00    MOV   A,0x0              (0479) 		mov A, 00h
0B6B: 57 00    MOV   X,0x0              (0480) 		mov X, 00h
0B6D: 9B A8    CALL  _LCD_Position      (0481) 		call LCD_Position
0B6F: 51 0F    MOV   A,[0xF]            (0482) 		mov A, [addr_inc_h]
0B71: 9A 41    CALL  _LCD_PrHexByte     (0483) 		call LCD_PrHexByte
0B73: 8E 8D    JMP   0x0A01             (0484) 	jmp loop
                                        (0485) 	
                                        (0486) check_but_stop:
0B75: 3C 15 03 CMP   [0x15],0x3         (0487) 	cmp [addr_shrt_p], 03h
0B78: B0 1D    JNZ   0x0B96             (0488) 	jnz before_check_but_end
                                        (0489) ;	call Save_Time
                                        (0490) 	
                                        (0491) ;	mov [count_saved], 00h			;back to initialized value
                                        (0492) ;	mov [save_time_index], 00
                                        (0493) 
                                        (0494) save_and_count:
0B7A: 51 0F    MOV   A,[0xF]            (0495) 		mov A, [addr_inc_h]
                                        (0496) 		;mov A, FFh
0B7C: 3F 1A    MVI   [0x1A],A           (0497) 		mvi [save_time_index], A
0B7E: 51 0E    MOV   A,[0xE]            (0498) 		mov A, [addr_inc_m]
                                        (0499) 		;mov A, EEh
0B80: 3F 1A    MVI   [0x1A],A           (0500) 		mvi [save_time_index], A
0B82: 51 0D    MOV   A,[0xD]            (0501) 		mov A, [addr_inc_s]
                                        (0502) 		;mov A, DDh
0B84: 3F 1A    MVI   [0x1A],A           (0503) 		mvi [save_time_index], A
0B86: 51 0C    MOV   A,[0xC]            (0504) 		mov A, [addr_inc_ms]
                                        (0505) 		;mov A, CCh
0B88: 3F 1A    MVI   [0x1A],A           (0506) 		mvi [save_time_index], A
                                        (0507) 		
                                        (0508) 		;inc [count_saved]
                                        (0509) 		
0B8A: 50 01    MOV   A,0x1              (0510) 	mov A, 01h
0B8C: 57 0C    MOV   X,0xC              (0511) 	mov X, 0Ch
0B8E: 9B 87    CALL  _LCD_Position      (0512) 	call LCD_Position
0B90: 51 18    MOV   A,[0x18]           (0513) 	mov A, [count_saved]
0B92: 9A 20    CALL  _LCD_PrHexByte     (0514) 	call LCD_PrHexByte
                                        (0515) 	
                                        (0516) 	
                                        (0517) 	;inc [addr_shrt_p]
0B94: 8E 6C    JMP   0x0A01             (0518) 	jmp loop
                                        (0519) 	;stop timer
                                        (0520) 
                                        (0521) 	
                                        (0522) before_check_but_end:
0B96: 3C 15 04 CMP   [0x15],0x4         (0523) 	cmp [addr_shrt_p], 04h
0B99: B0 4E    JNZ   0x0BE8             (0524) 	jnz check_but_end
                                        (0525) 	
                                        (0526) ;	mov A, 00h
                                        (0527) ;	mov X, 00h
                                        (0528) ;	call LCD_Position
                                        (0529) ;	mov A, >DEBUG_MODE
                                        (0530) ;	mov X, <DEBUG_MODE
                                        (0531) ;	call LCD_PrCString
                                        (0532) ;	
                                        (0533) ;	mov A, 00h
                                        (0534) ;	mov X, 0Ch
                                        (0535) ;	call LCD_Position
                                        (0536) ;	mov A, reg[MVW_PP]
                                        (0537) ;	call LCD_PrHexByte
                                        (0538) ;	jmp loop
                                        (0539) 
                                        (0540) ;	call Display_Read_Time
                                        (0541) 	
0B9B: 08       PUSH  A                  (0542) 	push A
0B9C: 10       PUSH  X                  (0543) 	push X
                                        (0544) 	
                                        (0545) 	;call Clean_LCD_Row0
                                        (0546) 	
0B9D: 55 40 00 MOV   [0x40],0x0         (0547) 	mov [pg6_reference], 00h
                                        (0548) 	
0BA0: 3E 40    MVI   A,[0x40]           (0549) 	mvi A, [pg6_reference]
0BA2: 53 13    MOV   [0x13],A           (0550) 	mov [read_addr_inc_h], A
0BA4: 3E 40    MVI   A,[0x40]           (0551) 	mvi A, [pg6_reference]
0BA6: 53 12    MOV   [0x12],A           (0552) 	mov [read_addr_inc_m], A
0BA8: 3E 40    MVI   A,[0x40]           (0553) 	mvi A, [pg6_reference]
0BAA: 53 11    MOV   [0x11],A           (0554) 	mov [read_addr_inc_s], A
0BAC: 3E 40    MVI   A,[0x40]           (0555) 	mvi A, [pg6_reference]
0BAE: 53 10    MOV   [0x10],A           (0556) 	mov [read_addr_inc_ms], A
                                        (0557) 
0BB0: 50 00    MOV   A,0x0              (0558) 	mov A, 00h
0BB2: 57 00    MOV   X,0x0              (0559) 	mov X, 00h
0BB4: 9B 61    CALL  _LCD_Position      (0560) 	call LCD_Position
0BB6: 51 13    MOV   A,[0x13]           (0561) 	mov A, [read_addr_inc_h]
0BB8: 99 FA    CALL  _LCD_PrHexByte     (0562) 	call LCD_PrHexByte
                                        (0563) 	
0BBA: 50 00    MOV   A,0x0              (0564) 	mov A, 00h
0BBC: 57 03    MOV   X,0x3              (0565) 	mov X, 03h
0BBE: 9B 57    CALL  _LCD_Position      (0566) 	call LCD_Position
0BC0: 51 12    MOV   A,[0x12]           (0567) 	mov A, [read_addr_inc_m]
0BC2: 99 F0    CALL  _LCD_PrHexByte     (0568) 	call LCD_PrHexByte
                                        (0569) 	
0BC4: 50 00    MOV   A,0x0              (0570) 	mov A, 00h
0BC6: 57 06    MOV   X,0x6              (0571) 	mov X, 06h
0BC8: 9B 4D    CALL  _LCD_Position      (0572) 	call LCD_Position
0BCA: 51 11    MOV   A,[0x11]           (0573) 	mov A, [read_addr_inc_s]
0BCC: 99 E6    CALL  _LCD_PrHexByte     (0574) 	call LCD_PrHexByte
                                        (0575) 	
0BCE: 50 00    MOV   A,0x0              (0576) 	mov A, 00h
0BD0: 57 09    MOV   X,0x9              (0577) 	mov X, 09h
0BD2: 9B 43    CALL  _LCD_Position      (0578) 	call LCD_Position
0BD4: 51 10    MOV   A,[0x10]           (0579) 	mov A, [read_addr_inc_ms]
0BD6: 99 DC    CALL  _LCD_PrHexByte     (0580) 	call LCD_PrHexByte	
                                        (0581) 	
0BD8: 50 00    MOV   A,0x0              (0582) 	mov A, 00h
0BDA: 57 0C    MOV   X,0xC              (0583) 	mov X, 0Ch
0BDC: 9B 39    CALL  _LCD_Position      (0584) 	call LCD_Position
0BDE: 50 0E    MOV   A,0xE              (0585) 	mov A, >SAVE
0BE0: 57 B8    MOV   X,0xB8             (0586) 	mov X, <SAVE
0BE2: 99 AE    CALL  _LCD_PrCString     (0587) 	call LCD_PrCString
                                        (0588) 
                                        (0589) 	
                                        (0590) 	;inc [count_saved]
                                        (0591) 		
                                        (0592) 	
0BE4: 20       POP   X                  (0593) 	pop X
0BE5: 18       POP   A                  (0594) 	pop A
                                        (0595) 	
0BE6: 8E 1A    JMP   0x0A01             (0596) 	jmp loop
                                        (0597) 	
                                        (0598) check_but_end:
0BE8: 3C 15 05 CMP   [0x15],0x5         (0599) 	cmp [addr_shrt_p], 05h
0BEB: CE 15    JC    0x0A01             (0600) 	jc loop				;make sure SP presses is less than 5 in button mode
0BED: 55 15 00 MOV   [0x15],0x0         (0601) 	mov [addr_shrt_p], 00h
                                        (0602) 
                                        (0603) 	
0BF0: 8E 10    JMP   0x0A01             (0604) 	jmp loop
                                        (0605) 	
                                        (0606) ;---------------------END BUTTON MODE----------------------------------------
                                        (0607) 	
                                        (0608) ;---------------------START SOUND MODE---------------------------------------
                                        (0609) Sound_m:
0BF2: 55 59 00 MOV   [0x59],0x0         (0610) 	mov [flag_val], 00h
                                        (0611) 	
0BF5: 50 00    MOV   A,0x0              (0612) 	mov A, 00h
0BF7: 57 00    MOV   X,0x0              (0613) 	mov X, 00h
0BF9: 9B 1C    CALL  _LCD_Position      (0614) 	call LCD_Position
0BFB: 50 0E    MOV   A,0xE              (0615) 	mov A, >SOUND_MODE
0BFD: 57 94    MOV   X,0x94             (0616) 	mov X, <SOUND_MODE
0BFF: 99 91    CALL  _LCD_PrCString     (0617) 	call LCD_PrCString
0C01: 8D FF    JMP   0x0A01             (0618) 	jmp loop
                                        (0619) 	
                                        (0620) ;---------------------END SOUND MODE-----------------------------------------
                                        (0621) 	
                                        (0622) ;---------------------START MEMORY MODE--------------------------------------
                                        (0623) 
                                        (0624) Mem_Display:
0C03: 3C 15 01 CMP   [0x15],0x1         (0625) 	cmp [addr_shrt_p], 01h
0C06: 90 0D    CALL  0x0C15             (0626) 	call average
0C08: 50 00    MOV   A,0x0              (0627) 	mov A, 00h
0C0A: 57 00    MOV   X,0x0              (0628) 	mov X, 00h
0C0C: 9B 09    CALL  _LCD_Position      (0629) 	call LCD_Position
0C0E: 50 0E    MOV   A,0xE              (0630) 	mov A, >MEMORY_MODE
0C10: 57 A6    MOV   X,0xA6             (0631) 	mov X, <MEMORY_MODE
0C12: 7C 05 92 LCALL _LCD_PrCString     (0632) 	lcall LCD_PrCString
                                        (0633) 	
                                        (0634) 
                                        (0635) 	
                                        (0636) average:
0C15: 3C 15 02 CMP   [0x15],0x2         (0637) cmp [addr_shrt_p], 02h
0C18: 90 04    CALL  0x0C1E             (0638) 	call here_1
0C1A: 7C 0E BD LCALL _routine_avg       (0639) lcall _routine_avg
0C1D: 7F       RET                      (0640) ret
                                        (0641) here_1:
0C1E: 62 D4 06 MOV   REG[0xD4],0x6      (0642) 	mov reg[MVR_PP], 6			;reading from memory page 6
                                        (0643) 	
0C21: 55 46 00 MOV   [0x46],0x0         (0644) 	mov [sum_ms], 00h
0C24: 55 44 00 MOV   [0x44],0x0         (0645) 	mov [sum_sec_LSB], 00h
0C27: 55 45 00 MOV   [0x45],0x0         (0646) 	mov [sum_sec_MSB], 00h
0C2A: 55 42 00 MOV   [0x42],0x0         (0647) 	mov [sum_min_LSB], 00h
0C2D: 55 43 00 MOV   [0x43],0x0         (0648) 	mov [sum_min_MSB], 00h
0C30: 55 41 00 MOV   [0x41],0x0         (0649) 	mov [sum_hr], 00h
                                        (0650) 	
0C33: 55 50 00 MOV   [0x50],0x0         (0651) 	mov [avg_ms], 00h
0C36: 55 49 00 MOV   [0x49],0x0         (0652) 	mov [avg_sec], 00h
0C39: 55 48 00 MOV   [0x48],0x0         (0653) 	mov [avg_min], 00h
0C3C: 55 47 00 MOV   [0x47],0x0         (0654) 	mov [avg_hr], 00h
                                        (0655) 	
0C3F: 55 54 00 MOV   [0x54],0x0         (0656) 	mov [max_ms], 00h
0C42: 55 53 00 MOV   [0x53],0x0         (0657) 	mov [max_sec], 00h
0C45: 55 52 00 MOV   [0x52],0x0         (0658) 	mov [max_min], 00h
0C48: 55 51 00 MOV   [0x51],0x0         (0659) 	mov [max_hr], 00h
                                        (0660) 	
0C4B: 55 58 00 MOV   [0x58],0x0         (0661) 	mov [min_ms], 00h
0C4E: 55 57 00 MOV   [0x57],0x0         (0662) 	mov [min_sec], 00h
0C51: 55 56 00 MOV   [0x56],0x0         (0663) 	mov [min_min], 00h
0C54: 55 55 00 MOV   [0x55],0x0         (0664) 	mov [min_hr], 00h
                                        (0665) 	
0C57: 55 40 00 MOV   [0x40],0x0         (0666) 	mov [pg6_reference], 00h
                                        (0667) 
0C5A: 3C 15 01 CMP   [0x15],0x1         (0668) 	cmp [addr_shrt_p], 01h		;maximum/longest mode
0C5D: 90 9C    CALL  0x0CFB             (0669) 	call shortest_time
                                        (0670) 	
0C5F: 57 0B    MOV   X,0xB              (0671) 	mov X, 11
0C61: 55 40 00 MOV   [0x40],0x0         (0672) 	mov [pg6_reference], 00		;bringing the position at pg6 at the starting position
0C64: 80 16    JMP   0x0C7B             (0673) 	jmp next
                                        (0674) 	
                                        (0675) next_A:
0C66: 06 40 03 ADD   [0x40],0x3         (0676) 	add [pg6_reference], 3
0C69: 70 FB    AND   F,0xFB             (0677) 	and F, FBh
0C6B: 80 0F    JMP   0x0C7B             (0678) 	jmp next
                                        (0679) next_B:
0C6D: 06 40 02 ADD   [0x40],0x2         (0680) 	add [pg6_reference], 2
0C70: 70 FB    AND   F,0xFB             (0681) 	and F, FBh
0C72: 80 08    JMP   0x0C7B             (0682) 	jmp next
                                        (0683) next_C:
0C74: 06 40 01 ADD   [0x40],0x1         (0684) 	add [pg6_reference], 1
0C77: 70 FB    AND   F,0xFB             (0685) 	and F, FBh
0C79: 80 01    JMP   0x0C7B             (0686) 	jmp next
                                        (0687) 	
                                        (0688) next:
0C7B: 79       DEC   X                  (0689) 	dec X
0C7C: A0 49    JZ    0x0CC6             (0690) 	jz end_max
0C7E: 3E 40    MVI   A,[0x40]           (0691) 	mvi A, [pg6_reference]
0C80: 3A 51    CMP   A,[0x51]           (0692) 	cmp A, [max_hr]
0C82: A0 13    JZ    0x0C96             (0693) 	jz check_min_max
0C84: CF E1    JC    0x0C66             (0694) 	jc next_A
0C86: 53 51    MOV   [0x51],A           (0695) 	mov [max_hr], A
0C88: 3E 40    MVI   A,[0x40]           (0696) 	mvi A, [pg6_reference]
0C8A: 53 52    MOV   [0x52],A           (0697) 	mov [max_min], A
0C8C: 3E 40    MVI   A,[0x40]           (0698) 	mvi A, [pg6_reference]
0C8E: 53 53    MOV   [0x53],A           (0699) 	mov [max_sec], A
0C90: 3E 40    MVI   A,[0x40]           (0700) 	mvi A, [pg6_reference]
0C92: 53 54    MOV   [0x54],A           (0701) 	mov [max_ms], A
0C94: 8F E6    JMP   0x0C7B             (0702) 	jmp next
                                        (0703) check_min_max:
0C96: 3E 40    MVI   A,[0x40]           (0704) 	mvi A, [pg6_reference]
0C98: 3A 52    CMP   A,[0x52]           (0705) 	cmp A, [max_min]
0C9A: A0 0F    JZ    0x0CAA             (0706) 	jz check_sec_max
0C9C: CF D0    JC    0x0C6D             (0707) 	jc next_B
0C9E: 53 52    MOV   [0x52],A           (0708) 	mov [max_min], A
0CA0: 3E 40    MVI   A,[0x40]           (0709) 	mvi A, [pg6_reference]
0CA2: 53 53    MOV   [0x53],A           (0710) 	mov [max_sec], A
0CA4: 3E 40    MVI   A,[0x40]           (0711) 	mvi A, [pg6_reference]
0CA6: 53 54    MOV   [0x54],A           (0712) 	mov [max_ms], A
0CA8: 8F D2    JMP   0x0C7B             (0713) 	jmp next
                                        (0714) check_sec_max:
0CAA: 3E 40    MVI   A,[0x40]           (0715) 	mvi A, [pg6_reference]
0CAC: 3A 53    CMP   A,[0x53]           (0716) 	cmp A, [max_sec]
0CAE: A0 0B    JZ    0x0CBA             (0717) 	jz check_ms_max
0CB0: CF C3    JC    0x0C74             (0718) 	jc next_C
0CB2: 53 53    MOV   [0x53],A           (0719) 	mov [max_sec], A
0CB4: 3E 40    MVI   A,[0x40]           (0720) 	mvi A, [pg6_reference]
0CB6: 53 54    MOV   [0x54],A           (0721) 	mov [max_ms], A
0CB8: 8F C2    JMP   0x0C7B             (0722) 	jmp next
                                        (0723) check_ms_max:
0CBA: 3E 40    MVI   A,[0x40]           (0724) 	mvi A, [pg6_reference]
0CBC: 3A 54    CMP   A,[0x54]           (0725) 	cmp A, [max_ms]
0CBE: AF BC    JZ    0x0C7B             (0726) 	jz next
0CC0: CF BA    JC    0x0C7B             (0727) 	jc next
0CC2: 53 54    MOV   [0x54],A           (0728) 	mov [max_ms], A
0CC4: 8F B6    JMP   0x0C7B             (0729) 	jmp next
                                        (0730) 
                                        (0731) end_max:
0CC6: 50 01    MOV   A,0x1              (0732) 	mov A, 01h
0CC8: 57 00    MOV   X,0x0              (0733) 	mov X, 00h
0CCA: 9A 4B    CALL  _LCD_Position      (0734) 	call LCD_Position
0CCC: 51 51    MOV   A,[0x51]           (0735) 	mov A, [max_hr]
0CCE: 98 E4    CALL  _LCD_PrHexByte     (0736) 	call LCD_PrHexByte
                                        (0737) 	
0CD0: 50 01    MOV   A,0x1              (0738) 	mov A, 01h
0CD2: 57 03    MOV   X,0x3              (0739) 	mov X, 03h
0CD4: 9A 41    CALL  _LCD_Position      (0740) 	call LCD_Position
0CD6: 51 52    MOV   A,[0x52]           (0741) 	mov A, [max_min]
0CD8: 98 DA    CALL  _LCD_PrHexByte     (0742) 	call LCD_PrHexByte
                                        (0743) 	
0CDA: 50 01    MOV   A,0x1              (0744) 	mov A, 01h
0CDC: 57 06    MOV   X,0x6              (0745) 	mov X, 06h
0CDE: 9A 37    CALL  _LCD_Position      (0746) 	call LCD_Position
0CE0: 51 53    MOV   A,[0x53]           (0747) 	mov A, [max_sec]
0CE2: 98 D0    CALL  _LCD_PrHexByte     (0748) 	call LCD_PrHexByte
                                        (0749) 	
0CE4: 50 01    MOV   A,0x1              (0750) 	mov A, 01h
0CE6: 57 09    MOV   X,0x9              (0751) 	mov X, 09h
0CE8: 9A 2D    CALL  _LCD_Position      (0752) 	call LCD_Position
0CEA: 51 54    MOV   A,[0x54]           (0753) 	mov A, [max_ms]
0CEC: 98 C6    CALL  _LCD_PrHexByte     (0754) 	call LCD_PrHexByte
                                        (0755) 	
0CEE: 50 00    MOV   A,0x0              (0756) 	mov A, 00h
0CF0: 57 00    MOV   X,0x0              (0757) 	mov X, 00h
0CF2: 9A 23    CALL  _LCD_Position      (0758) 	call LCD_Position
0CF4: 50 0E    MOV   A,0xE              (0759) 	mov A, >MAXIMUM
0CF6: 57 6B    MOV   X,0x6B             (0760) 	mov X, <MAXIMUM
0CF8: 98 98    CALL  _LCD_PrCString     (0761) 	call LCD_PrCString
                                        (0762) 	
0CFA: 7F       RET                      (0763) 	ret
                                        (0764) 	
                                        (0765) shortest_time:
                                        (0766) 		
0CFB: 55 40 00 MOV   [0x40],0x0         (0767) 	mov [pg6_reference], 00
0CFE: 57 0A    MOV   X,0xA              (0768) 	mov X, 10
0D00: 3E 40    MVI   A,[0x40]           (0769) 	mvi A, [pg6_reference]
0D02: 53 55    MOV   [0x55],A           (0770) 	mov [min_hr], A
0D04: 3E 40    MVI   A,[0x40]           (0771) 	mvi A, [pg6_reference]
0D06: 53 56    MOV   [0x56],A           (0772) 	mov [min_min], A
0D08: 3E 40    MVI   A,[0x40]           (0773) 	mvi A, [pg6_reference]
0D0A: 53 57    MOV   [0x57],A           (0774) 	mov [min_sec], A
0D0C: 3E 40    MVI   A,[0x40]           (0775) 	mvi A, [pg6_reference]
0D0E: 53 58    MOV   [0x58],A           (0776) 	mov [min_ms], A
0D10: 80 14    JMP   0x0D25             (0777) 	jmp next_values
                                        (0778) 	
                                        (0779) min_loop:
                                        (0780) next_1:
0D12: 06 40 03 ADD   [0x40],0x3         (0781) 	add [pg6_reference], 3
0D15: 70 FB    AND   F,0xFB             (0782) 	and F, FBh
0D17: 80 0D    JMP   0x0D25             (0783) 	jmp next_values
                                        (0784) next_2:
0D19: 06 40 02 ADD   [0x40],0x2         (0785) 	add [pg6_reference], 2
0D1C: 70 FB    AND   F,0xFB             (0786) 	and F, FBh
0D1E: 80 06    JMP   0x0D25             (0787) 	jmp next_values
                                        (0788) next_3:
0D20: 06 40 01 ADD   [0x40],0x1         (0789) 	add [pg6_reference], 1
0D23: 70 FB    AND   F,0xFB             (0790) 	and F, FBh
                                        (0791) 
                                        (0792) next_values:
0D25: 79       DEC   X                  (0793) 	dec X
0D26: A0 49    JZ    0x0D70             (0794) 	jz end_min
0D28: 3E 40    MVI   A,[0x40]           (0795) 	mvi A, [pg6_reference]
0D2A: 3A 55    CMP   A,[0x55]           (0796) 	cmp A, [min_hr]
0D2C: A0 13    JZ    0x0D40             (0797) 	jz check_min_min
0D2E: DF E3    JNC   0x0D12             (0798) 	jnc next_1
0D30: 53 55    MOV   [0x55],A           (0799) 	mov [min_hr], A
0D32: 3E 40    MVI   A,[0x40]           (0800) 	mvi A, [pg6_reference]
0D34: 53 56    MOV   [0x56],A           (0801) 	mov [min_min], A
0D36: 3E 40    MVI   A,[0x40]           (0802) 	mvi A, [pg6_reference]
0D38: 53 57    MOV   [0x57],A           (0803) 	mov [min_sec], A
0D3A: 3E 40    MVI   A,[0x40]           (0804) 	mvi A, [pg6_reference]
0D3C: 53 58    MOV   [0x58],A           (0805) 	mov [min_ms], A
0D3E: 8F E6    JMP   0x0D25             (0806) 	jmp next_values
                                        (0807) check_min_min:
0D40: 3E 40    MVI   A,[0x40]           (0808) 	mvi A, [pg6_reference]
0D42: 3A 56    CMP   A,[0x56]           (0809) 	cmp A, [min_min]
0D44: A0 0F    JZ    0x0D54             (0810) 	jz check_sec_min
0D46: DF D2    JNC   0x0D19             (0811) 	jnc next_2
0D48: 53 56    MOV   [0x56],A           (0812) 	mov [min_min], A
0D4A: 3E 40    MVI   A,[0x40]           (0813) 	mvi A, [pg6_reference]
0D4C: 53 57    MOV   [0x57],A           (0814) 	mov [min_sec], A
0D4E: 3E 40    MVI   A,[0x40]           (0815) 	mvi A, [pg6_reference]
0D50: 53 58    MOV   [0x58],A           (0816) 	mov [min_ms], A
0D52: 8F BF    JMP   0x0D12             (0817) 	jmp next_1
                                        (0818) check_sec_min:
0D54: 3E 40    MVI   A,[0x40]           (0819) 	mvi A, [pg6_reference]
0D56: 3A 57    CMP   A,[0x57]           (0820) 	cmp A, [min_sec]
0D58: A0 0B    JZ    0x0D64             (0821) 	jz check_ms_min
0D5A: DF C5    JNC   0x0D20             (0822) 	jnc next_3
0D5C: 53 57    MOV   [0x57],A           (0823) 	mov [min_sec], A
0D5E: 3E 40    MVI   A,[0x40]           (0824) 	mvi A, [pg6_reference]
0D60: 53 58    MOV   [0x58],A           (0825) 	mov [min_ms], A
0D62: 8F AF    JMP   0x0D12             (0826) 	jmp next_1
                                        (0827) check_ms_min:
0D64: 3E 40    MVI   A,[0x40]           (0828) 	mvi A, [pg6_reference]
0D66: 3A 58    CMP   A,[0x58]           (0829) 	cmp A, [min_ms]
0D68: AF BC    JZ    0x0D25             (0830) 	jz next_values
0D6A: DF BA    JNC   0x0D25             (0831) 	jnc next_values
0D6C: 53 58    MOV   [0x58],A           (0832) 	mov [min_ms], A
0D6E: 8F B6    JMP   0x0D25             (0833) 	jmp next_values
                                        (0834) 	
                                        (0835) end_min:
0D70: 50 00    MOV   A,0x0              (0836) 	mov A, 00h
0D72: 57 00    MOV   X,0x0              (0837) 	mov X, 00h
0D74: 7C 07 17 LCALL _LCD_Position      (0838) 	lcall LCD_Position
0D77: 51 55    MOV   A,[0x55]           (0839) 	mov A, [min_hr]
0D79: 7C 05 B4 LCALL _LCD_PrHexByte     (0840) 	lcall LCD_PrHexByte
                                        (0841) 	
0D7C: 50 00    MOV   A,0x0              (0842) 	mov A, 00h
0D7E: 57 03    MOV   X,0x3              (0843) 	mov X, 03h
0D80: 7C 07 17 LCALL _LCD_Position      (0844) 	lcall LCD_Position
0D83: 51 56    MOV   A,[0x56]           (0845) 	mov A, [min_min]
0D85: 7C 05 B4 LCALL _LCD_PrHexByte     (0846) 	lcall LCD_PrHexByte
                                        (0847) 	
0D88: 50 00    MOV   A,0x0              (0848) 	mov A, 00h
0D8A: 57 06    MOV   X,0x6              (0849) 	mov X, 06h
0D8C: 7C 07 17 LCALL _LCD_Position      (0850) 	lcall LCD_Position
0D8F: 51 57    MOV   A,[0x57]           (0851) 	mov A, [min_sec]
0D91: 7C 05 B4 LCALL _LCD_PrHexByte     (0852) 	lcall LCD_PrHexByte
                                        (0853) 	
0D94: 50 00    MOV   A,0x0              (0854) 	mov A, 00h
0D96: 57 09    MOV   X,0x9              (0855) 	mov X, 09h
0D98: 7C 07 17 LCALL _LCD_Position      (0856) 	lcall LCD_Position
0D9B: 51 58    MOV   A,[0x58]           (0857) 	mov A, [min_ms]
0D9D: 7C 05 B4 LCALL _LCD_PrHexByte     (0858) 	lcall LCD_PrHexByte
                                        (0859) 	
0DA0: 50 01    MOV   A,0x1              (0860) 	mov A, 01h
0DA2: 57 04    MOV   X,0x4              (0861) 	mov X, 04h
0DA4: 7C 07 17 LCALL _LCD_Position      (0862) 	lcall LCD_Position
0DA7: 50 0E    MOV   A,0xE              (0863) 	mov A, >MINIMUM
0DA9: 57 63    MOV   X,0x63             (0864) 	mov X, <MINIMUM
0DAB: 7C 05 92 LCALL _LCD_PrCString     (0865) 	lcall LCD_PrCString
                                        (0866) 	
0DAE: 7F       RET                      (0867) 	ret
                                        (0868) 	
                                        (0869) 
                                        (0870) ;---------------------END MEMORY MODE----------------------------------------
                                        (0871) 	
                                        (0872) .terminate:
0DAF: 8F FF    JMP   0x0DAF             (0873)     jmp .terminate
                                        (0874) 	
                                        (0875) ;---------------------END OF MAIN CODE----------------------------------------
                                        (0876) ;-----------------------------------------------------------------------------
                                        (0877) 
                                        (0878) 
                                        (0879) 
                                        (0880) 
                                        (0881) 
                                        (0882) 
                                        (0883) 
                                        (0884) 
                                        (0885) ;-----------------------------------------------------------------------------
                                        (0886) ;---------------------ROUTINE CALLS-------------------------------------------
                                        (0887) 
                                        (0888) ;---------------------CLEAN LCD ROW1------------------------------------------
                                        (0889) Clean_LCD_Row0:
0DB1: 08       PUSH  A                  (0890) 	push A
0DB2: 10       PUSH  X                  (0891) 	push X
0DB3: 50 00    MOV   A,0x0              (0892) 	mov A, 00h
0DB5: 57 00    MOV   X,0x0              (0893) 	mov X, 00h
0DB7: 7C 07 17 LCALL _LCD_Position      (0894) 	lcall LCD_Position
0DBA: 50 0E    MOV   A,0xE              (0895) 	mov A, >CLEAN_LCD
0DBC: 57 82    MOV   X,0x82             (0896) 	mov X, <CLEAN_LCD
0DBE: 7C 05 92 LCALL _LCD_PrCString     (0897) 	lcall LCD_PrCString
0DC1: 20       POP   X                  (0898) 	pop X
0DC2: 18       POP   A                  (0899) 	pop A
0DC3: 7F       RET                      (0900) ret
                                        (0901) ;---------------------END CLEAN LCD ROW1---------------------------------------
                                        (0902) 	
                                        (0903) ;---------------------SAVE TIME------------------------------------------------
                                        (0904) Save_Time:
                                        (0905)     ;push A
                                        (0906) 	;push X
                                        (0907) 	
                                        (0908) ;		cmp [count_saved], 0Ah			;hasn't reached 10 yet
                                        (0909) ;		jnz write_saved_time
                                        (0910) 
                                        (0911) 	reset_count:
                                        (0912) ;		mov [count_saved], 00h			;back to initialized value
                                        (0913) ;		mov [save_time_index], 00h	
                                        (0914) 		
0DC4: 62 D5 06 MOV   REG[0xD5],0x6      (0915) 		mov reg[MVW_PP], 6				;writing on memory page 6
                                        (0916) 
                                        (0917) 	write_saved_time:
                                        (0918) 		;mov A, [addr_inc_ms]
                                        (0919) ;		mov A, FFh
                                        (0920) ;		mvi [save_time_index], A
                                        (0921) ;		;mov A, [addr_inc_s]
                                        (0922) ;		mov A, EEh
                                        (0923) ;		mvi [save_time_index], A
                                        (0924) ;		;mov A, [addr_inc_m]
                                        (0925) ;		mov A, DDh
                                        (0926) ;		mvi [save_time_index], A
                                        (0927) ;		;mov A, [addr_inc_h]
                                        (0928) ;		mov A, CCh
                                        (0929) ;		mvi [save_time_index], A
                                        (0930) ;		
                                        (0931) ;		inc [count_saved]
                                        (0932) ;		
                                        (0933) ;	mov A, 01h
                                        (0934) ;	mov X, 0Ch
                                        (0935) ;	call LCD_Position
                                        (0936) ;	mov A, [count_saved]
                                        (0937) ;	call LCD_PrHexByte
                                        (0938) 	
                                        (0939) 	;pop X
                                        (0940) 	;pop A
0DC7: 7F       RET                      (0941) ret
                                        (0942) 
                                        (0943) ;---------------------READ TIME------------------------------------------------
                                        (0944) Read_Time:
0DC8: 08       PUSH  A                  (0945)     push A
0DC9: 10       PUSH  X                  (0946) 	push X
                                        (0947) 	
                                        (0948) ;		cmp [count_saved], 0Ah			;hasn't reached 10 yet
                                        (0949) ;		jnz write_saved_time
                                        (0950) ;
                                        (0951) ;	reset_count:
                                        (0952) ;		mov [count_saved], 00h			;back to initialized value
                                        (0953) ;		mov [save_time_index], 00h	
                                        (0954) 
                                        (0955) 	read_saved_time:
0DCA: 3E 1A    MVI   A,[0x1A]           (0956) 		mvi A, [save_time_index]
0DCC: 53 10    MOV   [0x10],A           (0957) 		mov [read_addr_inc_ms], A
0DCE: 3E 1A    MVI   A,[0x1A]           (0958) 		mvi A,[save_time_index]
0DD0: 53 11    MOV   [0x11],A           (0959) 		mov [read_addr_inc_s], A 
0DD2: 3E 1A    MVI   A,[0x1A]           (0960) 		mvi A, [save_time_index]
0DD4: 53 12    MOV   [0x12],A           (0961) 		mov [read_addr_inc_m], A
0DD6: 3E 1A    MVI   A,[0x1A]           (0962) 		mvi A, [save_time_index]
0DD8: 53 13    MOV   [0x13],A           (0963) 		mov [read_addr_inc_h], A
                                        (0964) 	
0DDA: 90 03    CALL  0x0DDF             (0965) 		call Display_Read_Time
                                        (0966) 		
                                        (0967) 		
                                        (0968) 		;inc [count_saved]
                                        (0969) 		
                                        (0970) 	
0DDC: 20       POP   X                  (0971) 	pop X
0DDD: 18       POP   A                  (0972) 	pop A
0DDE: 7F       RET                      (0973) ret
                                        (0974) 
                                        (0975) 
                                        (0976) ;---------------------DISPLAY READ TIME-----------------------------------------
                                        (0977) Display_Read_Time:
                                        (0978) ;    push A
                                        (0979) ;	push X
                                        (0980) ;	
                                        (0981) ;	;call Clean_LCD_Row0
                                        (0982) ;	
                                        (0983) ;	
                                        (0984) ;	mov A, 00h
                                        (0985) ;	mov X, 00h
                                        (0986) ;	call LCD_Position
                                        (0987) ;	mov A, [read_addr_inc_ms]
                                        (0988) ;	call LCD_PrHexByte
                                        (0989) ;	
                                        (0990) ;	mov A, 00h
                                        (0991) ;	mov X, 03h
                                        (0992) ;	call LCD_Position
                                        (0993) ;	mov A, [read_addr_inc_s]
                                        (0994) ;	call LCD_PrHexByte
                                        (0995) ;	
                                        (0996) ;	mov A, 00h
                                        (0997) ;	mov X, 06h
                                        (0998) ;	call LCD_Position
                                        (0999) ;	mov A, [read_addr_inc_m]
                                        (1000) ;	call LCD_PrHexByte
                                        (1001) ;	
                                        (1002) ;	mov A, 00h
                                        (1003) ;	mov X, 09h
                                        (1004) ;	call LCD_Position
                                        (1005) ;	mov A, [read_addr_inc_h]
                                        (1006) ;	call LCD_PrHexByte	
                                        (1007) ;		
                                        (1008) ;		;inc [count_saved]
                                        (1009) ;		
                                        (1010) ;	
                                        (1011) ;	pop X
                                        (1012) ;	pop A
0DDF: 7F       RET                      (1013) ret
                                        (1014) 
                                        (1015) ;---------------------END OF ROUTINE CALLS------------------------------------
                                        (1016) ;-----------------------------------------------------------------------------
                                        (1017) 
                                        (1018) 
                                        (1019) 
                                        (1020) .LITERAL 
                                        (1021) THE_STRNG:
                                        (1022) ds "EvryTng is Awsme"
                                        (1023) db 00h
                                        (1024) .ENDLITERAL 
                                        (1025) 
                                        (1026) .LITERAL 
                                        (1027) TENTHSEC_MODE:
                                        (1028) ds "ACC: TENTH      "
                                        (1029) db 00h
                                        (1030) .ENDLITERAL 
                                        (1031) 
                                        (1032) .LITERAL 
                                        (1033) HALFSEC_MODE:
                                        (1034) ds "ACC: HALF     "
                                        (1035) db 00h
                                        (1036) .ENDLITERAL 
                                        (1037) 
                                        (1038) .LITERAL 
                                        (1039) SEC_MODE:
                                        (1040) ds "ACC: SEC       "
                                        (1041) db 00h
                                        (1042) .ENDLITERAL 
                                        (1043) 
                                        (1044) .LITERAL 
                                        (1045) ACCURACY_MODE:
                                        (1046) ds "ACCURACY MODE "
                                        (1047) db 00h
                                        (1048) .ENDLITERAL
                                        (1049) 
                                        (1050) .LITERAL 
                                        (1051) BUTTON_MODE:
                                        (1052) ds "BUTTON MODE     "
                                        (1053) db 00h
                                        (1054) .ENDLITERAL
                                        (1055) 
                                        (1056) .LITERAL 
                                        (1057) DEBUG_MODE:
                                        (1058) ds "DEBUG MODE      "
                                        (1059) db 00h
                                        (1060) .ENDLITERAL
                                        (1061) 
                                        (1062) .LITERAL 
                                        (1063) CLEAR_TIME:
                                        (1064) ds "00:00:00:00     "
                                        (1065) db 00h
                                        (1066) .ENDLITERAL
                                        (1067) 
                                        (1068) .LITERAL 
                                        (1069) MINIMUM:
                                        (1070) ds "MINIMUM"
                                        (1071) db 00h
                                        (1072) .ENDLITERAL 
                                        (1073) 
                                        (1074) .LITERAL 
                                        (1075) MAXIMUM:
                                        (1076) ds "MAXIMUM"
                                        (1077) db 00h
                                        (1078) .ENDLITERAL 
                                        (1079) 
                                        (1080) .LITERAL 
                                        (1081) THRESHOLD_MODE:
                                        (1082) ds "THRESHOLD MODE"
                                        (1083) db 00h
                                        (1084) .ENDLITERAL 
                                        (1085) 
                                        (1086) .LITERAL 
                                        (1087) CLEAN_LCD:
                                        (1088) ds "                 "
                                        (1089) db 00h
                                        (1090) .ENDLITERAL 
                                        (1091) 
                                        (1092) .LITERAL 
                                        (1093) SOUND_MODE:
                                        (1094) ds "SOUND MODE       "
                                        (1095) db 00h
                                        (1096) .ENDLITERAL 
                                        (1097) 
                                        (1098) .LITERAL 
                                        (1099) MEMORY_MODE:
                                        (1100) ds "MEMORY MODE      "
                                        (1101) db 00h
                                        (1102) .ENDLITERAL 
                                        (1103) 
                                        (1104) .LITERAL 
                                        (1105) SAVE:
                                        (1106) ds "SAVE"
                                        (1107) db 00h
                                        (1108) .ENDLITERAL 
                                        (1109) 
                                        (1110) ;.LITERAL 
                                        (1111) ;THE_STRING20:
                                        (1112) ;ds ":"
                                        (1113) ;db 00h
                                        (1114) ;.ENDLITERAL
                                        (1115) ;	
                                        (1116) ;.LITERAL 
                                        (1117) ;THE_STRING21:
                                        (1118) ;ds "."
                                        (1119) ;db 00h
                                        (1120) ;.ENDLITERAL
                                        (1121) ;
                                        (1122) ;.LITERAL 
                                        (1123) ;STRING3:
                                        (1124) ;ds "AVERAGE"
                                        (1125) ;db 00h
                                        (1126) ;.ENDLITERAL 
                                        (1127) 
                                        (1128) 
                                        (1129) 
                                        (1130) 
FILE: ..\..\..\..\proj1_mem\proj1_mem\proj1_mem\routine_avg.asm
                                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) 
                                        (0009) export _routine_avg
                                        (0010) 
                                        (0011) 
                                        (0012) input_count: equ 62h	;71h
                                        (0013) counter_sum: equ 63h	;69h
                                        (0014) counting_adds: equ 64h	;70h
                                        (0015) operand_2:equ 65h		;40h
                                        (0016) counter_input: equ 67h	
                                        (0017) result_avg: equ 77h		;68h
                                        (0018) quotient_val: equ 11h	;11h
                                        (0019) 
                                        (0020) 
                                        (0021) 
                                        (0022) _routine_avg:
                                        (0023) 
0EBD: 62 D5 06 MOV   REG[0xD5],0x6      (0024) mov reg[MVW_PP],06h
                                        (0025) 
                                        (0026) ;==================================================================================
                                        (0027) ;compute the sum here
                                        (0028) ;==================================================================================
                                        (0029) 
                                        (0030) ;registers 90h(hrs),91h(mins),92h(sec),93h(ms) will hold the sum 
0EC0: 62 D4 06 MOV   REG[0xD4],0x6      (0031) mov reg[MVR_PP],06h
                                        (0032) 
0EC3: 55 63 90 MOV   [0x63],0x90        (0033) mov [counter_sum],90h
0EC6: 55 67 00 MOV   [0x67],0x0         (0034) mov [counter_input],00h
0EC9: 50 00    MOV   A,0x0              (0035) mov A,00h
0ECB: 3F 63    MVI   [0x63],A           (0036) mvi [counter_sum],A
0ECD: 3F 63    MVI   [0x63],A           (0037) mvi [counter_sum],A
0ECF: 3F 63    MVI   [0x63],A           (0038) mvi [counter_sum],A
0ED1: 3F 63    MVI   [0x63],A           (0039) mvi [counter_sum],A
                                        (0040) ;;register counter_sum will point to register 90h so that counter_sum can be implemented in MVI
                                        (0041) ;;load the first set of inputs into register that hold sum (90h,91h,92h)
                                        (0042) 
                                        (0043) 
0ED3: 55 64 04 MOV   [0x64],0x4         (0044) mov [counting_adds],4h	;since there will be 4 additions to finish adding two "times" we will set a counter for that.
0ED6: 55 62 09 MOV   [0x62],0x9         (0045) mov [input_count],09h	;This will enable us to add 4 sets of "time" values. This can be changed as per the requirement.
                                        (0046) compute_sum:
0ED9: 55 64 04 MOV   [0x64],0x4         (0047) mov [counting_adds],4h
0EDC: 55 63 90 MOV   [0x63],0x90        (0048) mov [counter_sum],90h
                                        (0049) add_values:
                                        (0050) ;read value from the 1st set of inputs
0EDF: 3E 67    MVI   A,[0x67]           (0051) mvi A,[counter_input]
0EE1: 53 65    MOV   [0x65],A           (0052) mov [operand_2],A
                                        (0053) ;move value in 90h to add to corresponding ms value 
0EE3: 3E 63    MVI   A,[0x63]           (0054) mvi A,[counter_sum]
0EE5: 02 65    ADD   A,[0x65]           (0055) add A,[operand_2]
0EE7: 39 3C    CMP   A,0x3C             (0056) cmp A,3Ch	;compare each value with 60 so that when it exceeds 60, add 1 to next value in the sequence.
0EE9: D0 15    JNC   0x0EFF             (0057) jnc add_one	;if A is >= 3C increment the value in the sequence by 1
                                        (0058) ;move the sum into 90h register which is designated to hold ms values
0EEB: 7A 63    DEC   [0x63]             (0059) dec [counter_sum]
0EED: 3F 63    MVI   [0x63],A           (0060) mvi [counter_sum],A
0EEF: 7A 64    DEC   [0x64]             (0061) dec [counting_adds]
0EF1: 3C 64 00 CMP   [0x64],0x0         (0062) cmp [counting_adds],00	;compare if all 4 values are added. 
0EF4: BF EA    JNZ   0x0EDF             (0063) jnz add_values
0EF6: 7A 62    DEC   [0x62]             (0064) dec [input_count]		;this counter keeps track of how many sets of values have been added.
0EF8: 3C 62 00 CMP   [0x62],0x0         (0065) cmp [input_count],00
0EFB: BF DD    JNZ   0x0ED9             (0066) jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
0EFD: 80 21    JMP   0x0F1F             (0067) jmp _avg_cal
                                        (0068) ;;
                                        (0069) ;;incrementing the next value by 1
                                        (0070) add_one:
0EFF: 11 3C    SUB   A,0x3C             (0071) sub A,3Ch	;get the value to be written into 90h after subtracting the carry value 
0F01: 7A 63    DEC   [0x63]             (0072) dec [counter_sum]
0F03: 3F 63    MVI   [0x63],A           (0073) mvi [counter_sum],A 
0F05: 3E 63    MVI   A,[0x63]           (0074) mvi A,[counter_sum]	;read value in 91h so that carry value can be added to it
0F07: 01 01    ADD   A,0x1              (0075) add A,1		;add carry value
0F09: 7A 63    DEC   [0x63]             (0076) dec [counter_sum]		
0F0B: 3F 63    MVI   [0x63],A           (0077) mvi [counter_sum],A	;write back the value to 91h after adding carry.
0F0D: 7A 63    DEC   [0x63]             (0078) dec [counter_sum]	
0F0F: 7A 64    DEC   [0x64]             (0079) dec [counting_adds]
0F11: 3C 64 00 CMP   [0x64],0x0         (0080) cmp [counting_adds],00	;compare if all 4 values are added. 
0F14: BF CA    JNZ   0x0EDF             (0081) jnz add_values
0F16: 7A 62    DEC   [0x62]             (0082) dec [input_count]		;this counter keeps track of how many sets of values have been added.
0F18: 3C 62 00 CMP   [0x62],0x0         (0083) cmp [input_count],00
0F1B: BF BD    JNZ   0x0ED9             (0084) jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
0F1D: 80 01    JMP   0x0F1F             (0085) jmp _avg_cal
                                        (0086) ;
                                        (0087) ;
                                        (0088) ;==================================================================================
                                        (0089) ;compute the average values of the sum here
                                        (0090) ;==================================================================================
                                        (0091) ;USED REGISTERS:
                                        (0092) ;00h-39h to store input data
                                        (0093) ;93h -> no. of hours in the sum
                                        (0094) ;92h -> no. of minutes in the sum
                                        (0095) ;91h -> no. of seconds in the sum
                                        (0096) ;90h -> no. of milliseconds in the sum
                                        (0097) ;we will use registers 50h to 59h to save results of the computations
                                        (0098) ;95h will hold the value 3Ch which indicates 60min/sec
                                        (0099) 
                                        (0100) ;Storing computed averages in 83h,82h,81h,80h
                                        (0101) ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                        (0102) ;To write values into a RAM page, use CUR_PP register and mov instruction; This can also be 
                                        (0103) ;done through MVW_PP but mvi instruction has to be used which is not always feasible
                                        (0104) ;To read values from a RAM page, use MVR_PP register and mvi instruction
                                        (0105) ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                        (0106) 
                                        (0107) _avg_cal:
0F1F: 55 62 09 MOV   [0x62],0x9         (0108) mov [input_count],09h
0F22: 55 72 00 MOV   [0x72],0x0         (0109) mov [72h],00h
0F25: 62 D0 06 MOV   REG[0xD0],0x6      (0110) mov reg[CUR_PP], 06h
0F28: 5F 10 93 MOV   [0x10],[0x93]      (0111) mov [10h], [93h] 			;ram_2[10h]=value in 93h which is the sum of hours
0F2B: 62 D0 00 MOV   REG[0xD0],0x0      (0112) mov reg[CUR_PP], 00h		;set Current Page Pointer back to 0
0F2E: 55 EB 10 MOV   [0xEB],0x10        (0113) mov [EBh], 10h 				;initialize MVI read pointer to 10h
0F31: 3E EB    MVI   A,[0xEB]           (0114) mvi A, [EBh]				;read the value in 93h to A
0F33: 55 86 00 MOV   [0x86],0x0         (0115) mov [86h],00h
0F36: 55 77 B0 MOV   [0x77],0xB0        (0116) mov [result_avg],B0h
0F39: 55 11 00 MOV   [0x11],0x0         (0117) mov [quotient_val], 00h
                                        (0118) ;=========================================================================================================
                                        (0119) ;computes average of hours: "compute quotient(average of hours) and remainder (value to be added to min)"
                                        (0120) ;=========================================================================================================
                                        (0121) 
                                        (0122) compute_avg_hr:
0F3C: 3A 62    CMP   A,[0x62]           (0123) cmp A,[input_count]
0F3E: D0 09    JNC   0x0F48             (0124) jnc find_q_hr
0F40: 53 85    MOV   [0x85],A           (0125) mov [85h],A					;85h holds the remainder
0F42: 51 11    MOV   A,[0x11]           (0126) mov A,[quotient_val]
0F44: 3F 77    MVI   [0x77],A           (0127) mvi [result_avg],A	;register 83h holds the quotient
0F46: 80 07    JMP   0x0F4E             (0128) jmp compute_avg_min
                                        (0129) 
                                        (0130) find_q_hr:
0F48: 12 62    SUB   A,[0x62]           (0131) sub A,[input_count]
0F4A: 76 11    INC   [0x11]             (0132) inc [quotient_val]
0F4C: 8F EF    JMP   0x0F3C             (0133) jmp compute_avg_hr
                                        (0134) 
                                        (0135) ;======================================================================================================
                                        (0136) ;computes average of minutes:
                                        (0137) ;======================================================================================================
                                        (0138) 
                                        (0139) compute_avg_min:
0F4E: 55 72 0A MOV   [0x72],0xA         (0140) mov [72h],0Ah
0F51: 55 61 00 MOV   [0x61],0x0         (0141) mov [61h],00h
0F54: 55 68 00 MOV   [0x68],0x0         (0142) mov [68h],00h
0F57: 50 00    MOV   A,0x0              (0143) mov A,00h
                                        (0144) 
                                        (0145) ;=======================================================
                                        (0146) ;compute remainder after hrs are converted into minutes. 
                                        (0147) ;=======================================================
                                        (0148) Com_rem:
0F59: 55 11 00 MOV   [0x11],0x0         (0149) mov [quotient_val],00h
0F5C: 55 75 06 MOV   [0x75],0x6         (0150) mov [75h],06h		;This will be used to convert remainder into min or sec
                                        (0151) 
                                        (0152) ;==============================================================
                                        (0153) ;compute product internally 
                                        (0154) ;==============================================================
                                        (0155) ;compute product
                                        (0156) compute_prd:
0F5F: 02 85    ADD   A,[0x85]           (0157) add A,[85h]
0F61: 7A 75    DEC   [0x75]             (0158) dec [75h]
0F63: 3C 75 00 CMP   [0x75],0x0         (0159) cmp [75h],00h
0F66: BF F8    JNZ   0x0F5F             (0160) jnz compute_prd
                                        (0161) 
                                        (0162) ;==============================================================
                                        (0163) ;compute remainder and add to previous product
                                        (0164) ;==============================================================
                                        (0165) compute_rem:
0F68: 3A 62    CMP   A,[0x62]           (0166) cmp A,[input_count]
0F6A: D0 17    JNC   0x0F82             (0167) jnc find_q1
0F6C: 53 86    MOV   [0x86],A           (0168) mov [86h],A			;86h holds the remainder
0F6E: 5F 68 11 MOV   [0x68],[0x11]      (0169) mov [68h],[quotient_val]		;holds the quotient
0F71: 51 68    MOV   A,[0x68]           (0170) mov A,[68h]
0F73: 04 61    ADD   [0x61],A           (0171) add [61h],A
0F75: 50 00    MOV   A,0x0              (0172) mov A,00h
0F77: 02 86    ADD   A,[0x86]           (0173) add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
0F79: 7A 72    DEC   [0x72]             (0174) dec [72h]
0F7B: 3C 72 00 CMP   [0x72],0x0         (0175) cmp [72h],00h
0F7E: BF DA    JNZ   0x0F59             (0176) jnz Com_rem
0F80: 80 07    JMP   0x0F88             (0177) jmp add_tonext
                                        (0178) 
                                        (0179) find_q1:
0F82: 12 62    SUB   A,[0x62]           (0180) sub A,[input_count]
0F84: 76 11    INC   [0x11]             (0181) inc [quotient_val]
0F86: 8F E1    JMP   0x0F68             (0182) jmp compute_rem
                                        (0183) 
                                        (0184) 
                                        (0185) ;==============================================================
                                        (0186) ;add remainder from above computation to "sum of minutes"
                                        (0187) ;==============================================================
                                        (0188) 
                                        (0189) ;A=remainder of the previous operation
                                        (0190) ;multiply that value with 60 (to convert remaining hours into minutes) and add it to minutes
                                        (0191) 
                                        (0192) add_tonext:
0F88: 62 D0 06 MOV   REG[0xD0],0x6      (0193) mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
0F8B: 5F 10 92 MOV   [0x10],[0x92]      (0194) mov [10h], [92h] 				
0F8E: 62 D0 00 MOV   REG[0xD0],0x0      (0195) mov reg[CUR_PP], 00h
                                        (0196) 
0F91: 55 EB 10 MOV   [0xEB],0x10        (0197) mov [EBh], 10h 		;initialize MVI read pointer to 10h
0F94: 3E EB    MVI   A,[0xEB]           (0198) mvi A, [EBh]		;read the value in 92h into A
0F96: 02 86    ADD   A,[0x86]           (0199) add A,[86h]
0F98: 55 11 00 MOV   [0x11],0x0         (0200) mov [quotient_val],00h
                                        (0201) ;================================================================================
                                        (0202) ;compute quotient(gives the average of minutes) and remainder(added to seconds)
                                        (0203) ;================================================================================
                                        (0204) 
                                        (0205) compute_avg:
0F9B: 3A 62    CMP   A,[0x62]           (0206) cmp A,[input_count]
0F9D: D0 0B    JNC   0x0FA9             (0207) jnc find_q_min
0F9F: 53 85    MOV   [0x85],A           (0208) mov [85h],A					;85h holds the remainder
0FA1: 51 11    MOV   A,[0x11]           (0209) mov A,[quotient_val]
0FA3: 02 61    ADD   A,[0x61]           (0210) add A,[61h]
0FA5: 3F 77    MVI   [0x77],A           (0211) mvi [result_avg],A			;register 81h holds the quotient
0FA7: 80 07    JMP   0x0FAF             (0212) jmp compute_avg_sec
                                        (0213) 
                                        (0214) find_q_min:
0FA9: 12 62    SUB   A,[0x62]           (0215) sub A,[input_count]
0FAB: 76 11    INC   [0x11]             (0216) inc [quotient_val]
0FAD: 8F ED    JMP   0x0F9B             (0217) jmp compute_avg
                                        (0218) 
                                        (0219) 
                                        (0220) ;======================================================================================================
                                        (0221) ;computes average of seconds:
                                        (0222) ;======================================================================================================
                                        (0223) 
                                        (0224) compute_avg_sec:
0FAF: 55 72 0A MOV   [0x72],0xA         (0225) mov [72h],0Ah
0FB2: 55 61 00 MOV   [0x61],0x0         (0226) mov [61h],00h
0FB5: 55 68 00 MOV   [0x68],0x0         (0227) mov [68h],00h
0FB8: 50 00    MOV   A,0x0              (0228) mov A,00h
                                        (0229) 
                                        (0230) ;=======================================================================================================
                                        (0231) ;compute remainder after minutes are converted into seconds. 
                                        (0232) ;=======================================================================================================
                                        (0233) Com_rem_sec:
0FBA: 55 11 00 MOV   [0x11],0x0         (0234) mov [quotient_val],00h
0FBD: 55 75 06 MOV   [0x75],0x6         (0235) mov [75h],06h		;This will be used to convert remainder into sec or resolution(sec)
                                        (0236) 
                                        (0237) ;=======================================================================================================
                                        (0238) ;compute product internally 
                                        (0239) ;=======================================================================================================
                                        (0240) ;compute product
                                        (0241) compute_prd_sec:
0FC0: 02 85    ADD   A,[0x85]           (0242) add A,[85h]
0FC2: 7A 75    DEC   [0x75]             (0243) dec [75h]
0FC4: 3C 75 00 CMP   [0x75],0x0         (0244) cmp [75h],00h
0FC7: BF F8    JNZ   0x0FC0             (0245) jnz compute_prd_sec
                                        (0246) 
                                        (0247) ;=======================================================================================================
                                        (0248) ;compute remainder and add to previous product
                                        (0249) ;=======================================================================================================
                                        (0250) compute_rem_sec:
0FC9: 3A 62    CMP   A,[0x62]           (0251) cmp A,[input_count]
0FCB: D0 17    JNC   0x0FE3             (0252) jnc find_q1_sec
0FCD: 53 86    MOV   [0x86],A           (0253) mov [86h],A			;86h holds the remainder
0FCF: 5F 68 11 MOV   [0x68],[0x11]      (0254) mov [68h],[quotient_val]		;holds the quotient
0FD2: 51 68    MOV   A,[0x68]           (0255) mov A,[68h]
0FD4: 04 61    ADD   [0x61],A           (0256) add [61h],A
0FD6: 50 00    MOV   A,0x0              (0257) mov A,00h
0FD8: 02 86    ADD   A,[0x86]           (0258) add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
0FDA: 7A 72    DEC   [0x72]             (0259) dec [72h]
0FDC: 3C 72 00 CMP   [0x72],0x0         (0260) cmp [72h],00h
0FDF: BF DA    JNZ   0x0FBA             (0261) jnz Com_rem_sec
0FE1: 80 07    JMP   0x0FE9             (0262) jmp add_tonext_sec
                                        (0263) 
                                        (0264) find_q1_sec:
0FE3: 12 62    SUB   A,[0x62]           (0265) sub A,[input_count]
0FE5: 76 11    INC   [0x11]             (0266) inc [quotient_val]
0FE7: 8F E1    JMP   0x0FC9             (0267) jmp compute_rem_sec
                                        (0268) 
                                        (0269) 
                                        (0270) ;==============================================================
                                        (0271) ;add remainder from above computation to "sum of minutes"
                                        (0272) ;==============================================================
                                        (0273) 
                                        (0274) ;A=remainder of the previous operation
                                        (0275) ;multiply that value with 60 (to convert remaining hours into minutes) and add it to minutes
                                        (0276) 
                                        (0277) add_tonext_sec:
0FE9: 62 D0 06 MOV   REG[0xD0],0x6      (0278) mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
0FEC: 5F 10 91 MOV   [0x10],[0x91]      (0279) mov [10h], [91h] 				
0FEF: 62 D0 00 MOV   REG[0xD0],0x0      (0280) mov reg[CUR_PP], 00h
                                        (0281) 
0FF2: 55 EB 10 MOV   [0xEB],0x10        (0282) mov [EBh], 10h 		;initialize MVI read pointer to 10h
0FF5: 3E EB    MVI   A,[0xEB]           (0283) mvi A, [EBh]		;read the value in 92h into A
0FF7: 02 86    ADD   A,[0x86]           (0284) add A,[86h]
0FF9: 55 11 00 MOV   [0x11],0x0         (0285) mov [quotient_val],00h
                                        (0286) ;================================================================================
                                        (0287) ;compute quotient(gives the average of minutes) and remainder(added to seconds)
                                        (0288) ;================================================================================
                                        (0289) 
                                        (0290) compute_avg_sec1:
0FFC: 3A 62    CMP   A,[0x62]           (0291) cmp A,[input_count]
0FFE: D0 0B    JNC   0x100A             (0292) jnc find_q_sec
1000: 53 85    MOV   [0x85],A           (0293) mov [85h],A					;85h holds the remainder
1002: 51 11    MOV   A,[0x11]           (0294) mov A,[quotient_val]
1004: 02 61    ADD   A,[0x61]           (0295) add A,[61h]
1006: 3F 77    MVI   [0x77],A           (0296) mvi [result_avg],A					;register 81h holds the quotient
1008: 80 07    JMP   0x1010             (0297) jmp compute_avg_end
                                        (0298) 
                                        (0299) find_q_sec:
100A: 12 62    SUB   A,[0x62]           (0300) sub A,[input_count]
100C: 76 11    INC   [0x11]             (0301) inc [quotient_val]
100E: 8F ED    JMP   0x0FFC             (0302) jmp compute_avg_sec1
                                        (0303) 
                                        (0304) 
                                        (0305) ;=======================================================================
                                        (0306) ;computes the resolution: just the remainder after averaging seconds
                                        (0307) ;=======================================================================
                                        (0308) compute_avg_end:
1010: 55 64 B3 MOV   [0x64],0xB3        (0309) mov [counting_adds],B3h
1013: 51 85    MOV   A,[0x85]           (0310) mov A,[85h]
1015: 3F 64    MVI   [0x64],A           (0311) mvi [counting_adds],A
                                        (0312) 
                                        (0313) ;=======================================================================
                                        (0314) ;display computed avg
                                        (0315) ;=======================================================================
                                        (0316) 
1017: 55 67 B0 MOV   [0x67],0xB0        (0317) mov [counter_input],B0h
101A: 3E 67    MVI   A,[0x67]           (0318) mvi A,[counter_input]
101C: 53 C0    MOV   [0xC0],A           (0319) mov [C0h],A
101E: 3E 67    MVI   A,[0x67]           (0320) mvi A,[counter_input]
1020: 53 C1    MOV   [0xC1],A           (0321) mov [C1h],A
1022: 3E 67    MVI   A,[0x67]           (0322) mvi A,[counter_input]
1024: 53 C2    MOV   [0xC2],A           (0323) mov [C2h],A
1026: 3E 67    MVI   A,[0x67]           (0324) mvi A,[counter_input]
1028: 53 C3    MOV   [0xC3],A           (0325) mov [C3h],A
                                        (0326) 
102A: 7C 06 A4 LCALL _LCD_Init|_LCD_Start|LCD_Start(0327)     lcall   LCD_Start       ; Initialize LCD
102D: 50 00    MOV   A,0x0              (0328) 	mov    A,00h           ; Set cursor position at row = 0
102F: 57 00    MOV   X,0x0              (0329)    	mov    X,00h           ; col = 5
1031: 7C 07 17 LCALL _LCD_Position      (0330)    	lcall   LCD_Position
1034: 50 10    MOV   A,0x10             (0331)    	mov    A, >STRING3     	; Higher byte
1036: 57 9A    MOV   X,0x9A             (0332)    	mov	   X, <STRING3
1038: 7C 05 92 LCALL _LCD_PrCString     (0333)     lcall  LCD_PrCString   
                                        (0334) 
103B: 50 01    MOV   A,0x1              (0335) 	mov    A,01h           ; Set cursor position at row = 0
103D: 57 00    MOV   X,0x0              (0336)    	mov    X,00h           ; col = 5
103F: 7C 07 17 LCALL _LCD_Position      (0337)    	lcall   LCD_Position
1042: 51 C0    MOV   A,[0xC0]           (0338)    	mov    A,[C0h]      	; Higher byte
1044: 7C 05 B4 LCALL _LCD_PrHexByte     (0339)     lcall   LCD_PrHexByte     
                                        (0340) 	
1047: 50 01    MOV   A,0x1              (0341) 	mov    A,01h           ; Set cursor position at row = 0
1049: 57 02    MOV   X,0x2              (0342)    	mov    X,02h           ; col = 5
104B: 7C 07 17 LCALL _LCD_Position      (0343)    	lcall   LCD_Position
104E: 50 10    MOV   A,0x10             (0344)    	mov    A, >THE_STRING20     	; Higher byte
1050: 57 96    MOV   X,0x96             (0345)    	mov	   X, <THE_STRING20
1052: 7C 05 92 LCALL _LCD_PrCString     (0346)     lcall  LCD_PrCString          
                                        (0347) 	
1055: 50 01    MOV   A,0x1              (0348)   	mov    A,01h           ; Set cursor position at row = 0
1057: 57 03    MOV   X,0x3              (0349)    	mov    X,03h           ; col = 5
1059: 7C 07 17 LCALL _LCD_Position      (0350)    	lcall   LCD_Position
105C: 51 C1    MOV   A,[0xC1]           (0351)    	mov    A,[C1h]      	; Lower byte
105E: 7C 05 B4 LCALL _LCD_PrHexByte     (0352)    	lcall   LCD_PrHexByte  
                                        (0353) 	
1061: 50 01    MOV   A,0x1              (0354) 	mov    A,01h           ; Set cursor position at row = 0
1063: 57 05    MOV   X,0x5              (0355)    	mov    X,05h           ; col = 5
1065: 7C 07 17 LCALL _LCD_Position      (0356)    	lcall   LCD_Position
1068: 50 10    MOV   A,0x10             (0357)    	mov    A, >THE_STRING20     	; Higher byte
106A: 57 96    MOV   X,0x96             (0358) 	mov	   X, <THE_STRING20
106C: 7C 05 92 LCALL _LCD_PrCString     (0359)     lcall   LCD_PrCString          
                                        (0360) 	
106F: 50 01    MOV   A,0x1              (0361) 	mov    A,01h           ; Set cursor position at row = 0
1071: 57 06    MOV   X,0x6              (0362)    	mov    X,06h           ; col = 5
1073: 7C 07 17 LCALL _LCD_Position      (0363)    	lcall   LCD_Position
1076: 51 C2    MOV   A,[0xC2]           (0364)    	mov    A,[C2h]      	; Load pointer to ROM string
1078: 7C 05 B4 LCALL _LCD_PrHexByte     (0365)    	lcall   LCD_PrHexByte   
                                        (0366) 	
107B: 50 01    MOV   A,0x1              (0367) 	mov    A,01h           ; Set cursor position at row = 0
107D: 57 08    MOV   X,0x8              (0368)    	mov    X,08h           ; col = 5
107F: 7C 07 17 LCALL _LCD_Position      (0369)    	lcall   LCD_Position
1082: 50 10    MOV   A,0x10             (0370)    	mov    A, >THE_STRING21      	; Higher byte
1084: 57 98    MOV   X,0x98             (0371) 	mov	   X, <THE_STRING21
1086: 7C 05 92 LCALL _LCD_PrCString     (0372)     lcall   LCD_PrCString          
                                        (0373) 	
1089: 50 01    MOV   A,0x1              (0374) 	mov    A,01h           ; Set cursor position at row = 0
108B: 57 09    MOV   X,0x9              (0375)    	mov    X,09h           ; col = 5
108D: 7C 07 17 LCALL _LCD_Position      (0376)    	lcall   LCD_Position
1090: 51 C3    MOV   A,[0xC3]           (0377)    	mov    A,[C3h]      	; Load pointer to ROM string
1092: 7C 05 B4 LCALL _LCD_PrHexByte     (0378)    	lcall   LCD_PrHexByte  
                                        (0379) 
                                        (0380) 	
1095: 7F       RET                      (0381) ret
                                        (0382) 	
                                        (0383) .LITERAL 
                                        (0384) THE_STRING20:
                                        (0385) ds ":"
                                        (0386) db 00h
                                        (0387) .ENDLITERAL
                                        (0388) 	
                                        (0389) .LITERAL 
                                        (0390) THE_STRING21:
                                        (0391) ds "."
                                        (0392) db 00h
                                        (0393) .ENDLITERAL
                                        (0394) 
                                        (0395) .LITERAL 
                                        (0396) STRING3:
                                        (0397) ds "AVERAGE"
                                        (0398) db 00h
                                        (0399) .ENDLITERAL 
                                        (0400) 	
                                        (0401) .terminate:
10A2: 8F FF    JMP   0x10A2             (0402) jmp .terminateFILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) include "program_defines.inc"
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
10A4: 08       PUSH  A                  (0059)     push A
10A5: 10       PUSH  X                  (0060)     push X
                                        (0061) 	
                                        (0062) ;	inc [250]
                                        (0063) ;	mov A, 01h
                                        (0064) ;	mov X, 00h
                                        (0065) ;	call LCD_Position
                                        (0066) ;	mov A, [250]
                                        (0067) ;	call LCD_PrHexByte
                                        (0068) 	
10A6: 5D 08    MOV   A,REG[0x8]         (0069) 	mov A,reg[PRT2DR]  ; detect falling edge or rising edge
10A8: 21 80    AND   A,0x80             (0070) 	and A,80h
10AA: A0 06    JZ    0x10B1             (0071) 	jz falling
                                        (0072) 	
                                        (0073) 	rising:
10AC: 55 0B 00 MOV   [0xB],0x0          (0074) 	mov [addr_internal_inc_ms],00h
10AF: 80 1B    JMP   0x10CB             (0075) 	jmp finished
                                        (0076) 	
                                        (0077) 	falling:
10B1: 51 0B    MOV   A,[0xB]            (0078) 	mov A,[addr_internal_inc_ms]
10B3: 58 0B    MOV   X,[0xB]            (0079) 	mov X,[addr_internal_inc_ms]
                                        (0080) 	;;missing
10B5: 11 01    SUB   A,0x1              (0081) 	sub A,01h     ; noise smaller than 0.1s
10B7: D0 01    JNC   0x10B9             (0082) 	jnc shrt_prs         ; not switch noise
                                        (0083) 	
                                        (0084) 	shrt_prs:
10B9: 5B       MOV   A,X                (0085) 	mov A,X     ; noise smaller than 0.1s
10BA: 11 1E    SUB   A,0x1E             (0086) 	sub A, 1Eh
10BC: D0 08    JNC   0x10C5             (0087) 	jnc lng_prs
10BE: 55 14 00 MOV   [0x14],0x0         (0088) 	mov [addr_lng_p], 00h
10C1: 76 15    INC   [0x15]             (0089) 	inc [addr_shrt_p]
10C3: 80 07    JMP   0x10CB             (0090) 	jmp finished
                                        (0091) 	
                                        (0092) 	lng_prs:
10C5: 55 14 01 MOV   [0x14],0x1         (0093) 	mov [addr_lng_p],01h
10C8: 55 15 00 MOV   [0x15],0x0         (0094) 	mov [addr_shrt_p],00h
                                        (0095) 	 
                                        (0096)     finished:
10CB: 20       POP   X                  (0097)    	pop X
10CC: 18       POP   A                  (0098)     pop A
10CD: 7E       RETI                     (0099)     reti
                                        (0100)    ;---------------------------------------------------
                                        (0101)    ; Insert your custom code above this banner
                                        (0102)    ;---------------------------------------------------
                                        (0103)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0104) 
10CE: 7E       RETI                     (0105)    reti
                                        (0106) 
                                        (0107) 
                                        (0108) ; end of file PSoCGPIOINT.asm
