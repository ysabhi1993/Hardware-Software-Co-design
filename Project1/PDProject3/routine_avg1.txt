;;===============================================================================================
;;AVERAGE COMPUTATION
;;===============================================================================================
;average:
;cmp [addr_shrt_p],01h
;jz shortest_time
;
;area text(rom,rel)
;mov reg[MVW_PP],06h
;
;;==================================================================================
;;compute the sum here
;;==================================================================================
;
;;registers 90h(hrs),91h(mins),92h(sec),93h(ms) will hold the sum 
;mov reg[MVR_PP],06h
;
;mov [counter_sum],90h
;mov [counter_input],A0h
;mov A,00h
;mvi [counter_sum],A
;mvi [counter_sum],A
;mvi [counter_sum],A
;mvi [counter_sum],A
;;;register counter_sum will point to register 90h so that counter_sum can be implemented in MVI
;;;load the first set of inputs into register that hold sum (90h,91h,92h)
;
;
;mov [counting_adds],4h	;since there will be 4 additions to finish adding two "times" we will set a counter for that.
;mov [input_count],09h	;This will enable us to add 4 sets of "time" values. This can be changed as per the requirement.
;compute_sum:
;mov [counting_adds],4h
;mov [counter_sum],90h
;add_values:
;;read value from the 1st set of inputs
;mvi A,[counter_input]
;mov [operand_2],A
;;move value in 90h to add to corresponding ms value 
;mvi A,[counter_sum]
;add A,[operand_2]
;cmp A,3Ch	;compare each value with 60 so that when it exceeds 60, add 1 to next value in the sequence.
;jnc add_one	;if A is >= 3C increment the value in the sequence by 1
;;move the sum into 90h register which is designated to hold ms values
;dec [counter_sum]
;mvi [counter_sum],A
;dec [counting_adds]
;cmp [counting_adds],00	;compare if all 4 values are added. 
;jnz add_values
;dec [input_count]		;this counter keeps track of how many sets of values have been added.
;cmp [input_count],00
;jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
;jmp _avg_cal
;;;
;;;incrementing the next value by 1
;add_one:
;sub A,3Ch	;get the value to be written into 90h after subtracting the carry value 
;dec [counter_sum]
;mvi [counter_sum],A 
;mvi A,[counter_sum]	;read value in 91h so that carry value can be added to it
;add A,1		;add carry value
;dec [counter_sum]		
;mvi [counter_sum],A	;write back the value to 91h after adding carry.
;dec [counter_sum]	
;dec [counting_adds]
;cmp [counting_adds],00	;compare if all 4 values are added. 
;jnz add_values
;dec [input_count]		;this counter keeps track of how many sets of values have been added.
;cmp [input_count],00
;jnz compute_sum		;if they are added then start adding new set of values to the existing sum.
;jmp _avg_cal
;;
;;
;;==================================================================================
;;compute the average values of the sum here
;;==================================================================================
;;USED REGISTERS:
;;00h-39h to store input data
;;93h -> no. of hours in the sum
;;92h -> no. of minutes in the sum
;;91h -> no. of seconds in the sum
;;90h -> no. of milliseconds in the sum
;;we will use registers 50h to 59h to save results of the computations
;;95h will hold the value 3Ch which indicates 60min/sec
;
;;Storing computed averages in 83h,82h,81h,80h
;;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;;To write values into a RAM page, use CUR_PP register and mov instruction; This can also be 
;;done through MVW_PP but mvi instruction has to be used which is not always feasible
;;To read values from a RAM page, use MVR_PP register and mvi instruction
;;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;_avg_cal:
;mov [input_count],09h
;mov [72h],00h
;mov reg[CUR_PP], 06h
;mov [10h], [93h] 			;ram_2[10h]=value in 93h which is the sum of hours
;mov reg[CUR_PP], 00h		;set Current Page Pointer back to 0
;mov [EBh], 10h 				;initialize MVI read pointer to 10h
;mvi A, [EBh]				;read the value in 93h to A
;mov [86h],00h
;mov [result_avg],B0h
;mov [quotient_val], 00h
;;=========================================================================================================
;;computes average of hours: "compute quotient(average of hours) and remainder (value to be added to min)"
;;=========================================================================================================
;
;compute_avg_hr:
;cmp A,[input_count]
;jnc find_q_hr
;mov [85h],A					;85h holds the remainder
;mov A,[quotient_val]
;mvi [result_avg],A	;register 83h holds the quotient
;jmp compute_avg_min
;
;find_q_hr:
;sub A,[input_count]
;inc [quotient_val]
;jmp compute_avg_hr
;
;;======================================================================================================
;;computes average of minutes:
;;======================================================================================================
;
;compute_avg_min:
;mov [72h],0Ah
;mov [61h],00h
;mov [68h],00h
;mov A,00h
;
;;=======================================================
;;compute remainder after hrs are converted into minutes. 
;;=======================================================
;Com_rem:
;mov [quotient_val],00h
;mov [75h],06h		;This will be used to convert remainder into min or sec
;
;;==============================================================
;;compute product internally 
;;==============================================================
;;compute product
;compute_prd:
;add A,[85h]
;dec [75h]
;cmp [75h],00h
;jnz compute_prd
;
;;==============================================================
;;compute remainder and add to previous product
;;==============================================================
;compute_rem:
;cmp A,[input_count]
;jnc find_q1
;mov [86h],A			;86h holds the remainder
;mov [68h],[quotient_val]		;holds the quotient
;mov A,[68h]
;add [61h],A
;mov A,00h
;add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
;dec [72h]
;cmp [72h],00h
;jnz Com_rem
;jmp add_tonext
;
;find_q1:
;sub A,[input_count]
;inc [quotient_val]
;jmp compute_rem
;
;
;;==============================================================
;;add remainder from above computation to "sum of minutes"
;;==============================================================
;
;;A=remainder of the previous operation
;;multiply that value with 60 (to convert remaining hours into minutes) and add it to minutes
;
;add_tonext:
;mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
;mov [10h], [92h] 				
;mov reg[CUR_PP], 00h
;
;mov [EBh], 10h 		;initialize MVI read pointer to 10h
;mvi A, [EBh]		;read the value in 92h into A
;add A,[86h]
;mov [quotient_val],00h
;;================================================================================
;;compute quotient(gives the average of minutes) and remainder(added to seconds)
;;================================================================================
;
;compute_avg:
;cmp A,[input_count]
;jnc find_q_min
;mov [85h],A					;85h holds the remainder
;mov A,[quotient_val]
;add A,[61h]
;mvi [result_avg],A			;register 81h holds the quotient
;jmp compute_avg_sec
;
;find_q_min:
;sub A,[input_count]
;inc [quotient_val]
;jmp compute_avg
;
;
;;======================================================================================================
;;computes average of seconds:
;;======================================================================================================
;
;compute_avg_sec:
;mov [72h],0Ah
;mov [61h],00h
;mov [68h],00h
;mov A,00h
;
;;=======================================================================================================
;;compute remainder after minutes are converted into seconds. 
;;=======================================================================================================
;Com_rem_sec:
;mov [quotient_val],00h
;mov [75h],06h		;This will be used to convert remainder into sec or resolution(sec)
;
;;=======================================================================================================
;;compute product internally 
;;=======================================================================================================
;;compute product
;compute_prd_sec:
;add A,[85h]
;dec [75h]
;cmp [75h],00h
;jnz compute_prd_sec
;
;;=======================================================================================================
;;compute remainder and add to previous product
;;=======================================================================================================
;compute_rem_sec:
;cmp A,[input_count]
;jnc find_q1_sec
;mov [86h],A			;86h holds the remainder
;mov [68h],[quotient_val]		;holds the quotient
;mov A,[68h]
;add [61h],A
;mov A,00h
;add A,[86h]			;add remainder to A and repeat the operation for "value in [input_count]" times
;dec [72h]
;cmp [72h],00h
;jnz Com_rem_sec
;jmp add_tonext_sec
;
;find_q1_sec:
;sub A,[input_count]
;inc [quotient_val]
;jmp compute_rem_sec
;
;
;;==============================================================
;;add remainder from above computation to "sum of minutes"
;;==============================================================
;
;;A=remainder of the previous operation
;;multiply that value with 60 (to convert remaining hours into minutes) and add it to minutes
;
;add_tonext_sec:
;mov reg[CUR_PP], 06h 		;set Current Page Pointer to 2
;mov [10h], [91h] 				
;mov reg[CUR_PP], 00h
;
;mov [EBh], 10h 		;initialize MVI read pointer to 10h
;mvi A, [EBh]		;read the value in 92h into A
;add A,[86h]
;mov [quotient_val],00h
;;================================================================================
;;compute quotient(gives the average of minutes) and remainder(added to seconds)
;;================================================================================
;
;compute_avg_sec1:
;cmp A,[input_count]
;jnc find_q_sec
;mov [85h],A					;85h holds the remainder
;mov A,[quotient_val]
;add A,[61h]
;mvi [result_avg],A					;register 81h holds the quotient
;jmp compute_avg_end
;
;find_q_sec:
;sub A,[input_count]
;inc [quotient_val]
;jmp compute_avg_sec1
;
;
;;=======================================================================
;;computes the resolution: just the remainder after averaging seconds
;;=======================================================================
;compute_avg_end:
;mov [counting_adds],B3h
;mov A,[85h]
;mvi [counting_adds],A
;
;;=======================================================================
;;display computed avg
;;=======================================================================
;
;mov [counter_input],B0h
;mvi A,[counter_input]
;mov [C0h],A
;mvi A,[counter_input]
;mov [C1h],A
;mvi A,[counter_input]
;mov [C2h],A
;mvi A,[counter_input]
;mov [C3h],A
;
;    lcall   LCD_Start       ; Initialize LCD
;	mov    A,00h           ; Set cursor position at row = 0
;   	mov    X,00h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A, >STRING3     	; Higher byte
;   	mov	   X, <STRING3
;    lcall  LCD_PrCString   
;
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,00h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A,[C0h]      	; Higher byte
;    lcall   LCD_PrHexByte     
;	
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,02h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A, >THE_STRING20     	; Higher byte
;   	mov	   X, <THE_STRING20
;    lcall  LCD_PrCString          
;	
;  	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,03h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A,[C1h]      	; Lower byte
;   	lcall   LCD_PrHexByte  
;	
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,05h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A, >THE_STRING20     	; Higher byte
;	mov	   X, <THE_STRING20
;    lcall   LCD_PrCString          
;	
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,06h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A,[C2h]      	; Load pointer to ROM string
;   	lcall   LCD_PrHexByte   
;	
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,08h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A, >THE_STRING21      	; Higher byte
;	mov	   X, <THE_STRING21
;    lcall   LCD_PrCString          
;	
;	mov    A,01h           ; Set cursor position at row = 0
;   	mov    X,09h           ; col = 5
;   	lcall   LCD_Position
;   	mov    A,[C3h]      	; Load pointer to ROM string
;   	lcall   LCD_PrHexByte  
;
;jmp loop