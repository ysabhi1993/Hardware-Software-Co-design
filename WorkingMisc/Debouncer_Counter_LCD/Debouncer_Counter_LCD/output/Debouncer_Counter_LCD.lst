FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 07 00 LJMP  PSoC_GPIO_ISR      (0145) 	ljmp PSoC_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     ;ljmp	PSoC_GPIO_ISR
0024: 7D 03 9E LJMP  _Timer16_sec_ISR   (0154) 	ljmp _Timer16_sec_ISR
0027: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0158)     // call	void_handler
0028: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0162)     // call	void_handler
002C: 7E       RETI                     (0163)     reti
                                        (0164) 
                                        (0165)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0170)     // call	void_handler
0034: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0182)     // call	void_handler
0040: 7E       RETI                     (0183)     reti
                                        (0184) 
                                        (0185)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0186)     // call	void_handler
0044: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0190)     // call	void_handler
0048: 7E       RETI                     (0191)     reti
                                        (0192) 
                                        (0193)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0194)     // call	void_handler
004C: 7E       RETI                     (0195)     reti
                                        (0196) 
                                        (0197)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0198)     // call	void_handler
0050: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0202)     // call	void_handler
0054: 7E       RETI                     (0203)     reti
                                        (0204) 
                                        (0205)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0206)     // call	void_handler
0058: 7E       RETI                     (0207)     reti
                                        (0208) 
                                        (0209)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0210)     // call	void_handler
005C: 7E       RETI                     (0211)     reti
                                        (0212) 
                                        (0213)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0214)     // call	void_handler
0060: 7E       RETI                     (0215)     reti
                                        (0216) 
                                        (0217)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0218)     // call	void_handler
0064: 7E       RETI                     (0219)     reti
0068: 71 10    OR    F,0x10             
                                        (0220)     ;---------------------------------------------------
                                        (0221)     ; Insert your custom code above this banner
                                        (0222)     ;---------------------------------------------------
                                        (0223)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0224) 
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  Start of Execution.
                                        (0227) ;-----------------------------------------------------------------------------
                                        (0228) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0229) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0230) ;
                                        (0231) 
                                        (0232) IF	(TOOLCHAIN & HITECH)
                                        (0233)  	AREA PD_startup(CODE, REL, CON)
                                        (0234) ELSE
                                        (0235)     org 68h
                                        (0236) ENDIF
                                        (0237) __Start:
                                        (0238) 
                                        (0239)     ; initialize SMP values for voltage stabilization, if required,
                                        (0240)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0241)     ; least for now. 
                                        (0242)     ;
                                        (0243)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0244)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0245)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0246)     M8C_SetBank0
                                        (0247) 
                                        (0248)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0249)     mov   A, 20h
0074: 28       ROMX                     (0250)     romx
0075: 50 40    MOV   A,0x40             (0251)     mov   A, 40h
0077: 28       ROMX                     (0252)     romx
0078: 50 60    MOV   A,0x60             (0253)     mov   A, 60h
007A: 28       ROMX                     (0254)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0255)     ; %45%20%46%46% End workaround
                                        (0256) 
                                        (0257) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0258) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0259)     M8C_EnableWatchDog
                                        (0260) ENDIF
                                        (0261) 
                                        (0262) IF ( SELECT_32K )
                                        (0263)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0264) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0265)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0266) ENDIF
                                        (0267) 
                                        (0268)     ;---------------------------
                                        (0269)     ; Set up the Temporary stack
                                        (0270)     ;---------------------------
                                        (0271)     ; A temporary stack is set up for the SSC instructions.
                                        (0272)     ; The real stack start will be assigned later.
                                        (0273)     ;
                                        (0274) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0275)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0276)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0277) 
                                        (0278)     ;-----------------------------------------------
                                        (0279)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0280)     ;-----------------------------------------------
                                        (0281) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0282) 
                                        (0283) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0284)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0285)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0286)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0287)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0288)   IF ( AGND_BYPASS )
                                        (0289)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0290)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0291)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0292)     ; value using the proper trim values.
                                        (0293)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0294)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0295)   ENDIF
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 5.0 V Operation
                                        (0298) 
                                        (0299) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0300)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0301)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0302)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0303)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0304)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0305)  ENDIF
                                        (0306) ENDIF ; 3.3 Volt Operation
                                        (0307) 
0087: 55 F8 00 MOV   [bShadow+243],0x0  (0308)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [bShadow+244],0x0  (0309)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0310) 
                                        (0311)     ;---------------------------------------
                                        (0312)     ; Initialize Crystal Oscillator and PLL
                                        (0313)     ;---------------------------------------
                                        (0314) 
                                        (0315) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0316)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0317)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0318)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0319)     ; the ECO to stabilize.
                                        (0320)     ;
                                        (0321)     M8C_SetBank1
                                        (0322)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0323)     M8C_SetBank0
                                        (0324)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0325)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0326)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0327) .WaitFor1s:
                                        (0328)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0329)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0330)                                           ;   since interrupts are not globally enabled
                                        (0331) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0332)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0333)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0337) 
                                        (0338) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0339) 
                                        (0340) IF ( PLL_MODE )
                                        (0341)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0342)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0343)     ;
                                        (0344)     M8C_SetBank1
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0346)     M8C_SetBank0
                                        (0347)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0348)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0349) 
                                        (0350) .WaitFor16ms:
                                        (0351)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0352)     jz   .WaitFor16ms
                                        (0353)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0354)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0355)     M8C_SetBank0
                                        (0356) 
                                        (0357) IF      ( WAIT_FOR_32K )
                                        (0358) ELSE ; !( WAIT_FOR_32K )
                                        (0359)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0360)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0361) ENDIF ;(WAIT_FOR_32K)
                                        (0362) ENDIF ;(PLL_MODE)
                                        (0363) 
                                        (0364) 	;-------------------------------------------------------
                                        (0365)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0366)     ;-------------------------------------------------------
                                        (0367) 
                                        (0368)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0369) 
                                        (0370) IF (SYSCLK_SOURCE)
                                        (0371)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0372) ENDIF
                                        (0373)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0374) 
                                        (0375)     ;------------------------
                                        (0376)     ; Close CT leakage path.
                                        (0377)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0378)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0379)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0380)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0381)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0382) 
                                        (0383) 
                                        (0384) IF	(TOOLCHAIN & HITECH)
                                        (0385)     ;---------------------------------------------
                                        (0386)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0387)     ;---------------------------------------------
                                        (0388) 	global		__Lstackps
                                        (0389) 	mov     a,low __Lstackps
                                        (0390) 	swap    a,sp
                                        (0391) 
                                        (0392) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0393)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0394)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0395)     RAM_SETPAGE_CUR 0
                                        (0396)     RAM_SETPAGE_MVW 0
                                        (0397)     RAM_SETPAGE_MVR 0
                                        (0398)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0399)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0400)     ELSE
                                        (0401)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0402)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ELSE
                                        (0405)     ;---------------------------------------------
                                        (0406)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0407)     ;---------------------------------------------
                                        (0408) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0409)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0410)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0411)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0412)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0413)     RAM_SETPAGE_CUR 0
                                        (0414)     RAM_SETPAGE_MVW 0
                                        (0415)     RAM_SETPAGE_MVR 0
                                        (0416) 
                                        (0417)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0418)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0419)   ELSE
                                        (0420)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0421)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0422) ELSE
                                        (0423)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0424)     swap  SP, A
                                        (0425) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0426) ENDIF ;	TOOLCHAIN
                                        (0427) 
                                        (0428)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ; Insert your custom code below this banner
                                        (0431)     ;---------------------------------------------------
                                        (0432) 
                                        (0433)     ;---------------------------------------------------
                                        (0434)     ; Insert your custom code above this banner
                                        (0435)     ;---------------------------------------------------
                                        (0436)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0437) 
                                        (0438)     ;-------------------------
                                        (0439)     ; Load Base Configuration
                                        (0440)     ;-------------------------
                                        (0441)     ; Load global parameter settings and load the user modules in the
                                        (0442)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0443)     ; to minimize start up time; (2) We may still need to play with the
                                        (0444)     ; Sleep Timer.
                                        (0445)     ;
00B7: 7C 03 33 LCALL 0x0333             (0446)     lcall LoadConfigInit
                                        (0447) 
                                        (0448)     ;-----------------------------------
                                        (0449)     ; Initialize C Run-Time Environment
                                        (0450)     ;-----------------------------------
                                        (0451) IF ( C_LANGUAGE_SUPPORT )
                                        (0452) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0453)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0454)     mov  [__r0],<__bss_start
                                        (0455) BssLoop:
                                        (0456)     cmp  [__r0],<__bss_end
                                        (0457)     jz   BssDone
                                        (0458)     mvi  [__r0],A
                                        (0459)     jmp  BssLoop
                                        (0460) BssDone:
                                        (0461)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0462)     mov  X,<__idata_start
                                        (0463)     mov  [__r0],<__data_start
                                        (0464) IDataLoop:
                                        (0465)     cmp  [__r0],<__data_end
                                        (0466)     jz   C_RTE_Done
                                        (0467)     push A
                                        (0468)     romx
                                        (0469)     mvi  [__r0],A
                                        (0470)     pop  A
                                        (0471)     inc  X
                                        (0472)     adc  A,0
                                        (0473)     jmp  IDataLoop
                                        (0474) 
                                        (0475) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0476) 
                                        (0477) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0478)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0479)                                        ; to use the Virtual Register page.
                                        (0480) 
                                        (0481)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0482)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0483)     ; text segment and may have been relocated by the Code Compressor.
                                        (0484)     ;
00BD: 50 02    MOV   A,0x2              (0485)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2C    MOV   X,0x2C             (0486)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0487)     push  A
00C2: 28       ROMX                     (0488)     romx                               ; get the MSB of xidata's address
00C3: 53 04    MOV   [__r0],A           (0489)     mov   [__r0], A
00C5: 18       POP   A                  (0490)     pop   A
00C6: 75       INC   X                  (0491)     inc   X
00C7: 09 00    ADC   A,0x0              (0492)     adc   A, 0
00C9: 28       ROMX                     (0493)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0494)     swap  A, X
00CB: 51 04    MOV   A,[__r0]           (0495)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0496)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0497)     jmp   .AccessStruct
                                        (0498) 
                                        (0499)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0500)     ; values of C variables. Each structure contains 3 member elements.
                                        (0501)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0502)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0503)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0504)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0505)     ; value in the second member element, an unsigned byte:
                                        (0506)     ; (1) If the value of the second element is non-zero, it represents
                                        (0507)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0508)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0509)     ; the bytes are copied to the block of RAM.
                                        (0510)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0511)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0512)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0513) 
                                        (0514) .AccessNextStructLoop:
00CF: 75       INC   X                  (0515)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0517) .AccessStruct:                         ; Entry point for first block
                                        (0518)     ;
                                        (0519)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0520)     ;
                                        (0521)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0522)     push  A
00D6: 28       ROMX                     (0523)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0524)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0525)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0526)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0528)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0529)     adc   A, 0
00E0: 08       PUSH  A                  (0530)     push  A
00E1: 28       ROMX                     (0531)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 04    MOV   [__r0],A           (0532)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0535)     adc   A, 0
00E8: 08       PUSH  A                  (0536)     push  A
00E9: 28       ROMX                     (0537)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0538)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 03    MOV   [__r1],A           (0539)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
                                        (0541) 
                                        (0542) .CopyNextByteLoop:
                                        (0543)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0544)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0545)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0546)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0547)     ;
00EF: 75       INC   X                  (0548)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0549)     adc   A, 0
00F2: 08       PUSH  A                  (0550)     push  A
00F3: 28       ROMX                     (0551)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 04    MVI   [__r0],A           (0552)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 04 FF TST   [__r0],0xFF        (0553)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0554)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0555)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0556)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0557)     mov   reg[ MVW_PP], A
                                        (0558) .CopyLoopTail:
0100: 18       POP   A                  (0559)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 03    DEC   [__r1]             (0560)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0561)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0562)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0563) 
                                        (0564) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0565)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0566)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0567)     adc   A, 0
010B: 08       PUSH  A                  (0568)     push  A
010C: 28       ROMX                     (0569)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 03    MOV   [__r1],A           (0570)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0571)     mov   A, 0                         ; Initialize source data
                                        (0572) 
                                        (0573) .ClearRAMBlockLoop:
                                        (0574)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0575)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0576)     ;
0111: 3F 04    MVI   [__r0],A           (0577)     mvi   [__r0], A                    ; Clear a byte
0113: 47 04 FF TST   [__r0],0xFF        (0578)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0579)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0580)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0581)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0582)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0583)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0584) .ClearLoopTail:
011F: 7A 03    DEC   [__r1]             (0585)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0586)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0587)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0588)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0589) 
                                        (0590) .C_RTE_WrapUp:
0126: 18       POP   A                  (0591)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0592) 
                                        (0593) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0594) 
                                        (0595) C_RTE_Done:
                                        (0596) 
                                        (0597) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0598) 
                                        (0599)     ;-------------------------------
                                        (0600)     ; Voltage Stabilization for SMP
                                        (0601)     ;-------------------------------
                                        (0602) 
                                        (0603) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0604) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0605)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0606)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0607)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0608)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0609)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0610)     M8C_SetBank1
                                        (0611)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0612)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0613)     M8C_SetBank0
                                        (0614)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0615)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0616) .WaitFor2ms:
                                        (0617)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0618)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0619) ENDIF ; SMP is operational
                                        (0620) ENDIF ; 5.0V Operation
                                        (0621) 
                                        (0622)     ;-------------------------------
                                        (0623)     ; Set Power-On Reset (POR) Level
                                        (0624)     ;-------------------------------
                                        (0625)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0626)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0627)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0628)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0629)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0630) 
                                        (0631)     M8C_SetBank1
                                        (0632) 
                                        (0633) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0634)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0635)  ELSE                                       ;    No, fast mode
                                        (0636)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0637)                                             ;       no, set midpoint POR in user code, if desired
                                        (0638)   ELSE ; 24HMz                              ;
                                        (0639)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0640)   ENDIF ; 24MHz
                                        (0641)  ENDIF ; Slow Mode
                                        (0642) ENDIF ; 5.0V Operation
                                        (0643) 
                                        (0644)     M8C_SetBank0
                                        (0645) 
                                        (0646)     ;----------------------------
                                        (0647)     ; Wrap up and invoke "main"
                                        (0648)     ;----------------------------
                                        (0649) 
                                        (0650)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0651)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0652)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0653)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0654) 
                                        (0655)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0656)     ; And put decimator in full mode so it does not consume too much current.
                                        (0657)     ;
                                        (0658)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0659)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0660)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0661)     M8C_SetBank0
                                        (0662) 
                                        (0663)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0664)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0665)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0666)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0667)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0668)                                    ; have been set during the boot process.
                                        (0669) IF	(TOOLCHAIN & HITECH)
                                        (0670) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0671) ELSE
                                        (0672) IF ENABLE_LJMP_TO_MAIN
                                        (0673)     ljmp  _main                    ; goto main (no return)
                                        (0674) ELSE
013B: 7C 06 C6 LCALL __UserModules_end|__text_start|_main(0675)     lcall _main                    ; call main
                                        (0676) .Exit:
013E: 8F FF    JMP   0x013E             (0677)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0678) ENDIF
                                        (0679) ENDIF ; TOOLCHAIN
                                        (0680) 
                                        (0681)     ;---------------------------------
                                        (0682)     ; Library Access to Global Parms
                                        (0683)     ;---------------------------------
                                        (0684)     ;
                                        (0685)  bGetPowerSetting:
                                        (0686) _bGetPowerSetting:
                                        (0687)     ; Returns value of POWER_SETTING in the A register.
                                        (0688)     ; No inputs. No Side Effects.
                                        (0689)     ;
0140: 50 10    MOV   A,0x10             (0690)     mov   A, POWER_SETTING
0142: 7F       RET                      (0691)     ret
                                        (0692) 
                                        (0693) IF	(TOOLCHAIN & HITECH)
                                        (0694) ELSE
                                        (0695)     ;---------------------------------
                                        (0696)     ; Order Critical RAM & ROM AREAs
                                        (0697)     ;---------------------------------
                                        (0698)     ;  'TOP' is all that has been defined so far...
                                        (0699) 
                                        (0700)     ;  ROM AREAs for C CONST, static & global items
                                        (0701)     ;
                                        (0702)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0703)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0704) __idata_start:
                                        (0705) 
                                        (0706)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0707) __func_lit_start:
                                        (0708) 
                                        (0709) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0710)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0711)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0712)     ; relocated by the code compressor, but the text area may shrink and
                                        (0713)     ; that moves xidata around.
                                        (0714)     ;
                                        (0715) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0716) ENDIF
                                        (0717) 
                                        (0718)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0719)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0720) 
                                        (0721)     ; CODE segment for general use
                                        (0722)     ;
                                        (0723)     AREA text (ROM, REL, CON)
                                        (0724) __text_start:
                                        (0725) 
                                        (0726)     ; RAM area usage
                                        (0727)     ;
                                        (0728)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0729) __data_start:
                                        (0730) 
                                        (0731)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0732)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0733)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0734) __bss_start:
                                        (0735) 
                                        (0736) ENDIF ; TOOLCHAIN
                                        (0737) 
                                        (0738) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
022E: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_debouncer_counter_lcd_Bank1
                                        (0019) export LoadConfigTBL_debouncer_counter_lcd_Bank0
                                        (0020) export LoadConfigTBL_debouncer_counter_lcd_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_debouncer_counter_lcd_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name Timer16_sec, User Module Timer16
                                        (0025) ;       Instance name Timer16_sec, Block Name TIMER16_LSB(DBB00)
                                        (0026) 	db		23h, 00h		;Timer16_sec_CONTROL_LSB_REG(DBB00CR0)
                                        (0027) 	db		21h, 6eh		;Timer16_sec_PERIOD_LSB_REG(DBB00DR1)
                                        (0028) 	db		22h, 00h		;Timer16_sec_COMPARE_LSB_REG(DBB00DR2)
                                        (0029) ;       Instance name Timer16_sec, Block Name TIMER16_MSB(DBB01)
                                        (0030) 	db		27h, 04h		;Timer16_sec_CONTROL_MSB_REG(DBB01CR0)
                                        (0031) 	db		25h, 01h		;Timer16_sec_PERIOD_MSB_REG(DBB01DR1)
                                        (0032) 	db		26h, 00h		;Timer16_sec_COMPARE_MSB_REG(DBB01DR2)
                                        (0033) ;  Global Register values Bank 0
                                        (0034) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0035) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0036) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0037) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0038) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0039) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0040) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0041) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0042) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0043) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0044) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0045) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0046) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0047) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0048) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0049) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0050) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0051) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0052) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0053) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0054) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0055) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0056) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0057) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0058) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0059) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0060) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0061) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0062) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0063) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0064) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0065) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0066) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0067) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0068) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0069) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0070) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0071) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0072) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0073) 	db		ffh
                                        (0074) LoadConfigTBL_debouncer_counter_lcd_Bank1:
                                        (0075) ;  Instance name LCD, User Module LCD
                                        (0076) ;  Instance name Timer16_sec, User Module Timer16
                                        (0077) ;       Instance name Timer16_sec, Block Name TIMER16_LSB(DBB00)
                                        (0078) 	db		20h, 10h		;Timer16_sec_FUNC_LSB_REG(DBB00FN)
                                        (0079) 	db		21h, 01h		;Timer16_sec_INPUT_LSB_REG(DBB00IN)
                                        (0080) 	db		22h, 40h		;Timer16_sec_OUTPUT_LSB_REG(DBB00OU)
                                        (0081) ;       Instance name Timer16_sec, Block Name TIMER16_MSB(DBB01)
                                        (0082) 	db		24h, 30h		;Timer16_sec_FUNC_MSB_REG(DBB01FN)
                                        (0083) 	db		25h, 31h		;Timer16_sec_INPUT_MSB_REG(DBB01IN)
                                        (0084) 	db		26h, 40h		;Timer16_sec_OUTPUT_MSB_REG(DBB01OU)
                                        (0085) ;  Global Register values Bank 1
                                        (0086) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0087) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0088) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0089) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0090) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0091) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0092) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0093) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0094) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0095) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0096) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0097) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0098) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0099) 	db		e2h, 01h		; OscillatorControl_2 register (OSC_CR2)
                                        (0100) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0101) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0102) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0103) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0104) 	db		ffh
                                        (0105) AREA psoc_config(rom, rel)
                                        (0106) LoadConfigTBL_debouncer_counter_lcd_Ordered:
                                        (0107) ;  Ordered Global Register values
                                        (0108) 	M8C_SetBank0
0230: 62 00 00 MOV   REG[0x0],0x0       (0109) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0233: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
0235: 62 00 00 MOV   REG[0x0],0x0       (0111) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0238: 62 01 FF MOV   REG[0x1],0xFF      (0112) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
023B: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
023D: 62 03 FF MOV   REG[0x3],0xFF      (0114) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0240: 62 02 00 MOV   REG[0x2],0x0       (0115) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0243: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
0245: 62 02 00 MOV   REG[0x2],0x0       (0117) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0248: 62 03 00 MOV   REG[0x3],0x0       (0118) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
024B: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
024D: 62 01 00 MOV   REG[0x1],0x0       (0120) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0250: 62 04 00 MOV   REG[0x4],0x0       (0121) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0253: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
0255: 62 04 1E MOV   REG[0x4],0x1E      (0123) 	mov	reg[04h], 1eh		; Port_1_DriveMode_0 register (PRT1DM0)
0258: 62 05 E1 MOV   REG[0x5],0xE1      (0124) 	mov	reg[05h], e1h		; Port_1_DriveMode_1 register (PRT1DM1)
025B: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
025D: 62 07 E1 MOV   REG[0x7],0xE1      (0126) 	mov	reg[07h], e1h		; Port_1_DriveMode_2 register (PRT1DM2)
0260: 62 06 00 MOV   REG[0x6],0x0       (0127) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0263: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
0265: 62 06 00 MOV   REG[0x6],0x0       (0129) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0268: 62 07 00 MOV   REG[0x7],0x0       (0130) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
026B: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
026D: 62 05 00 MOV   REG[0x5],0x0       (0132) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0270: 62 08 00 MOV   REG[0x8],0x0       (0133) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0273: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
0275: 62 08 7F MOV   REG[0x8],0x7F      (0135) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0278: 62 09 00 MOV   REG[0x9],0x0       (0136) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
027B: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
027D: 62 0B 00 MOV   REG[0xB],0x0       (0138) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0280: 62 0A 00 MOV   REG[0xA],0x0       (0139) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0283: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0285: 62 0A 00 MOV   REG[0xA],0x0       (0141) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0288: 62 0B 80 MOV   REG[0xB],0x80      (0142) 	mov	reg[0bh], 80h		; Port_2_IntCtrl_1 register (PRT2IC1)
028B: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
028D: 62 09 80 MOV   REG[0x9],0x80      (0144) 	mov	reg[09h], 80h		; Port_2_IntEn register (PRT2IE)
0290: 62 0C 00 MOV   REG[0xC],0x0       (0145) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0293: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0295: 62 0C 00 MOV   REG[0xC],0x0       (0147) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0298: 62 0D 00 MOV   REG[0xD],0x0       (0148) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
029B: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
029D: 62 0F 00 MOV   REG[0xF],0x0       (0150) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02A0: 62 0E 00 MOV   REG[0xE],0x0       (0151) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A3: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
02A5: 62 0E 00 MOV   REG[0xE],0x0       (0153) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A8: 62 0F 00 MOV   REG[0xF],0x0       (0154) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02AB: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
02AD: 62 0D 00 MOV   REG[0xD],0x0       (0156) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02B0: 62 10 00 MOV   REG[0x10],0x0      (0157) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B3: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02B5: 62 10 00 MOV   REG[0x10],0x0      (0159) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02B8: 62 11 00 MOV   REG[0x11],0x0      (0160) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02BB: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02BD: 62 13 00 MOV   REG[0x13],0x0      (0162) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02C0: 62 12 00 MOV   REG[0x12],0x0      (0163) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C3: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02C5: 62 12 00 MOV   REG[0x12],0x0      (0165) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C8: 62 13 00 MOV   REG[0x13],0x0      (0166) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02CB: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02CD: 62 11 00 MOV   REG[0x11],0x0      (0168) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02D0: 62 14 00 MOV   REG[0x14],0x0      (0169) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D3: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
02D5: 62 14 00 MOV   REG[0x14],0x0      (0171) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D8: 62 15 00 MOV   REG[0x15],0x0      (0172) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02DB: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
02DD: 62 17 00 MOV   REG[0x17],0x0      (0174) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02E0: 62 16 00 MOV   REG[0x16],0x0      (0175) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E3: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02E5: 62 16 00 MOV   REG[0x16],0x0      (0177) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E8: 62 17 00 MOV   REG[0x17],0x0      (0178) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02EB: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02ED: 62 15 00 MOV   REG[0x15],0x0      (0180) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F0: 62 18 00 MOV   REG[0x18],0x0      (0181) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02F3: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02F5: 62 18 00 MOV   REG[0x18],0x0      (0183) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02F8: 62 19 00 MOV   REG[0x19],0x0      (0184) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02FB: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
02FD: 62 1B 00 MOV   REG[0x1B],0x0      (0186) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0300: 62 1A 00 MOV   REG[0x1A],0x0      (0187) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0303: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0305: 62 1A 00 MOV   REG[0x1A],0x0      (0189) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0308: 62 1B 00 MOV   REG[0x1B],0x0      (0190) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
030B: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
030D: 62 19 00 MOV   REG[0x19],0x0      (0192) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0310: 62 1C 00 MOV   REG[0x1C],0x0      (0193) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0313: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0315: 62 1C 00 MOV   REG[0x1C],0x0      (0195) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0318: 62 1D 00 MOV   REG[0x1D],0x0      (0196) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
031B: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
031D: 62 1F 00 MOV   REG[0x1F],0x0      (0198) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0320: 62 1E 00 MOV   REG[0x1E],0x0      (0199) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0323: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0325: 62 1E 00 MOV   REG[0x1E],0x0      (0201) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0328: 62 1F 00 MOV   REG[0x1F],0x0      (0202) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
032B: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
032D: 62 1D 00 MOV   REG[0x1D],0x0      (0204) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0330: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
0332: 7F       RET                      (0206) 	ret
                                        (0207) 
                                        (0208) 
                                        (0209) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_debouncer_counter_lcd
                                        (0026) export _LoadConfig_debouncer_counter_lcd
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0333: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0336: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0339: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
033C: 7C 03 43 LCALL 0x0343             (0069) 	lcall	LoadConfig_debouncer_counter_lcd
033F: 7C 02 2E LCALL 0x022E             (0070) 	lcall	LoadConfigTBL_debouncer_counter_lcd_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0342: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration debouncer_counter_lcd
                                        (0078) ;
                                        (0079) ;    Load configuration registers for debouncer_counter_lcd.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_debouncer_counter_lcd:
                                        (0096)  LoadConfig_debouncer_counter_lcd:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0343: 10       PUSH  X                  (0099) 	push	x
0344: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0346: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0348: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0349: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_debouncer_counter_lcd_Bank0
034B: 57 A0    MOV   X,0xA0             (0105)     mov     X, <LoadConfigTBL_debouncer_counter_lcd_Bank0
034D: 7C 03 5E LCALL 0x035E             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0350: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0352: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0353: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_debouncer_counter_lcd_Bank1
0355: 57 FB    MOV   X,0xFB             (0112)     mov     X, <LoadConfigTBL_debouncer_counter_lcd_Bank1
0357: 7C 03 5E LCALL 0x035E             (0113)     lcall   LoadConfig              ; Load the bank 1 values
035A: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
035C: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
035D: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
035E: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0360: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0361: 08       PUSH  A                  (0143)     push    A
0362: 4F       MOV   X,SP               (0144)     mov     X, SP
0363: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0366: D0 04    JNC   0x036B             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0368: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
036B: 18       POP   A                  (0149)     pop     A
036C: 20       POP   X                  (0150)     pop     X
036D: 70 EF    AND   F,0xEF             
036F: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0372: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0373: 08       PUSH  A                  (0156)     push    A
0374: 28       ROMX                     (0157)     romx                            ; Load register address from table
0375: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0377: A0 1F    JZ    0x0397             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0379: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
037A: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
037D: A0 03    JZ    0x0381             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
037F: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0381: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0383: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0384: 20       POP   X                  (0167)     pop     X
0385: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0386: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0388: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0389: 08       PUSH  A                  (0171)     push    A
038A: 28       ROMX                     (0172)     romx                            ; load config data from the table
038B: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
038C: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
038E: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0390: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0391: 20       POP   X                  (0177)     pop     X
0392: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0393: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0395: 8F D7    JMP   0x036D             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0397: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0399: 70 3F    AND   F,0x3F             
039B: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
039D: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer16_secint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_secINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16_sec.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_sec_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_sec_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_sec_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.  
039E: 08       PUSH  A                  (0070)    	push A
039F: 10       PUSH  X                  (0071) 	push X
                                        (0072) 
                                        (0073) 
                                        (0074)     ;toggle LEDs
03A0: 5D 04    MOV   A,REG[0x4]         (0075) 	mov A, reg[PRT1DR]
03A2: 31 FF    XOR   A,0xFF             (0076) 	xor A, FFh 										;don't toggle LED 0
03A4: 60 04    MOV   REG[0x4],A         (0077) 	mov reg[PRT1DR], A
                                        (0078) 	
                                        (0079)    	;present numbr of interrupt on LCD
                                        (0080) check_sec:	
03A6: 51 FB    MOV   A,[bShadow+246]    (0081) 	mov A, [251]	;move [251] to A as to not mess up the actual number in [251] during compare
03A8: 39 3C    CMP   A,0x3C             (0082) 	cmp A, 3Ch		;compare with 60
                                        (0083) 					;need to check CF : if it's not set than [251] is larger than 60
03AA: A0 05    JZ    0x03B0             (0084) 	jz reset_sec	;[251] == 60
03AC: 76 FB    INC   [bShadow+246]      (0085) 	inc [251]
03AE: 80 06    JMP   0x03B5             (0086) 	jmp display_sec
                                        (0087) 
                                        (0088) reset_sec:
03B0: 55 FB 00 MOV   [bShadow+246],0x0  (0089) 	mov [251],00h
03B3: 76 FC    INC   [bShadow+247]      (0090) 	inc [252]		;increment minutes
                                        (0091) 	
                                        (0092) display_sec:
03B5: 50 00    MOV   A,0x0              (0093)     mov A, 00h
03B7: 57 00    MOV   X,0x0              (0094) 	mov X, 00h
03B9: 92 01    CALL  _LCD_Position      (0095) 	call LCD_Position
03BB: 51 FB    MOV   A,[bShadow+246]    (0096) 	mov A, [251]
03BD: 90 9A    CALL  _LCD_PrHexByte     (0097) 	call LCD_PrHexByte
                                        (0098) 	
                                        (0099) 	
                                        (0100) check_min:
03BF: 51 FC    MOV   A,[bShadow+247]    (0101) 	mov A, [252]	;move [251] to A as to not mess up the actual number in [251] during compare
03C1: 39 3C    CMP   A,0x3C             (0102) 	cmp A, 3Ch		;compare with 60
                                        (0103) 					;need to check CF : if it's not set than [251] is larger than 60
03C3: A0 03    JZ    0x03C7             (0104) 	jz reset_min	;[251] == 60
                                        (0105) 	;inc [252]
03C5: 80 04    JMP   0x03CA             (0106) 	jmp display_min
                                        (0107) 
                                        (0108) reset_min:
03C7: 55 FC 00 MOV   [bShadow+247],0x0  (0109) 	mov [252],00h
                                        (0110) 
                                        (0111) 	
                                        (0112) display_min:
03CA: 50 01    MOV   A,0x1              (0113)     mov A, 01h
03CC: 57 00    MOV   X,0x0              (0114) 	mov X, 00h
03CE: 91 EC    CALL  _LCD_Position      (0115) 	call LCD_Position
03D0: 51 FC    MOV   A,[bShadow+247]    (0116) 	mov A, [252]
03D2: 90 85    CALL  _LCD_PrHexByte     (0117) 	call LCD_PrHexByte
                                        (0118) 	
03D4: 18       POP   A                  (0119)     pop A
03D5: 20       POP   X                  (0120) 	pop X
                                        (0121)    
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code above this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert a lcall to a C function below this banner
                                        (0128)    ; and un-comment the lines between these banners
                                        (0129)    ;---------------------------------------------------
                                        (0130)    
                                        (0131)    ;PRESERVE_CPU_CONTEXT
                                        (0132)    ;lcall _My_C_Function
                                        (0133)    ;RESTORE_CPU_CONTEXT
                                        (0134)    
                                        (0135)    ;---------------------------------------------------
                                        (0136)    ; Insert a lcall to a C function above this banner
                                        (0137)    ; and un-comment the lines between these banners
                                        (0138)    ;---------------------------------------------------
                                        (0139)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0140) 
03D6: 7E       RETI                     (0141)    reti
                                        (0142) 
                                        (0143) 
                                        (0144) ; end of file Timer16_secINT.asm
FILE: lib\timer16_sec.asm               (0001) ;;*****************************************************************************
03D7: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16_sec.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16_sec.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_sec_EnableInt
                                        (0030) export _Timer16_sec_EnableInt
                                        (0031) export  Timer16_sec_DisableInt
                                        (0032) export _Timer16_sec_DisableInt
                                        (0033) export  Timer16_sec_Start
                                        (0034) export _Timer16_sec_Start
                                        (0035) export  Timer16_sec_Stop
                                        (0036) export _Timer16_sec_Stop
                                        (0037) export  Timer16_sec_WritePeriod
                                        (0038) export _Timer16_sec_WritePeriod
                                        (0039) export  Timer16_sec_WriteCompareValue
                                        (0040) export _Timer16_sec_WriteCompareValue
                                        (0041) export  Timer16_sec_wReadCompareValue
                                        (0042) export _Timer16_sec_wReadCompareValue
                                        (0043) export  Timer16_sec_wReadTimer
                                        (0044) export _Timer16_sec_wReadTimer
                                        (0045) export  Timer16_sec_wReadTimerSaveCV
                                        (0046) export _Timer16_sec_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_sec_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_sec_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_sec_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_sec_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_sec_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_sec_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_sec_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_sec_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_sec_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_sec_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA debouncer_counter_lcd_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_sec_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_sec_EnableInt:
                                        (0098) _Timer16_sec_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_sec_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
03DA: 7F       RET                      (0102)    ret
03DB: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_sec_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_sec_DisableInt:
                                        (0126) _Timer16_sec_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_sec_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03DE: 7F       RET                      (0130)    ret
03DF: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_sec_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_sec_Start:
                                        (0154) _Timer16_sec_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_sec_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03E2: 7F       RET                      (0158)    ret
03E3: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_sec_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_sec_Stop:
                                        (0182) _Timer16_sec_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_sec_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03E6: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_sec_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_sec_WritePeriod:
                                        (0211) _Timer16_sec_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03E7: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_sec_PERIOD_LSB_REG], A
03E9: 5B       MOV   A,X                (0214)    mov   A, X
03EA: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_sec_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
03EC: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_sec_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_sec_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_sec_WriteCompareValue:
                                        (0243) _Timer16_sec_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
03ED: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_sec_COMPARE_LSB_REG], A
03EF: 5B       MOV   A,X                (0246)    mov   A, X
03F0: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_sec_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
03F2: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_sec_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_sec_wReadCompareValue:
                                        (0272) _Timer16_sec_wReadCompareValue:
                                        (0273)  wTimer16_sec_ReadCompareValue:                  ; this name deprecated
                                        (0274) _wTimer16_sec_ReadCompareValue:                  ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
03F3: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_sec_COMPARE_MSB_REG]
03F5: 5C       MOV   X,A                (0277)    mov   X, A
03F6: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_sec_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
03F8: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_sec_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_sec_wReadTimerSaveCV:
                                        (0321) _Timer16_sec_wReadTimerSaveCV:
                                        (0322)  wTimer16_sec_ReadTimerSaveCV:                   ; this name deprecated
                                        (0323) _wTimer16_sec_ReadTimerSaveCV:                   ; this name deprecated
                                        (0324)  wTimer16_sec_ReadCounter:                       ; this name deprecated
                                        (0325) _wTimer16_sec_ReadCounter:                       ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
03F9: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
03FA: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
03FC: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_sec_CONTROL_LSB_REG]     ; save the Control register
03FE: 08       PUSH  A                  (0335)    push  A
03FF: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_sec_COMPARE_LSB_REG]     ; save the Compare register
0401: 08       PUSH  A                  (0337)    push  A
0402: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_sec_COMPARE_MSB_REG]
0404: 08       PUSH  A                  (0339)    push  A
0405: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_sec_COUNTER_LSB_REG]     ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0407: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_sec_COMPARE_MSB_REG]     ; Now grab DR2 (DR0) and save
0409: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
040B: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_sec_COMPARE_LSB_REG]
040D: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
040F: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0411: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0414: A0 03    JZ    0x0418             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0416: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0418: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
041A: 70 FE    AND   F,0xFE             
041C: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_sec_Stop_M                            ; Disable (stop) the timer
041F: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0420: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_sec_COMPARE_MSB_REG], A
0422: 18       POP   A                  (0356)    pop   A
0423: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_sec_COMPARE_LSB_REG], A
0425: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0426: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_sec_CONTROL_LSB_REG], A
0428: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
0429: 20       POP   X                  (0361)    pop   X
042A: 70 3F    AND   F,0x3F             
042C: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
042E: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_sec_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_sec_wReadTimer:
                                        (0397) _Timer16_sec_wReadTimer:
                                        (0398)  wTimer16_sec_ReadTimer:                         ; this name deprecated
                                        (0399) _wTimer16_sec_ReadTimer:                         ; this name deprecated
                                        (0400)  wTimer16_sec_CaptureCounter:                    ; this name deprecated
                                        (0401) _wTimer16_sec_CaptureCounter:                    ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
042F: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_sec_COUNTER_LSB_REG]     ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0431: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_sec_COMPARE_MSB_REG]     ; Return DR2 (actually DR0)
0433: 5C       MOV   X,A                (0408)    mov   X, A
0434: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_sec_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0436: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16_sec.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0437: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0438: 10       PUSH  X                  (0209)     push  X
0439: 28       ROMX                     (0210)     romx                               ; Get character from ROM
043A: B0 04    JNZ   0x043F             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
043C: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
043D: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
043E: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
043F: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0441: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0442: 18       POP   A                  (0220)     pop   A
0443: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0444: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0446: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0447: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0459: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
045A: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
045B: 67       ASR   A                  (0262)     asr   A
045C: 67       ASR   A                  (0263)     asr   A
045D: 67       ASR   A                  (0264)     asr   A
045E: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0460: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0462: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0464: 18       POP   A                  (0268)     pop   A                            ; Restore value
0465: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0467: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0469: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
046B: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
046C: 4B       SWAP  A,X                (0305)     swap  A,X
046D: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
046F: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0470: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0472: 7F       RET                      (0310)     ret
0473: 70 BF    AND   F,0xBF             
0475: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0477: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0479: A0 06    JZ    0x0480             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
047B: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
047D: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
047E: 8F F8    JMP   0x0477             (0351)     jmp   .Loop_PrString               ; Go get next character
0480: 70 3F    AND   F,0x3F             
0482: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0484: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0485: 90 65    CALL  0x04EC             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0487: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0488: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0489: 67       ASR   A                  (0390)     asr   A
048A: 67       ASR   A                  (0391)     asr   A
048B: 67       ASR   A                  (0392)     asr   A
048C: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
048E: 90 3B    CALL  0x04CB             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0490: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0491: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0493: 40       NOP                      (0397)     nop
0494: 40       NOP                      (0398)     nop
0495: 40       NOP                      (0399)     nop
0496: 90 33    CALL  0x04CB             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0498: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0499: 90 51    CALL  0x04EC             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
049B: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
049C: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
049D: 67       ASR   A                  (0436)     asr   A
049E: 67       ASR   A                  (0437)     asr   A
049F: 67       ASR   A                  (0438)     asr   A
04A0: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04A2: 90 09    CALL  0x04AD             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04A4: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04A5: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04A7: 40       NOP                      (0443)     nop
04A8: 40       NOP                      (0444)     nop
04A9: 40       NOP                      (0445)     nop
04AA: 90 01    CALL  0x04AD             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04AC: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
04AD: 08       PUSH  A                  (0477)     push  A
04AE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
04B1: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04B4: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
04B6: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
04B8: 18       POP   A                  (0483)     pop   A
04B9: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
04BB: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
04BD: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
04BF: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
04C1: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04C3: 40       NOP                      (0489)     nop
04C4: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
04C6: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04C8: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
04CA: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
04CB: 08       PUSH  A                  (0523)     push  A
04CC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
04CF: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04D2: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
04D5: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
04D7: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04D9: 18       POP   A                  (0530)     pop   A
04DA: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04DC: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04DE: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04E0: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04E2: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04E4: 40       NOP                      (0536)     NOP
04E5: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04E7: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04E9: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04EB: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04EC: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04ED: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04F0: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04F3: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
04F5: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04F7: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
04FA: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
04FC: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04FE: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0500: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0502: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0505: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0507: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0509: 40       NOP                      (0586)     NOP
                                        (0587) 
050A: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
050B: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
050D: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0510: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0512: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0514: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0515: 40       NOP                      (0597)     nop
0516: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0518: 08       PUSH  A                  (0610)     push  A
0519: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
051C: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
051E: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0520: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0521: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0522: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0523: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0526: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0528: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
052A: 40       NOP                      (0623)     nop
052B: 40       NOP                      (0624)     nop
                                        (0625) 
052C: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
052F: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0531: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0533: 18       POP   A                  (0630)     pop   A
0534: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0536: A0 04    JZ    0x053B             (0633)     jz    .UNLOCK
0538: 79       DEC   X                  (0634)     dec   X
0539: BF D3    JNZ   0x050D             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
053B: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
053C: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
053F: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0541: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0543: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0545: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0547: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0548: 7F       RET                      (0646)     ret
0549: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
054C: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
054F: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0552: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0555: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0557: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0559: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
055B: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
055D: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
055F: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0561: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0563: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0565: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0567: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0569: 50 03    MOV   A,0x3              (0701)     mov   A,03h
056B: 9F 40    CALL  0x04AD             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
056D: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
056F: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0571: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0573: 9F 38    CALL  0x04AD             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0575: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0577: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0579: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
057B: 50 03    MOV   A,0x3              (0714)     mov   A,03h
057D: 9F 2E    CALL  0x04AD             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
057F: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0581: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0583: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0585: 9F 26    CALL  0x04AD             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0587: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0589: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
058B: 50 08    MOV   A,0x8              (0726)     mov   A,08h
058D: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
058F: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0591: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0593: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0595: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0597: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0599: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
059B: 50 06    MOV   A,0x6              (0736)     mov   A,06h
059D: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
059F: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05A1: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
05A3: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05A5: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
05A7: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05A9: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
05AB: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05AD: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
05AF: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05B1: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
05B3: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05B5: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05B7: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
05BC: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
05BE: 10       PUSH  X                  (0791)     push  X                            ; Store COL
05BF: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
05C1: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
05C2: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
05C4: 20       POP   X                  (0795)     pop   X
                                        (0796) 
05C5: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
05C7: 70 3F    AND   F,0x3F             
05C9: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
05CB: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05CC: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
05CE: 78       DEC   A                  (0828)     dec   A
05CF: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
05D1: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05DA: 08       PUSH  A                  (0871)     push  A
05DB: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05DD: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05DF: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05E1: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05E3: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05E5: D0 06    JNC   0x05EC             (0877)     jnc   .Delay50u_End
05E7: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05E9: 78       DEC   A                  (0880)     dec   A                              ; [4]
05EA: BF FE    JNZ   0x05E9             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05EC: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05ED: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
05EE: 4F       MOV   X,SP               (1015)     mov   X, SP
05EF: 10       PUSH  X                  (1016)     push  X
05F0: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
05F2: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
05F4: 70 3F    AND   F,0x3F             
05F6: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
05F8: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
05FA: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
05FB: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
05FE: B0 05    JNZ   0x0604             (1026)     jnz   .LCD_CHECK1
0600: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0602: 80 11    JMP   0x0614             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0604: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0607: D0 07    JNC   0x060F             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0609: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
060B: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
060D: 80 06    JMP   0x0614             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
060F: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0611: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0614: 9E 6F    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0616: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0618: BF E2    JNZ   0x05FB             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
061A: 70 3F    AND   F,0x3F             
061C: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
061E: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
061F: 4F       MOV   X,SP               (1168)     mov   X, SP
0620: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0622: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0624: 08       PUSH  A                  (1172)     push  A
0625: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0627: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0629: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
062B: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
062E: B0 05    JNZ   0x0634             (1177)     jnz   .VBG_NZ_SEG
0630: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0632: 80 13    JMP   0x0646             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0634: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0637: D0 09    JNC   0x0641             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0639: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
063B: 78       DEC   A                  (1185)     dec   A
063C: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
063F: 80 06    JMP   0x0646             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0641: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0644: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0646: 9E 3D    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0648: 18       POP   A                  (1195)     pop   A
0649: 78       DEC   A                  (1196)     dec   A
064A: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
064C: BF D7    JNZ   0x0624             (1198)     jnz   .VBG_LOOP
064E: 70 3F    AND   F,0x3F             
0650: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0652: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0653: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0654: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0655: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0656: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0658: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
065A: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
065D: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0660: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0662: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0664: D0 05    JNC   0x066A             (1251)     jnc   .VBG_SOLID
0666: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0668: 80 03    JMP   0x066C             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
066A: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
066C: 9E 17    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
066E: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0670: BF EF    JNZ   0x0660             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0672: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0674: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0677: BF E5    JNZ   0x065D             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0679: 18       POP   A                  (1264)     pop  A
067A: 18       POP   A                  (1265)     pop  A
067B: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
067D: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
067F: 70 3F    AND   F,0x3F             
0681: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0683: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0692: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0693: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0695: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0697: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0699: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
069B: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
069E: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
06A1: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
06A3: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
06A6: B0 05    JNZ   0x06AC             (1332)     jnz   .BG_OTHER
06A8: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
06AA: 80 03    JMP   0x06AE             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
06AC: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
06AE: 9D D5    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData(1338)     call  LCD_WriteData
06B0: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
06B2: BF EE    JNZ   0x06A1             (1340)     jnz   .BG_Loop2
06B4: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
06B6: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
06B9: BF E4    JNZ   0x069E             (1343)     jnz   .BG_Loop1
                                        (1344) 
06BB: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
06BD: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
06BF: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
06C1: 70 3F    AND   F,0x3F             
06C3: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
06C5: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: .\main.asm                        (0001) ;------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;------------------------------------------------------
                                        (0004) ;debouncer circuit
                                        (0005) include "m8c.inc"
                                        (0006) include "memory.inc"
                                        (0007) include "PSoCAPI.inc"
                                        (0008) 
                                        (0009) export bShadow
                                        (0010) 
                                        (0011) area bss(RAM)		;alocations area in RAM - use 'area bss' for RAM
                                        (0012) 	bShadow: blk 1	;reserve a RAM location named bShadow of blk/byte size 1
                                        (0013) area text(rom,rel ) ;'text' (this can be anything pg 25 in AL) in ROM, rel = linker can relocate the code or data
                                        (0014) 
                                        (0015) 
                                        (0016) 
                                        (0017) ;just to print on LCD
                                        (0018) export _main
                                        (0019) 
                                        (0020) area text(rom,rel )	;nexts lines are code
                                        (0021) 
                                        (0022) 
                                        (0023) _main:
                                        (0024)  ;GPIOs are configured with GUI
06C6: 9E 81    CALL  _LCD_Init|LCD_Start|_LCD_Start|LCD_Init(0025)  	call LCD_Start
06C8: 50 01    MOV   A,0x1              (0026) 	mov A, 01h
06CA: 57 00    MOV   X,0x0              (0027) 	mov X, 00h
06CC: 9E EE    CALL  _LCD_Position      (0028) 	call LCD_Position
06CE: 50 06    MOV   A,0x6              (0029) 	mov A, >THE_STRNG
06D0: 57 EF    MOV   X,0xEF             (0030) 	mov X, <THE_STRNG
06D2: 9D 63    CALL  _LCD_PrCString     (0031) 	call LCD_PrCString
06D4: 43 E1 02 OR    REG[0xE1],0x2      
06D7: 43 E0 20 OR    REG[0xE0],0x20     
06DA: 71 01    OR    F,0x1              
                                        (0032)   
                                        (0033)     M8C_EnableIntMask INT_MSK1, INT_MSK1_DBB01					;enable digital block one interrupt
                                        (0034) 	M8C_EnableIntMask INT_MSK0, INT_MSK0_GPIO 					;enable GPIO Interrupt Mask
                                        (0035) 	M8C_EnableGInt												;enable global interrupts
06DC: 55 FA 00 MOV   [bShadow+245],0x0  (0036) 	mov [250], 00h 	;holds value of interrupt number
06DF: 55 FB 00 MOV   [bShadow+246],0x0  (0037) 	mov [251], 00h 	;holds value of seconds
06E2: 55 FC 00 MOV   [bShadow+247],0x0  (0038) 	mov [252], 00h	;holds value of minutes
                                        (0039) 	
                                        (0040) 	;start timer
                                        (0041) 
06E5: 7C 03 DF LCALL _Timer16_sec_Start (0042) 	lcall Timer16_sec_Start
                                        (0043) 
                                        (0044) 
                                        (0045)  loop:
06E8: 40       NOP                      (0046)     nop
06E9: 40       NOP                      (0047) 	nop
06EA: 40       NOP                      (0048) 	nop
06EB: 40       NOP                      (0049) 	nop
06EC: 40       NOP                      (0050) 	nop
                                        (0051) 
06ED: 8F FA    JMP   0x06E8             (0052)     jmp loop
                                        (0053) 
                                        (0054) .LITERAL 
                                        (0055) THE_STRNG:
                                        (0056) ds "EvryTng is Awsme"
                                        (0057) db 00h
                                        (0058) .ENDLITERAL 
                                        (0059) ;FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0700: 08       PUSH  A                  (0059) 	push A
0701: 10       PUSH  X                  (0060) 	push X
                                        (0061) 
                                        (0062) 
                                        (0063)     ;toggle LEDs
                                        (0064) ;	mov A, reg[PRT1DR]
                                        (0065) ;	xor A, FFh 										;don't toggle LED 0
                                        (0066) ;	mov reg[PRT1DR], A
                                        (0067) 	
                                        (0068) 	;present numbr of interrupt on LCD
0702: 76 FA    INC   [bShadow+245]      (0069) 	inc [250]
0704: 50 00    MOV   A,0x0              (0070) 	mov A, 00h
0706: 57 00    MOV   X,0x0              (0071) 	mov X, 00h
0708: 9E B2    CALL  _LCD_Position      (0072) 	call LCD_Position
070A: 51 FA    MOV   A,[bShadow+245]    (0073) 	mov A, [250]
070C: 9D 4B    CALL  _LCD_PrHexByte     (0074) 	call LCD_PrHexByte
                                        (0075) 	
                                        (0076) ;	;ideally present time on LCD
                                        (0077) ;	lcall Timer16_sec_wReadTimer
                                        (0078) ;	mov [251], A						;hold on to A value
                                        (0079) ;	mov [252], X
                                        (0080) ;
                                        (0081) ;	;lsb
                                        (0082) ;	mov A, 01h							;put position before then just output A?
                                        (0083) ;	mov X, 02h
                                        (0084) ;	call LCD_Position
                                        (0085) ;	mov A, [251]
                                        (0086) ;	call LCD_PrHexByte
                                        (0087) ;	;msb
                                        (0088) ;	mov A, 01h							;put position before then just output A?
                                        (0089) ;	mov X, 00h
                                        (0090) ;	call LCD_Position
                                        (0091) ;	mov A, [252]
                                        (0092) ;	call LCD_PrHexByte
                                        (0093) 	
                                        (0094) 	
070E: 20       POP   X                  (0095) 	pop X
070F: 18       POP   A                  (0096) 	pop A
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0101) 
0710: 7E       RETI                     (0102)    reti
                                        (0103) 
                                        (0104) 
                                        (0105) ; end of file PSoCGPIOINT.asm
