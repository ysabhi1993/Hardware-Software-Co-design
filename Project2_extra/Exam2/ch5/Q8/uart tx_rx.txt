PINS:
4- SPI: SCLK, CS_N, MOSI, MISO
2- UART TX/RX

uart RX - use start RX block
uart TX - use start TX block
uart TX/RX - use both!!!!


CHA CHA CHINGGGGG!!!!

WOOHAAA

//--------------------start RX-------------------

BYTE receive_status;
BYTE receive_data;


//Start: 
UART_RX_Start(UART_PARITY_NONE);		//Enable RX side of UART

/*not doing checks for error as it is not done in Fig 5.3*/

while (1){
	
		//poll the reg_full - initial read
		receive_status = UART_RX_bReadRxStatus();

		//mask out reg_full
		receive_status &= UART_RX_RX_REG_FULL; 

		//poll for reg_full - continuous polling
		while (receive_status != UART_RX_RX_REG_FULL) 
		{
			receive_status = UART_RX_bReadRxStatus();
			receive_status &= UART_RX_RX_REG_FULL;
		}
		//RX_REG_FULL flag is cleared

		//grab data from receive buffer

		receive_data = UART_RX_bReadRxData;

}
//-------------------finish RX----------------------


//--------------------start TX----------------------

BYTE transmit_status;
BYTE transmit_done;


//Start: 
UART_TX_Start(UART_PARITY_NONE);		//Enable RX side of UART

while (1){		
		//check Tx buffer is empty
		transmit_status = UART_TX_bReadTxStatus();

		//mask for just tx buffer empty bit
		transmit_Status &= UART_TX_TX_BUFFER_EMPTY;
		
		while (transmit_status != UART_TX_TX_BUFFER_EMPTY) 
		{
			transmit_status = UART_TX_bReadTxStatus();
			transmit_Status &= UART_TX_TX_BUFFER_EMPTY;
		}
		transmit_done = 0x55;
		
		//send done status to M1
		UART_TX_SendData(transmit_done);
		
}
//--------------------finished TX----------------






