FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 0E 73 LJMP  _TickHandler_ISR   (0125)     ljmp _TickHandler_ISR
000B: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 53 LJMP  _TickTimer_ISR     (0153)     ljmp	_TickTimer_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 8F MOV   REG[0xE3],0x8F     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
                                        (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [_ramareas_end+196],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [_ramareas_end+197],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
008F: 62 E0 9A MOV   REG[0xE0],0x9A     (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
0097: 43 E0 40 OR    REG[0xE0],0x40     (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
009A: 62 E2 00 MOV   REG[0xE2],0x0      (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
009D: 49 DA 40 TST   REG[0xDA],0x40     (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00A0: AF FC    JZ    0x009D             (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
00A2: 71 10    OR    F,0x10             
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
                                        (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
00A4: 62 E0 C8 MOV   REG[0xE0],0xC8     (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
00A7: 70 EF    AND   F,0xEF             
00A9: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
00AC: 62 E2 00 MOV   REG[0xE2],0x0      (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
00AF: 49 DA 40 TST   REG[0xDA],0x40     (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00B2: AF FC    JZ    0x00AF             (0351)     jz   .WaitFor16ms
00B4: 71 10    OR    F,0x10             
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00B6: 62 E0 CA MOV   REG[0xE0],0xCA     (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00B9: 70 EF    AND   F,0xEF             
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00BB: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00BE: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00C1: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00C4: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
                                        (0410)     swap  A, SP
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
00C7: 50 34    MOV   A,0x34             (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
00C9: 4E       SWAP  SP,A               (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00CA: 7C 04 40 LCALL 0x0440             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
00CD: 50 00    MOV   A,0x0              (0452)     mov  A,0                           ; clear the 'bss' segment to zero
00CF: 55 0E 1F MOV   [__r0],0x1F        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
00D2: 3C 0E 34 CMP   [__r0],0x34        (0455)     cmp  [__r0],<__bss_end
00D5: A0 05    JZ    0x00DB             (0456)     jz   BssDone
00D7: 3F 0E    MVI   [__r0],A           (0457)     mvi  [__r0],A
00D9: 8F F8    JMP   0x00D2             (0458)     jmp  BssLoop
                                        (0459) BssDone:
00DB: 50 02    MOV   A,0x2              (0460)     mov  A,>__idata_start              ; copy idata to data segment
00DD: 57 20    MOV   X,0x20             (0461)     mov  X,<__idata_start
00DF: 55 0E 00 MOV   [__r0],0x0         (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
00E2: 3C 0E 04 CMP   [__r0],0x4         (0464)     cmp  [__r0],<__data_end
00E5: A0 0B    JZ    0x00F1             (0465)     jz   C_RTE_Done
00E7: 08       PUSH  A                  (0466)     push A
00E8: 28       ROMX                     (0467)     romx
00E9: 3F 0E    MVI   [__r0],A           (0468)     mvi  [__r0],A
00EB: 18       POP   A                  (0469)     pop  A
00EC: 75       INC   X                  (0470)     inc  X
00ED: 09 00    ADC   A,0x0              (0471)     adc  A,0
00EF: 8F F2    JMP   0x00E2             (0472)     jmp  IDataLoop
00F1: 71 10    OR    F,0x10             
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
                                        (0484)     mov   A, >__pXIData                ; Get the address of the flash
                                        (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
                                        (0486)     push  A
                                        (0487)     romx                               ; get the MSB of xidata's address
                                        (0488)     mov   [__r0], A
                                        (0489)     pop   A
                                        (0490)     inc   X
                                        (0491)     adc   A, 0
                                        (0492)     romx                               ; get the LSB of xidata's address
                                        (0493)     swap  A, X
                                        (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
                                        (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
                                        (0514)     inc   X                            ; pXIData++
                                        (0515)     adc   A, 0
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
                                        (0521)     push  A
                                        (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
                                        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
                                        (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
                                        (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
                                        (0526)     pop   A                            ; restore pXIData to [A,X]
                                        (0527)     inc   X                            ; pXIData++
                                        (0528)     adc   A, 0
                                        (0529)     push  A
                                        (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
                                        (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
                                        (0532)     pop   A                            ; restore pXIData to [A,X]
                                        (0533)     inc   X                            ; pXIData++ (point to size)
                                        (0534)     adc   A, 0
                                        (0535)     push  A
                                        (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
                                        (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
                                        (0538)     mov   [__r1], A                    ;             else downcount in __r1
                                        (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
                                        (0547)     inc   X                            ; pXIData++ (point to next data byte)
                                        (0548)     adc   A, 0
                                        (0549)     push  A
                                        (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
                                        (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
                                        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
                                        (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
                                        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                        (0555)     inc   A
                                        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
                                        (0558)     pop   A                            ; restore pXIData to [A,X]
                                        (0559)     dec   [__r1]                       ; End of this array in flash?
                                        (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
                                        (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
                                        (0564)     pop   A                            ; restore pXIData to [A,X]
                                        (0565)     inc   X                            ; pXIData++ (point to next data byte)
                                        (0566)     adc   A, 0
                                        (0567)     push  A
                                        (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
                                        (0569)     mov   [__r1], A                    ; Initialize downcounter
                                        (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
                                        (0576)     mvi   [__r0], A                    ; Clear a byte
                                        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
                                        (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
                                        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
                                        (0580)     inc   A
                                        (0581)     mov   reg[ MVW_PP], A
                                        (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
                                        (0584)     dec   [__r1]                       ; Was this the last byte?
                                        (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
                                        (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
                                        (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
                                        (0590)     pop   A                            ; balance stack
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
00F3: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00F6: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
00F8: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
00FB: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
00FD: 62 E0 DB MOV   REG[0xE0],0xDB     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0100: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0103: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0105: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0108: 7C 06 E5 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
010B: 8F FF    JMP   0x010B             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
010D: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
010F: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0224: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_frequencyproject
                                        (0019) AREA psoc_config(rom, rel)
                                        (0020) LoadConfigTBL_frequencyproject:
                                        (0021) 	M8C_SetBank0
                                        (0022) ;  Global Register values Bank 0
0226: 62 60 2B MOV   REG[0x60],0x2B     (0023) 	mov	reg[60h], 2bh		; AnalogColumnInputSelect register (AMX_IN)
0229: 62 66 00 MOV   REG[0x66],0x0      (0024) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
022C: 62 63 07 MOV   REG[0x63],0x7      (0025) 	mov	reg[63h], 07h		; AnalogReferenceControl register (ARF_CR)
022F: 62 65 00 MOV   REG[0x65],0x0      (0026) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
0232: 62 E6 02 MOV   REG[0xE6],0x2      (0027) 	mov	reg[e6h], 02h		; DecimatorControl_0 register (DEC_CR0)
0235: 62 E7 00 MOV   REG[0xE7],0x0      (0028) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
0238: 62 D6 00 MOV   REG[0xD6],0x0      (0029) 	mov	reg[d6h], 00h		; I2CConfig register (I2C_CFG)
023B: 62 B0 00 MOV   REG[0xB0],0x0      (0030) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
023E: 62 B1 00 MOV   REG[0xB1],0x0      (0031) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
0241: 62 B2 00 MOV   REG[0xB2],0x0      (0032) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
0244: 62 B3 33 MOV   REG[0xB3],0x33     (0033) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
0247: 62 B4 33 MOV   REG[0xB4],0x33     (0034) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
024A: 62 B5 00 MOV   REG[0xB5],0x0      (0035) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
024D: 62 B6 00 MOV   REG[0xB6],0x0      (0036) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
0250: 62 B8 55 MOV   REG[0xB8],0x55     (0037) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
0253: 62 B9 00 MOV   REG[0xB9],0x0      (0038) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
0256: 62 BA 10 MOV   REG[0xBA],0x10     (0039) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
0259: 62 BB 33 MOV   REG[0xBB],0x33     (0040) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
025C: 62 BC 33 MOV   REG[0xBC],0x33     (0041) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
025F: 62 BD 20 MOV   REG[0xBD],0x20     (0042) 	mov	reg[bdh], 20h		; Row_1_OutputDrive_0 register (RDI1SRO0)
0262: 62 BE 00 MOV   REG[0xBE],0x0      (0043) 	mov	reg[beh], 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
0265: 62 C0 00 MOV   REG[0xC0],0x0      (0044) 	mov	reg[c0h], 00h		; Row_2_InputMux register (RDI2RI)
0268: 62 C1 00 MOV   REG[0xC1],0x0      (0045) 	mov	reg[c1h], 00h		; Row_2_InputSync register (RDI2SYN)
026B: 62 C2 20 MOV   REG[0xC2],0x20     (0046) 	mov	reg[c2h], 20h		; Row_2_LogicInputAMux register (RDI2IS)
026E: 62 C3 33 MOV   REG[0xC3],0x33     (0047) 	mov	reg[c3h], 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
0271: 62 C4 33 MOV   REG[0xC4],0x33     (0048) 	mov	reg[c4h], 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
0274: 62 C5 00 MOV   REG[0xC5],0x0      (0049) 	mov	reg[c5h], 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
0277: 62 C6 00 MOV   REG[0xC6],0x0      (0050) 	mov	reg[c6h], 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
027A: 62 C8 55 MOV   REG[0xC8],0x55     (0051) 	mov	reg[c8h], 55h		; Row_3_InputMux register (RDI3RI)
027D: 62 C9 00 MOV   REG[0xC9],0x0      (0052) 	mov	reg[c9h], 00h		; Row_3_InputSync register (RDI3SYN)
0280: 62 CA 30 MOV   REG[0xCA],0x30     (0053) 	mov	reg[cah], 30h		; Row_3_LogicInputAMux register (RDI3IS)
0283: 62 CB 33 MOV   REG[0xCB],0x33     (0054) 	mov	reg[cbh], 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
0286: 62 CC 33 MOV   REG[0xCC],0x33     (0055) 	mov	reg[cch], 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
0289: 62 CD 00 MOV   REG[0xCD],0x0      (0056) 	mov	reg[cdh], 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
028C: 62 CE 00 MOV   REG[0xCE],0x0      (0057) 	mov	reg[ceh], 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
028F: 62 6C 00 MOV   REG[0x6C],0x0      (0058) 	mov	reg[6ch], 00h		; TMP_DR0 register (TMP_DR0)
0292: 62 6D 00 MOV   REG[0x6D],0x0      (0059) 	mov	reg[6dh], 00h		; TMP_DR1 register (TMP_DR1)
0295: 62 6E 00 MOV   REG[0x6E],0x0      (0060) 	mov	reg[6eh], 00h		; TMP_DR2 register (TMP_DR2)
0298: 62 6F 00 MOV   REG[0x6F],0x0      (0061) 	mov	reg[6fh], 00h		; TMP_DR3 register (TMP_DR3)
                                        (0062) ;  Instance name Comparator, User Module CMPPRG
                                        (0063) ;       Instance name Comparator, Block Name COMP(ACB00)
029B: 62 71 7A MOV   REG[0x71],0x7A     (0064) 	mov	reg[71h], 7ah		;Comparator_COMP_CR0(ACB00CR0)
029E: 62 72 61 MOV   REG[0x72],0x61     (0065) 	mov	reg[72h], 61h		;Comparator_COMP_CR1(ACB00CR1)
02A1: 62 73 40 MOV   REG[0x73],0x40     (0066) 	mov	reg[73h], 40h		;Comparator_COMP_CR2(ACB00CR2)
02A4: 62 70 00 MOV   REG[0x70],0x0      (0067) 	mov	reg[70h], 00h		;Comparator_COMP_CR3(ACB00CR3)
                                        (0068) ;  Instance name LCD, User Module LCD
                                        (0069) ;  Instance name SampleFreq, User Module Counter24
                                        (0070) ;       Instance name SampleFreq, Block Name CNTR24_ISB(DBB11)
02A7: 62 37 00 MOV   REG[0x37],0x0      (0071) 	mov	reg[37h], 00h		;SampleFreq_CONTROL_ISB_REG(DBB11CR0)
02AA: 62 35 25 MOV   REG[0x35],0x25     (0072) 	mov	reg[35h], 25h		;SampleFreq_PERIOD_ISB_REG(DBB11DR1)
02AD: 62 36 12 MOV   REG[0x36],0x12     (0073) 	mov	reg[36h], 12h		;SampleFreq_COMPARE_ISB_REG(DBB11DR2)
                                        (0074) ;       Instance name SampleFreq, Block Name CNTR24_LSB(DBB10)
02B0: 62 33 00 MOV   REG[0x33],0x0      (0075) 	mov	reg[33h], 00h		;SampleFreq_CONTROL_LSB_REG(DBB10CR0)
02B3: 62 31 F7 MOV   REG[0x31],0xF7     (0076) 	mov	reg[31h], f7h		;SampleFreq_PERIOD_LSB_REG(DBB10DR1)
02B6: 62 32 FC MOV   REG[0x32],0xFC     (0077) 	mov	reg[32h], fch		;SampleFreq_COMPARE_LSB_REG(DBB10DR2)
                                        (0078) ;       Instance name SampleFreq, Block Name CNTR24_MSB(DCB12)
02B9: 62 3B 00 MOV   REG[0x3B],0x0      (0079) 	mov	reg[3bh], 00h		;SampleFreq_CONTROL_MSB_REG(DCB12CR0)
02BC: 62 39 00 MOV   REG[0x39],0x0      (0080) 	mov	reg[39h], 00h		;SampleFreq_PERIOD_MSB_REG(DCB12DR1)
02BF: 62 3A 00 MOV   REG[0x3A],0x0      (0081) 	mov	reg[3ah], 00h		;SampleFreq_COMPARE_MSB_REG(DCB12DR2)
                                        (0082) ;  Instance name TickTimer, User Module Timer16
                                        (0083) ;       Instance name TickTimer, Block Name TIMER16_LSB(DBB00)
02C2: 62 23 00 MOV   REG[0x23],0x0      (0084) 	mov	reg[23h], 00h		;TickTimer_CONTROL_LSB_REG(DBB00CR0)
02C5: 62 21 FF MOV   REG[0x21],0xFF     (0085) 	mov	reg[21h], ffh		;TickTimer_PERIOD_LSB_REG(DBB00DR1)
02C8: 62 22 00 MOV   REG[0x22],0x0      (0086) 	mov	reg[22h], 00h		;TickTimer_COMPARE_LSB_REG(DBB00DR2)
                                        (0087) ;       Instance name TickTimer, Block Name TIMER16_MSB(DBB01)
02CB: 62 27 04 MOV   REG[0x27],0x4      (0088) 	mov	reg[27h], 04h		;TickTimer_CONTROL_MSB_REG(DBB01CR0)
02CE: 62 25 FF MOV   REG[0x25],0xFF     (0089) 	mov	reg[25h], ffh		;TickTimer_PERIOD_MSB_REG(DBB01DR1)
02D1: 62 26 00 MOV   REG[0x26],0x0      (0090) 	mov	reg[26h], 00h		;TickTimer_COMPARE_MSB_REG(DBB01DR2)
02D4: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
                                        (0092) ;  Global Register values Bank 1
02D6: 62 61 00 MOV   REG[0x61],0x0      (0093) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
02D9: 62 69 00 MOV   REG[0x69],0x0      (0094) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
02DC: 62 60 00 MOV   REG[0x60],0x0      (0095) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
02DF: 62 62 00 MOV   REG[0x62],0x0      (0096) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
02E2: 62 67 33 MOV   REG[0x67],0x33     (0097) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
02E5: 62 68 33 MOV   REG[0x68],0x33     (0098) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
02E8: 62 63 00 MOV   REG[0x63],0x0      (0099) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
02EB: 62 66 00 MOV   REG[0x66],0x0      (0100) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
02EE: 62 D1 00 MOV   REG[0xD1],0x0      (0101) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
02F1: 62 D3 00 MOV   REG[0xD3],0x0      (0102) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
02F4: 62 D0 00 MOV   REG[0xD0],0x0      (0103) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
02F7: 62 D2 00 MOV   REG[0xD2],0x0      (0104) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
02FA: 62 E1 1F MOV   REG[0xE1],0x1F     (0105) 	mov	reg[e1h], 1fh		; OscillatorControl_1 register (OSC_CR1)
02FD: 62 E2 00 MOV   REG[0xE2],0x0      (0106) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
0300: 62 DF B7 MOV   REG[0xDF],0xB7     (0107) 	mov	reg[dfh], b7h		; OscillatorControl_3 register (OSC_CR3)
0303: 62 DE 01 MOV   REG[0xDE],0x1      (0108) 	mov	reg[deh], 01h		; OscillatorControl_4 register (OSC_CR4)
0306: 62 DD 00 MOV   REG[0xDD],0x0      (0109) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
0309: 62 E7 00 MOV   REG[0xE7],0x0      (0110) 	mov	reg[e7h], 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0111) ;  Instance name Comparator, User Module CMPPRG
                                        (0112) ;       Instance name Comparator, Block Name COMP(ACB00)
                                        (0113) ;  Instance name LCD, User Module LCD
                                        (0114) ;  Instance name SampleFreq, User Module Counter24
                                        (0115) ;       Instance name SampleFreq, Block Name CNTR24_ISB(DBB11)
030C: 62 34 11 MOV   REG[0x34],0x11     (0116) 	mov	reg[34h], 11h		;SampleFreq_FUNC_ISB_REG(DBB11FN)
030F: 62 35 35 MOV   REG[0x35],0x35     (0117) 	mov	reg[35h], 35h		;SampleFreq_INPUT_ISB_REG(DBB11IN)
0312: 62 36 40 MOV   REG[0x36],0x40     (0118) 	mov	reg[36h], 40h		;SampleFreq_OUTPUT_ISB_REG(DBB11OU)
                                        (0119) ;       Instance name SampleFreq, Block Name CNTR24_LSB(DBB10)
0315: 62 30 11 MOV   REG[0x30],0x11     (0120) 	mov	reg[30h], 11h		;SampleFreq_FUNC_LSB_REG(DBB10FN)
0318: 62 31 15 MOV   REG[0x31],0x15     (0121) 	mov	reg[31h], 15h		;SampleFreq_INPUT_LSB_REG(DBB10IN)
031B: 62 32 40 MOV   REG[0x32],0x40     (0122) 	mov	reg[32h], 40h		;SampleFreq_OUTPUT_LSB_REG(DBB10OU)
                                        (0123) ;       Instance name SampleFreq, Block Name CNTR24_MSB(DCB12)
031E: 62 38 31 MOV   REG[0x38],0x31     (0124) 	mov	reg[38h], 31h		;SampleFreq_FUNC_MSB_REG(DCB12FN)
0321: 62 39 35 MOV   REG[0x39],0x35     (0125) 	mov	reg[39h], 35h		;SampleFreq_INPUT_MSB_REG(DCB12IN)
0324: 62 3A 45 MOV   REG[0x3A],0x45     (0126) 	mov	reg[3ah], 45h		;SampleFreq_OUTPUT_MSB_REG(DCB12OU)
                                        (0127) ;  Instance name TickTimer, User Module Timer16
                                        (0128) ;       Instance name TickTimer, Block Name TIMER16_LSB(DBB00)
0327: 62 20 10 MOV   REG[0x20],0x10     (0129) 	mov	reg[20h], 10h		;TickTimer_FUNC_LSB_REG(DBB00FN)
032A: 62 21 41 MOV   REG[0x21],0x41     (0130) 	mov	reg[21h], 41h		;TickTimer_INPUT_LSB_REG(DBB00IN)
032D: 62 22 40 MOV   REG[0x22],0x40     (0131) 	mov	reg[22h], 40h		;TickTimer_OUTPUT_LSB_REG(DBB00OU)
                                        (0132) ;       Instance name TickTimer, Block Name TIMER16_MSB(DBB01)
0330: 62 24 30 MOV   REG[0x24],0x30     (0133) 	mov	reg[24h], 30h		;TickTimer_FUNC_MSB_REG(DBB01FN)
0333: 62 25 31 MOV   REG[0x25],0x31     (0134) 	mov	reg[25h], 31h		;TickTimer_INPUT_MSB_REG(DBB01IN)
0336: 62 26 40 MOV   REG[0x26],0x40     (0135) 	mov	reg[26h], 40h		;TickTimer_OUTPUT_MSB_REG(DBB01OU)
0339: 70 EF    AND   F,0xEF             
033B: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
                                        (0137) ;  Ordered Global Register values
                                        (0138) 	M8C_SetBank0
033D: 62 00 80 MOV   REG[0x0],0x80      (0139) 	mov	reg[00h], 80h		; Port_0_Data register (PRT0DR)
0340: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
0342: 62 00 B0 MOV   REG[0x0],0xB0      (0141) 	mov	reg[00h], b0h		; Port_0_DriveMode_0 register (PRT0DM0)
0345: 62 01 CF MOV   REG[0x1],0xCF      (0142) 	mov	reg[01h], cfh		; Port_0_DriveMode_1 register (PRT0DM1)
0348: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
034A: 62 03 4F MOV   REG[0x3],0x4F      (0144) 	mov	reg[03h], 4fh		; Port_0_DriveMode_2 register (PRT0DM2)
034D: 62 02 20 MOV   REG[0x2],0x20      (0145) 	mov	reg[02h], 20h		; Port_0_GlobalSelect register (PRT0GS)
0350: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
0352: 62 02 00 MOV   REG[0x2],0x0       (0147) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0355: 62 03 00 MOV   REG[0x3],0x0       (0148) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0358: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
035A: 62 01 00 MOV   REG[0x1],0x0       (0150) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
035D: 62 04 00 MOV   REG[0x4],0x0       (0151) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0360: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0362: 62 04 80 MOV   REG[0x4],0x80      (0153) 	mov	reg[04h], 80h		; Port_1_DriveMode_0 register (PRT1DM0)
0365: 62 05 7F MOV   REG[0x5],0x7F      (0154) 	mov	reg[05h], 7fh		; Port_1_DriveMode_1 register (PRT1DM1)
0368: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
036A: 62 07 7C MOV   REG[0x7],0x7C      (0156) 	mov	reg[07h], 7ch		; Port_1_DriveMode_2 register (PRT1DM2)
036D: 62 06 00 MOV   REG[0x6],0x0       (0157) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0370: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0372: 62 06 00 MOV   REG[0x6],0x0       (0159) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0375: 62 07 00 MOV   REG[0x7],0x0       (0160) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0378: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
037A: 62 05 00 MOV   REG[0x5],0x0       (0162) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
037D: 62 08 00 MOV   REG[0x8],0x0       (0163) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0380: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0382: 62 08 7F MOV   REG[0x8],0x7F      (0165) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0385: 62 09 80 MOV   REG[0x9],0x80      (0166) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0388: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
038A: 62 0B 80 MOV   REG[0xB],0x80      (0168) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
038D: 62 0A 00 MOV   REG[0xA],0x0       (0169) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0390: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0392: 62 0A 00 MOV   REG[0xA],0x0       (0171) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0395: 62 0B 00 MOV   REG[0xB],0x0       (0172) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0398: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
039A: 62 09 00 MOV   REG[0x9],0x0       (0174) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
039D: 62 0C 00 MOV   REG[0xC],0x0       (0175) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
03A0: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
03A2: 62 0C 00 MOV   REG[0xC],0x0       (0177) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
03A5: 62 0D 00 MOV   REG[0xD],0x0       (0178) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
03A8: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
03AA: 62 0F 00 MOV   REG[0xF],0x0       (0180) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
03AD: 62 0E 00 MOV   REG[0xE],0x0       (0181) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03B0: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
03B2: 62 0E 00 MOV   REG[0xE],0x0       (0183) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
03B5: 62 0F 00 MOV   REG[0xF],0x0       (0184) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
03B8: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
03BA: 62 0D 00 MOV   REG[0xD],0x0       (0186) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
03BD: 62 10 00 MOV   REG[0x10],0x0      (0187) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
03C0: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
03C2: 62 10 00 MOV   REG[0x10],0x0      (0189) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03C5: 62 11 00 MOV   REG[0x11],0x0      (0190) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
03C8: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
03CA: 62 13 00 MOV   REG[0x13],0x0      (0192) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
03CD: 62 12 00 MOV   REG[0x12],0x0      (0193) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03D0: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
03D2: 62 12 00 MOV   REG[0x12],0x0      (0195) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03D5: 62 13 00 MOV   REG[0x13],0x0      (0196) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03D8: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
03DA: 62 11 00 MOV   REG[0x11],0x0      (0198) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
03DD: 62 14 00 MOV   REG[0x14],0x0      (0199) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
03E0: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
03E2: 62 14 00 MOV   REG[0x14],0x0      (0201) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
03E5: 62 15 00 MOV   REG[0x15],0x0      (0202) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
03E8: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
03EA: 62 17 00 MOV   REG[0x17],0x0      (0204) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
03ED: 62 16 00 MOV   REG[0x16],0x0      (0205) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
03F0: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
03F2: 62 16 00 MOV   REG[0x16],0x0      (0207) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
03F5: 62 17 00 MOV   REG[0x17],0x0      (0208) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
03F8: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
03FA: 62 15 00 MOV   REG[0x15],0x0      (0210) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03FD: 62 18 00 MOV   REG[0x18],0x0      (0211) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0400: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0402: 62 18 00 MOV   REG[0x18],0x0      (0213) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0405: 62 19 00 MOV   REG[0x19],0x0      (0214) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0408: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
040A: 62 1B 00 MOV   REG[0x1B],0x0      (0216) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
040D: 62 1A 00 MOV   REG[0x1A],0x0      (0217) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0410: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
0412: 62 1A 00 MOV   REG[0x1A],0x0      (0219) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0415: 62 1B 00 MOV   REG[0x1B],0x0      (0220) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0418: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
041A: 62 19 00 MOV   REG[0x19],0x0      (0222) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
041D: 62 1C 00 MOV   REG[0x1C],0x0      (0223) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0420: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
0422: 62 1C 00 MOV   REG[0x1C],0x0      (0225) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0425: 62 1D 00 MOV   REG[0x1D],0x0      (0226) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0428: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
042A: 62 1F 00 MOV   REG[0x1F],0x0      (0228) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
042D: 62 1E 00 MOV   REG[0x1E],0x0      (0229) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0430: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0432: 62 1E 00 MOV   REG[0x1E],0x0      (0231) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0435: 62 1F 00 MOV   REG[0x1F],0x0      (0232) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0438: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
043A: 62 1D 00 MOV   REG[0x1D],0x0      (0234) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
043D: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
043F: 7F       RET                      (0236) 	ret
                                        (0237) 
                                        (0238) 
                                        (0239) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_frequencyproject
                                        (0026) export _LoadConfig_frequencyproject
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------------------------------
                                        (0045) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0046) ;                  parameters handled by boot code, like CPU speed). This
                                        (0047) ;                  function can be called from user code, but typically it
                                        (0048) ;                  is only called from boot.
                                        (0049) ;
                                        (0050) ;       INPUTS: None.
                                        (0051) ;      RETURNS: Nothing.
                                        (0052) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0053) ;               In the large memory model currently only the page
                                        (0054) ;               pointer registers listed below are modified.  This does
                                        (0055) ;               not guarantee that in future implementations of this
                                        (0056) ;               function other page pointer registers will not be
                                        (0057) ;               modified.
                                        (0058) ;          
                                        (0059) ;               Page Pointer Registers Modified: 
                                        (0060) ;               CUR_PP
                                        (0061) ;
                                        (0062) _LoadConfigInit:
                                        (0063)  LoadConfigInit:
                                        (0064)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0065)     
0440: 55 1C 00 MOV   [0x1C],0x0         (0066) 	mov		[Port_2_Data_SHADE], 0h
0443: 55 1D 7F MOV   [0x1D],0x7F        (0067) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0446: 55 1E 80 MOV   [0x1E],0x80        (0068) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0069) 
0449: 7C 04 4D LCALL 0x044D             (0070) 	lcall	LoadConfig_frequencyproject
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
044C: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration frequencyproject
                                        (0078) ;
                                        (0079) ;    Load configuration registers for frequencyproject.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_frequencyproject:
                                        (0096)  LoadConfig_frequencyproject:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
044D: 7C 02 24 LCALL 0x0224             (0098)     lcall   LoadConfigTBL_frequencyproject            ; Call load config table routine
0450: 70 EF    AND   F,0xEF             
                                        (0099) 
                                        (0100) 
                                        (0101)     M8C_SetBank0                    ; Force return to bank 0
                                        (0102)     RAM_EPILOGUE RAM_USE_CLASS_4
0452: 7F       RET                      (0103)     ret
                                        (0104) 
                                        (0105) 
                                        (0106) 
                                        (0107) AREA InterruptRAM(ram, rel)
                                        (0108) 
                                        (0109) NO_SHADOW:
                                        (0110) _NO_SHADOW:
                                        (0111) ; write only register shadows
                                        (0112) _Port_2_Data_SHADE:
                                        (0113) Port_2_Data_SHADE:	BLK	1
                                        (0114) _Port_2_DriveMode_0_SHADE:
                                        (0115) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0116) _Port_2_DriveMode_1_SHADE:
                                        (0117) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0118) 
FILE: lib\ticktimerint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TickTimerINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "TickTimer.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _TickTimer_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) export  _cOverFlow
                                        (0031) export _wTickCount
                                        (0032) export _wFirstValue
                                        (0033) export _wLastValue
                                        (0034) export _cSaveOverFlow
                                        (0035) export _wSaveTickNum
                                        (0036) export _wSaveCountNum
                                        (0037) export _bDataAvailable:
                                        (0038) ;------------------------
                                        (0039) ; Includes
                                        (0040) ;------------------------
                                        (0041) 
                                        (0042) 	
                                        (0043) ;------------------------
                                        (0044) ;  Constant Definitions
                                        (0045) ;------------------------
                                        (0046) LSB:	equ 1
                                        (0047) MSB:	equ 0
                                        (0048) 
                                        (0049) ;------------------------
                                        (0050) ; Variable Allocation
                                        (0051) ;------------------------
                                        (0052) _cOverFlow:      BLK  1
                                        (0053) _wTickCount:     BLK  2
                                        (0054) _wFirstValue:    BLK  2
                                        (0055) _wLastValue:     BLK  2
                                        (0056) _cSaveOverFlow:  BLK  1
                                        (0057) _wSaveTickNum:   BLK  2
                                        (0058) _wSaveCountNum:  BLK  2
                                        (0059) _bDataAvailable: BLK  1
                                        (0060) 
                                        (0061) ;---------------------------------------------------
                                        (0062) ; Insert your custom declarations above this banner
                                        (0063) ;---------------------------------------------------
                                        (0064) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0065) 
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) 
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: _TickTimer_ISR
                                        (0071) ;
                                        (0072) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0073) ;
                                        (0074) ;-----------------------------------------------------------------------------
                                        (0075) ;
                                        (0076) 
                                        (0077) _TickTimer_ISR:
                                        (0078) 
                                        (0079)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0080)    ;---------------------------------------------------
                                        (0081)    ; Insert your custom code below this banner
                                        (0082)    ;---------------------------------------------------
0453: 08       PUSH  A                  (0083)     push A
                                        (0084) 	;Move First tick's timer capture value to wSaveCountNum
                                        (0085) 	;Subtract Last tick's timer capture value from wSaveCountNum 
0454: 5F 1A 13 MOV   [0x1A],[0x13]      (0086)     mov  [_wSaveCountNum + LSB],[_wFirstValue + LSB]
0457: 5F 19 12 MOV   [0x19],[0x12]      (0087)     mov  [_wSaveCountNum + MSB],[_wFirstValue + MSB]  
045A: 51 15    MOV   A,[0x15]           (0088)     mov  A,[_wLastValue  + LSB]
045C: 14 1A    SUB   [0x1A],A           (0089)     sub  [_wSaveCountNum + LSB],A
045E: 51 14    MOV   A,[0x14]           (0090)     mov  A,[_wLastValue  + MSB]
0460: 1C 19    SBB   [0x19],A           (0091)     sbb  [_wSaveCountNum + MSB],A
                                        (0092)     
                                        (0093) 	;Move tick count and cOverFlow values to their respective save values
0462: 5F 16 0F MOV   [0x16],[0xF]       (0094)     mov  [_cSaveOverFlow]    ,[_cOverFlow]
0465: 5F 17 10 MOV   [0x17],[0x10]      (0095)     mov  [_wSaveTickNum + MSB ],[_wTickCount + MSB]
0468: 5F 18 11 MOV   [0x18],[0x11]      (0096)     mov  [_wSaveTickNum + LSB ],[_wTickCount + LSB]
                                        (0097)     
                                        (0098) 	
                                        (0099) 	;Reset wTickCount and cOverFlow to -1 for the next sample duration
046B: 50 FF    MOV   A,0xFF             (0100)     mov  A,ffh
046D: 53 0F    MOV   [0xF],A            (0101)     mov  [_cOverFlow],A
046F: 53 10    MOV   [0x10],A           (0102)     mov  [_wTickCount +  MSB],A
0471: 53 11    MOV   [0x11],A           (0103)     mov  [_wTickCount +  LSB],A
0473: 53 1B    MOV   [0x1B],A           (0104)     mov  [_bDataAvailable],A
0475: 18       POP   A                  (0105)     pop  A
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom code above this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0110) 
0476: 7E       RETI                     (0111)    reti
                                        (0112) 
                                        (0113) 
                                        (0114) ; end of file TickTimerINT.asm
FILE: lib\samplefreq.asm                (0001) ;;*****************************************************************************
0477: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SampleFreq.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:31
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter24 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SampleFreq.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  SampleFreq_EnableInt
                                        (0030) export _SampleFreq_EnableInt
                                        (0031) export  SampleFreq_DisableInt
                                        (0032) export _SampleFreq_DisableInt
                                        (0033) export  SampleFreq_Start
                                        (0034) export _SampleFreq_Start
                                        (0035) export  SampleFreq_Stop
                                        (0036) export _SampleFreq_Stop
                                        (0037) export  SampleFreq_WritePeriod
                                        (0038) export _SampleFreq_WritePeriod
                                        (0039) export  SampleFreq_WriteCompareValue
                                        (0040) export _SampleFreq_WriteCompareValue
                                        (0041) export  SampleFreq_ReadCompareValue
                                        (0042) export _SampleFreq_ReadCompareValue
                                        (0043) export  SampleFreq_ReadCounter
                                        (0044) export _SampleFreq_ReadCounter
                                        (0045) 
                                        (0046) ;-----------------------------------------------
                                        (0047) ;  Constant Definitions
                                        (0048) ;-----------------------------------------------
                                        (0049) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) .SECTION
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: SampleFreq_EnableInt
                                        (0057) ;
                                        (0058) ;  DESCRIPTION:
                                        (0059) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0060) ;     associated with this User Module. This function has no effect until and
                                        (0061) ;     unless the global interrupts are enabled (for example by using the
                                        (0062) ;     macro M8C_EnableGInt).
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) ;  ARGUMENTS:    None.
                                        (0066) ;  RETURNS:      Nothing.
                                        (0067) ;  SIDE EFFECTS: 
                                        (0068) ;    The A and X registers may be modified by this or future implementations
                                        (0069) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0070) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0071) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0072) ;    functions.
                                        (0073) ;
                                        (0074)  SampleFreq_EnableInt:
                                        (0075) _SampleFreq_EnableInt:
                                        (0076)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0077)    SampleFreq_EnableInt_M
                                        (0078)    RAM_EPILOGUE RAM_USE_CLASS_1
047A: 7F       RET                      (0079)    ret
047B: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0080) 
                                        (0081) 
                                        (0082) .ENDSECTION
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;  FUNCTION NAME: SampleFreq_DisableInt
                                        (0087) ;
                                        (0088) ;  DESCRIPTION:
                                        (0089) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0090) ;     mask bit associated with this User Module.
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;
                                        (0093) ;  ARGUMENTS:    None
                                        (0094) ;  RETURNS:      Nothing
                                        (0095) ;  SIDE EFFECTS: 
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  SampleFreq_DisableInt:
                                        (0103) _SampleFreq_DisableInt:
                                        (0104)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0105)    SampleFreq_DisableInt_M
                                        (0106)    RAM_EPILOGUE RAM_USE_CLASS_1
047E: 7F       RET                      (0107)    ret
047F: 43 33 01 OR    REG[0x33],0x1      
                                        (0108) 
                                        (0109) 
                                        (0110) .ENDSECTION
                                        (0111) 
                                        (0112) .SECTION
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: SampleFreq_Start
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Sets the start bit in the Control register of this user module.  The
                                        (0118) ;     counter will begin counting on the next input clock as soon as the
                                        (0119) ;     enable input is asserted high.
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:    None
                                        (0123) ;  RETURNS:      Nothing
                                        (0124) ;  SIDE EFFECTS: 
                                        (0125) ;    The A and X registers may be modified by this or future implementations
                                        (0126) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0127) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0128) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0129) ;    functions.
                                        (0130) ;
                                        (0131)  SampleFreq_Start:
                                        (0132) _SampleFreq_Start:
                                        (0133)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0134)    SampleFreq_Start_M
                                        (0135)    RAM_EPILOGUE RAM_USE_CLASS_1
0482: 7F       RET                      (0136)    ret
0483: 41 33 FE AND   REG[0x33],0xFE     
                                        (0137) 
                                        (0138) 
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: SampleFreq_Stop
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Disables counter operation by clearing the start bit in the Control
                                        (0147) ;     register of the LSB block.
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;
                                        (0150) ;  ARGUMENTS:    None
                                        (0151) ;  RETURNS:      Nothing
                                        (0152) ;  SIDE EFFECTS: 
                                        (0153) ;    The A and X registers may be modified by this or future implementations
                                        (0154) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0155) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0156) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0157) ;    functions.
                                        (0158) ;
                                        (0159)  SampleFreq_Stop:
                                        (0160) _SampleFreq_Stop:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    SampleFreq_Stop_M
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
0486: 7F       RET                      (0164)    ret
                                        (0165) 
                                        (0166) 
                                        (0167) .ENDSECTION
                                        (0168) 
                                        (0169) .SECTION
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;  FUNCTION NAME: SampleFreq_WritePeriod
                                        (0172) ;
                                        (0173) ;  DESCRIPTION:
                                        (0174) ;     Write the 24-bit period value into the Period register (DR1).
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;
                                        (0177) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (placed on stack)
                                        (0178) ;  RETURNS:   Nothing
                                        (0179) ;  SIDE EFFECTS:
                                        (0180) ;    If the counter user module is stopped, then this value will also be
                                        (0181) ;    latched into the Count registers (DR0).
                                        (0182) ;
                                        (0183) ;    The A and X registers may be modified by this or future implementations
                                        (0184) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0185) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0186) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0187) ;    functions.
                                        (0188) ;
                                        (0189) _SampleFreq_WritePeriod:
                                        (0190)  SampleFreq_WritePeriod:
                                        (0191)    RAM_PROLOGUE RAM_USE_CLASS_2
0487: 4F       MOV   X,SP               (0192)    mov   X, SP                                      ; Set X to point to stack frame
0488: 52 FB    MOV   A,[X-5]            (0193)    mov   A, [X-5]                                   ; load the period registers
048A: 60 39    MOV   REG[0x39],A        (0194)    mov   reg[SampleFreq_PERIOD_MSB_REG], A
048C: 52 FC    MOV   A,[X-4]            (0195)    mov   A, [X-4]
048E: 60 35    MOV   REG[0x35],A        (0196)    mov   reg[SampleFreq_PERIOD_ISB_REG], A
0490: 52 FD    MOV   A,[X-3]            (0197)    mov   A, [X-3]
0492: 60 31    MOV   REG[0x31],A        (0198)    mov   reg[SampleFreq_PERIOD_LSB_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_2
0494: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: SampleFreq_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (placed on stack)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) _SampleFreq_WriteCompareValue:
                                        (0223)  SampleFreq_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_2
0495: 4F       MOV   X,SP               (0225)    mov   X, SP                                      ; Set X to point to stack frame
0496: 52 FB    MOV   A,[X-5]            (0226)    mov   A, [X-5]                                   ; load the compare registers
0498: 60 3A    MOV   REG[0x3A],A        (0227)    mov   reg[SampleFreq_COMPARE_MSB_REG], A
049A: 52 FC    MOV   A,[X-4]            (0228)    mov   A, [X-4]
049C: 60 36    MOV   REG[0x36],A        (0229)    mov   reg[SampleFreq_COMPARE_ISB_REG], A
049E: 52 FD    MOV   A,[X-3]            (0230)    mov   A, [X-3]
04A0: 60 32    MOV   REG[0x32],A        (0231)    mov   reg[SampleFreq_COMPARE_LSB_REG], A
                                        (0232)    RAM_EPILOGUE RAM_USE_CLASS_2
04A2: 7F       RET                      (0233)    ret
                                        (0234) 
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SampleFreq_ReadCompareValue
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the Compare registers.
                                        (0244) ;-----------------------------------------------------------------------------
                                        (0245) ;
                                        (0246) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0247) ;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
                                        (0248) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS:
                                        (0251) ;    The A and X registers may be modified by this or future implementations
                                        (0252) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0253) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0254) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0255) ;    functions.
                                        (0256) ;          
                                        (0257) ;    Currently only the page pointer registers listed below are modified: 
                                        (0258) ;          IDX_PP
                                        (0259) ;     
                                        (0260) ;    The DWORD pointed to by X takes on the value read from DR2
                                        (0261) ;
                                        (0262)  SampleFreq_ReadCompareValue:
                                        (0263) _SampleFreq_ReadCompareValue:
                                        (0264)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0265)    RAM_SETPAGE_IDX A                             ; Set the variable page
04A3: 56 00 00 MOV   [X+0],0x0          (0266)    mov   [X], 0
04A6: 5D 3A    MOV   A,REG[0x3A]        (0267)    mov   A, reg[SampleFreq_COMPARE_MSB_REG]
04A8: 54 01    MOV   [X+1],A            (0268)    mov   [X+1], A
04AA: 5D 36    MOV   A,REG[0x36]        (0269)    mov   A, reg[SampleFreq_COMPARE_ISB_REG]
04AC: 54 02    MOV   [X+2],A            (0270)    mov   [X+2], A
04AE: 5D 32    MOV   A,REG[0x32]        (0271)    mov   A, reg[SampleFreq_COMPARE_LSB_REG]
04B0: 54 03    MOV   [X+3],A            (0272)    mov   [X+3], A
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_3
04B2: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) 
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: SampleFreq_ReadCounter
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0285) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0286) ;     from the Count to the Compare registers by holding the clock low in
                                        (0287) ;     the MSB PSoC block.
                                        (0288) ;-----------------------------------------------------------------------------
                                        (0289) ;
                                        (0290) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0291) ;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
                                        (0292) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0293) ;  SIDE EFFECTS:
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;          
                                        (0300) ;    Currently only the page pointer registers listed below are modified: 
                                        (0301) ;          IDX_PP
                                        (0302) ;
                                        (0303) ;    The DWORD pointed to by X takes on the value read from DR0
                                        (0304) ;    If the user module is running, it is stopped momentarily and one or more counts
                                        (0305) ;    may be missed.
                                        (0306) ;
                                        (0307) ;
                                        (0308)  SampleFreq_ReadCounter:
                                        (0309) _SampleFreq_ReadCounter:
                                        (0310)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0311)    RAM_SETPAGE_IDX A                             ; Set the variable page
04B3: 5D 33    MOV   A,REG[0x33]        (0312)    mov   A, reg[SampleFreq_CONTROL_LSB_REG]      ; Save CR0 (running or stopped state)
04B5: 08       PUSH  A                  (0313)    push  A                                          ;
04B6: 5D 3A    MOV   A,REG[0x3A]        (0314)    mov   A, reg[SampleFreq_COMPARE_MSB_REG]      ; Save the current value of
04B8: 08       PUSH  A                  (0315)    push  A                                          ;   the comparare register
04B9: 5D 36    MOV   A,REG[0x36]        (0316)    mov   A, reg[SampleFreq_COMPARE_ISB_REG]      ;   on the stack...
04BB: 08       PUSH  A                  (0317)    push  A                                          ;
04BC: 5D 32    MOV   A,REG[0x32]        (0318)    mov   A, reg[SampleFreq_COMPARE_LSB_REG]      ;
04BE: 08       PUSH  A                  (0319)    push  A                                          ;   (stack frame now 4 bytes)
04BF: 41 33 FE AND   REG[0x33],0xFE     
04C2: 71 10    OR    F,0x10             
                                        (0320)    SampleFreq_Stop_M                             ; Disable (stop) the Counter, if running
                                        (0321)    M8C_SetBank1                                     ;
04C4: 5D 39    MOV   A,REG[0x39]        (0322)    mov   A, reg[SampleFreq_INPUT_MSB_REG]        ; save the MSB clock setting on
04C6: 08       PUSH  A                  (0323)    push  A                                          ;   the stack (now 5 bytes) and
                                        (0324)                                                     ;   hold (only!) its clock low:
04C7: 62 39 00 MOV   REG[0x39],0x0      (0325)    mov   reg[SampleFreq_INPUT_MSB_REG], INPUT_REG_NULL
04CA: 70 EF    AND   F,0xEF             
                                        (0326)    M8C_SetBank0                                     ; 32-bit Result <- 24-bit Count
04CC: 56 00 00 MOV   [X+0],0x0          (0327)    mov   [X+0], 0                                   ;   upper 8 bits always zero
04CF: 5D 38    MOV   A,REG[0x38]        (0328)    mov   A, reg[SampleFreq_COUNTER_MSB_REG]      ;   DR2 <- DR0 (in the MSB block)
04D1: 5D 3A    MOV   A,REG[0x3A]        (0329)    mov   A, reg[SampleFreq_COMPARE_MSB_REG]      ;   Retrieve the Count MSB and...
04D3: 54 01    MOV   [X+1],A            (0330)    mov   [X+1], A                                   ;     update the result
04D5: 5D 34    MOV   A,REG[0x34]        (0331)    mov   A, reg[SampleFreq_COUNTER_ISB_REG]      ;   etc, for ISB
04D7: 5D 36    MOV   A,REG[0x36]        (0332)    mov   A, reg[SampleFreq_COMPARE_ISB_REG]      ;
04D9: 54 02    MOV   [X+2],A            (0333)    mov   [X+2], A                                   ;
04DB: 5D 30    MOV   A,REG[0x30]        (0334)    mov   A, reg[SampleFreq_COUNTER_LSB_REG]      ;   etc, for LSB
04DD: 5D 32    MOV   A,REG[0x32]        (0335)    mov   A, reg[SampleFreq_COMPARE_LSB_REG]      ;
04DF: 54 03    MOV   [X+3],A            (0336)    mov   [X+3], A                                   ;
04E1: 20       POP   X                  (0337)    pop   X                                          ; Hold Input reg in X temporarily
04E2: 18       POP   A                  (0338)    pop   A                                          ; Restore the 24-bit Compare
04E3: 60 32    MOV   REG[0x32],A        (0339)    mov   reg[SampleFreq_COMPARE_LSB_REG], A      ;   register...
04E5: 18       POP   A                  (0340)    pop   A                                          ;
04E6: 60 36    MOV   REG[0x36],A        (0341)    mov   reg[SampleFreq_COMPARE_ISB_REG], A      ;
04E8: 18       POP   A                  (0342)    pop   A                                          ;
04E9: 60 3A    MOV   REG[0x3A],A        (0343)    mov   reg[SampleFreq_COMPARE_MSB_REG], A      ;
04EB: 71 10    OR    F,0x10             
                                        (0344)    M8C_SetBank1                                     ; Restore the counter operation:
04ED: 5B       MOV   A,X                (0345)    mov   A, X                                       ;   Grab the clock setting...
04EE: 60 39    MOV   REG[0x39],A        (0346)    mov   reg[SampleFreq_INPUT_MSB_REG], A        ;     and restore it
04F0: 70 EF    AND   F,0xEF             
                                        (0347)    M8C_SetBank0                                     ;   Re-enable (start) the counter...
04F2: 18       POP   A                  (0348)    pop   A                                          ;     if it was running when
04F3: 60 33    MOV   REG[0x33],A        (0349)    mov   reg[SampleFreq_CONTROL_LSB_REG], A      ;     this function was first called
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_3                     ; Post function paging environment restore
04F5: 7F       RET                      (0351)    ret
                                        (0352) 
                                        (0353) .ENDSECTION
                                        (0354) 
                                        (0355) ; End of File SampleFreq.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
04F6: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
04F7: 10       PUSH  X                  (0209)     push  X
04F8: 28       ROMX                     (0210)     romx                               ; Get character from ROM
04F9: B0 04    JNZ   0x04FE             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
04FB: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
04FC: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
04FD: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
04FE: 90 3C    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0500: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0501: 18       POP   A                  (0220)     pop   A
0502: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0503: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0505: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0506: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0518: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0519: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
051A: 67       ASR   A                  (0262)     asr   A
051B: 67       ASR   A                  (0263)     asr   A
051C: 67       ASR   A                  (0264)     asr   A
051D: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
051F: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0521: 90 19    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0523: 18       POP   A                  (0268)     pop   A                            ; Restore value
0524: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0526: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0528: 90 12    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
052A: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
052B: 4B       SWAP  A,X                (0305)     swap  A,X
052C: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
052E: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
052F: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0531: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0532: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0534: A0 06    JZ    0x053B             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0536: 90 04    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0538: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0539: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
053B: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
053C: 90 5F    CALL  0x059D             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
053E: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
053F: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0540: 67       ASR   A                  (0390)     asr   A
0541: 67       ASR   A                  (0391)     asr   A
0542: 67       ASR   A                  (0392)     asr   A
0543: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0545: 90 38    CALL  0x057F             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0547: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0548: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
054A: 40       NOP                      (0397)     nop
054B: 40       NOP                      (0398)     nop
054C: 40       NOP                      (0399)     nop
054D: 90 30    CALL  0x057F             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
054F: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0550: 90 4B    CALL  0x059D             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0552: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0553: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0554: 67       ASR   A                  (0436)     asr   A
0555: 67       ASR   A                  (0437)     asr   A
0556: 67       ASR   A                  (0438)     asr   A
0557: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0559: 90 09    CALL  0x0564             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
055B: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
055C: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
055E: 40       NOP                      (0443)     nop
055F: 40       NOP                      (0444)     nop
0560: 40       NOP                      (0445)     nop
0561: 90 01    CALL  0x0564             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0563: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0564: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0565: 26 1C 80 AND   [0x1C],0x80        (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0568: 51 1C    MOV   A,[0x1C]           (0480)     mov   A,[Port_2_Data_SHADE]
056A: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
056C: 18       POP   A                  (0483)     pop   A
056D: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
056F: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0571: 2A 1C    OR    A,[0x1C]           (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0573: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0575: 53 1C    MOV   [0x1C],A           (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0577: 40       NOP                      (0489)     nop
0578: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
057A: 53 1C    MOV   [0x1C],A           (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
057C: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
057E: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
057F: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0580: 26 1C 80 AND   [0x1C],0x80        (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0583: 2E 1C 20 OR    [0x1C],0x20        (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0586: 51 1C    MOV   A,[0x1C]           (0527)     mov   A,[Port_2_Data_SHADE]
0588: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
058A: 18       POP   A                  (0530)     pop   A
058B: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
058D: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
058F: 2A 1C    OR    A,[0x1C]           (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0591: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0593: 53 1C    MOV   [0x1C],A           (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0595: 40       NOP                      (0536)     NOP
0596: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0598: 53 1C    MOV   [0x1C],A           (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
059A: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
059C: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
059D: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
059E: 26 1C 80 AND   [0x1C],0x80        (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
05A1: 51 1C    MOV   A,[0x1C]           (0574)     mov   A,[Port_2_Data_SHADE]
05A3: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
05A5: 26 1D F0 AND   [0x1D],0xF0        (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
05A8: 51 1D    MOV   A,[0x1D]           (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
05AA: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
05AC: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
05AE: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
05B0: 2E 1C 40 OR    [0x1C],0x40        (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
05B3: 51 1C    MOV   A,[0x1C]           (0584)     mov   A,[Port_2_Data_SHADE]
05B5: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
05B7: 40       NOP                      (0586)     NOP
                                        (0587) 
05B8: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
05B9: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
05BB: 2E 1C 50 OR    [0x1C],0x50        (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
05BE: 51 1C    MOV   A,[0x1C]           (0593)     mov   A,[Port_2_Data_SHADE]
05C0: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
05C2: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
05C3: 40       NOP                      (0597)     nop
05C4: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
05C6: 08       PUSH  A                  (0610)     push  A
05C7: 26 1C C0 AND   [0x1C],0xC0        (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05CA: 51 1C    MOV   A,[0x1C]           (0612)     mov   A,[Port_2_Data_SHADE]
05CC: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
05CE: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
05CF: 40       NOP                      (0616)     nop                                    ; fastest PSoC
05D0: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
05D1: 2E 1C 50 OR    [0x1C],0x50        (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
05D4: 51 1C    MOV   A,[0x1C]           (0620)     mov   A,[Port_2_Data_SHADE]
05D6: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
05D8: 40       NOP                      (0623)     nop
05D9: 40       NOP                      (0624)     nop
                                        (0625) 
05DA: 26 1C C0 AND   [0x1C],0xC0        (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
05DD: 51 1C    MOV   A,[0x1C]           (0627)     mov   A,[Port_2_Data_SHADE]
05DF: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
05E1: 18       POP   A                  (0630)     pop   A
05E2: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
05E4: A0 04    JZ    0x05E9             (0633)     jz    .UNLOCK
05E6: 79       DEC   X                  (0634)     dec   X
05E7: BF D3    JNZ   0x05BB             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
05E9: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
05EA: 2E 1D 7F OR    [0x1D],0x7F        (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
05ED: 51 1D    MOV   A,[0x1D]           (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
05EF: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
05F1: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
05F3: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
05F5: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
05F6: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
05F7: 26 1D 80 AND   [0x1D],0x80        (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
05FA: 2E 1D 7F OR    [0x1D],0x7F        (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
05FD: 26 1E 80 AND   [0x1E],0x80        (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0600: 51 1D    MOV   A,[0x1D]           (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0602: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0604: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0606: 51 1E    MOV   A,[0x1E]           (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0608: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
060A: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
060C: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
060E: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0610: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0612: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0614: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0616: 9F 4C    CALL  0x0564             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0618: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
061A: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
061C: 50 03    MOV   A,0x3              (0707)     mov   A,03h
061E: 9F 44    CALL  0x0564             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0620: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0622: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0624: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0626: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0628: 9F 3A    CALL  0x0564             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
062A: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
062C: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
062E: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0630: 9F 32    CALL  0x0564             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0632: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0634: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0636: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0638: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
063A: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
063C: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
063E: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0640: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0642: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0644: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0646: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0648: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
064A: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
064C: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
064E: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0650: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0652: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0654: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0656: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0658: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
065A: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
065C: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
065E: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0660: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0662: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0667: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0669: 10       PUSH  X                  (0791)     push  X                            ; Store COL
066A: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
066C: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
066D: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
066F: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0670: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0672: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0673: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0675: 78       DEC   A                  (0828)     dec   A
0676: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0678: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0681: 08       PUSH  A                  (0871)     push  A
0682: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0684: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0686: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0688: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
068A: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
068C: D0 06    JNC   0x0693             (0877)     jnc   .Delay50u_End
068E: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0690: 78       DEC   A                  (0880)     dec   A                              ; [4]
0691: BF FE    JNZ   0x0690             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0693: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0694: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\comparator.asm                (0001) 
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;  FILENAME:   Comparator.asm
                                        (0005) ;;  Version: 3.3, Updated on 2013/5/19 at 10:42:26
                                        (0006) ;;  Generated by PSoC Designer 5.4.2946
                                        (0007) ;;
                                        (0008) ;;  DESCRIPTION: CMPPRG User Module software implementation file.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) include "Comparator.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Comparator_Start
                                        (0030) export _Comparator_Start
                                        (0031) 
                                        (0032) export  Comparator_SetPower
                                        (0033) export _Comparator_SetPower
                                        (0034) 
                                        (0035) export  Comparator_SetRef
                                        (0036) export _Comparator_SetRef
                                        (0037) 
                                        (0038) export  Comparator_Stop
                                        (0039) export _Comparator_Stop
                                        (0040) 
                                        (0041) ;; -----------------------------------------------------------------
                                        (0042) ;;                         Register Definitions
                                        (0043) ;; -----------------------------------------------------------------
                                        (0044) ;;
                                        (0045) ;; Uses 1 Continuous Time Block configured as shown. This API depends
                                        (0046) ;; on knowing the exact personalization of CR0 and CR2 bitfields
                                        (0047) ;; for time efficiency.
                                        (0048) ;;
                                        (0049) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0050) ;;   determined by the user either through config-time parameteriza-
                                        (0051) ;;   tion or run-time manipulation.
                                        (0052) ;;
                                        (0053) ;; BIT FIELD             Mask/Val Function
                                        (0054) ;; -----------------            -----   --------------------
                                        (0055) ;; COMP_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0056) ;; COMP_CR0.GAIN_ATTEN          08/0    Gain
                                        (0057) ;; COMP_CR0.RES_SOURCE          04/0    Res source VDD
                                        (0058) ;; COMP_CR0.RES_REF             03/*    User Parameter
                                        (0059) ;;
                                        (0060) ;; COMP_CR1.A_OUT               80/0    Output bus disabled
                                        (0061) ;; COMP_CR1.COMP_EN             40/*    User Parameter (init: ENABLE)
                                        (0062) ;; COMP_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0063) ;; COMP_CR1.CT_POS_INPUT_MUX    07/*    User Parameter (Input selection)
                                        (0064) ;;
                                        (0065) ;; COMP_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0066) ;; COMP_CR2.CK_COMP             40/0    Latch transparent
                                        (0067) ;; COMP_CR2.CC_COMP             20/0    Mode Comparator (not OP-amp)
                                        (0068) ;; COMP_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0069) ;; COMP_CR2.PWR_SELECT          03/0    Power OFF at start-up
                                        (0070) 
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ;  EQUATES
                                        (0074) ;-----------------------------------------------
                                        (0075) POWERMASK:    equ 03h
                                        (0076) REFMASK:      equ f0h
                                        (0077) GAINMASK:     equ f4h
                                        (0078) EXGAIN:       equ 01h
                                        (0079) HIGHGAIN:     equ 04h
                                        (0080) HIGHGAINMASK: equ 10h
                                        (0081) 
                                        (0082) 
                                        (0083) AREA UserModules (ROM, REL)
                                        (0084) .SECTION
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;  FUNCTION NAME: Comparator_Start
                                        (0087) ;  FUNCTION NAME: Comparator_SetPower
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;    Applies power setting to the module's PSoC blocks
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High
                                        (0096) ;
                                        (0097) ;  RETURNS: none
                                        (0098) ;
                                        (0099) ;  SIDE EFFECTS:
                                        (0100) ;    The A and X registers may be modified by this or future implementations
                                        (0101) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0102) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0103) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0104) ;    functions.
                                        (0105) ;
                                        (0106)  Comparator_Start:
                                        (0107) _Comparator_Start:
                                        (0108)  Comparator_SetPower:
                                        (0109) _Comparator_SetPower:
                                        (0110) 
                                        (0111)    RAM_PROLOGUE RAM_USE_CLASS_2
0695: 21 03    AND   A,0x3              (0112)    and A, POWERMASK                             ; mask A to protect unchanged bits
0697: 4F       MOV   X,SP               (0113)    mov X, SP                                    ; define temp store location
                                        (0114) 
0698: 08       PUSH  A                  (0115)    push A                                       ; put power value in temp store
0699: 5D 73    MOV   A,REG[0x73]        (0116)    mov A, reg[Comparator_COMP_CR2]                ; read power value
069B: 21 FC    AND   A,0xFC             (0117)    and A, ~POWERMASK                            ; clear power bits in A
069D: 2B 00    OR    A,[X+0]            (0118)    or  A, [X]                                   ; combine power value with balance of reg.
069F: 60 73    MOV   REG[0x73],A        (0119)    mov reg[Comparator_COMP_CR2], A
06A1: 18       POP   A                  (0120)    pop A
                                        (0121)    RAM_EPILOGUE RAM_USE_CLASS_2
06A2: 7F       RET                      (0122)    ret
                                        (0123) .ENDSECTION
                                        (0124) 
                                        (0125) .SECTION
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;  FUNCTION NAME: Comparator_SetRef
                                        (0128) ;
                                        (0129) ;  DESCRIPTION:
                                        (0130) ;    Sets comparator threshold at specified ratio between Low Limit and Vcc
                                        (0131) ;
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:
                                        (0135) ;   A contains reference value.
                                        (0136) ;     Ref values shown are for example
                                        (0137) ;     1.000  0 0 0 0
                                        (0138) ;     0.937  0 0 0 1
                                        (0139) ;     ....
                                        (0140) ;     0.500  0 1 1 1
                                        (0141) ;     ....
                                        (0142) ;     0.062  0 0 0 0
                                        (0143) ;
                                        (0144) ;  RETURNS: none
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Comparator_SetRef:
                                        (0154) _Comparator_SetRef:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
06A3: 21 F4    AND   A,0xF4             (0157)    and  A, GAINMASK                             ; mask A to protect unchanged bits
06A5: 4F       MOV   X,SP               (0158)    mov  X, SP                                   ; define temp store location
                                        (0159) ;
06A6: 08       PUSH  A                  (0160)    push A                                       ; put reference value in temp store
06A7: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[Comparator_COMP_CR0]              ; read old CR0 value
06A9: 21 0F    AND   A,0xF              (0162)    and  A, ~REFMASK                             ; clear reference bits in A
06AB: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                            ; See if High Gain bit is set
06AE: B0 0A    JNZ   0x06B9             (0164)    jnz  .SETHIGHGAIN
06B0: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[Comparator_COMP_CR3],~EXGAIN         ; Clear High Gain bit.
06B3: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                  ; combine gain value with balance of reg.
06B5: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[Comparator_COMP_CR0], A              ; move complete value back to register
06B7: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
06B8: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
06B9: 27 00 10 AND   [X+0],0x10         (0173)    and  [X],HIGHGAINMASK                        ; Make sure we have a valid high gain
06BC: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                  ; combine ref value with balance of reg.
06BE: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[Comparator_COMP_CR0], A       ; move complete value back to register
06C0: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[Comparator_COMP_CR3], EXGAIN         ; Set High Gain bit.
06C3: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
06C4: 7F       RET                      (0179)     ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: Comparator_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Removes power from analog block.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: none
                                        (0192) ;
                                        (0193) ;  RETURNS: none
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  Comparator_Stop:
                                        (0203) _Comparator_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
06C5: 41 73 FC AND   REG[0x73],0xFC     (0206)    and reg[Comparator_COMP_CR2], FCh
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
06C8: 7F       RET                      (0208)     ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) ; End of File Comparator.asm
FILE: .\freqcode.asm                    (0001) ;*******************************************************************************
                                        (0002) ; AN 2283 - PSoC 1 Measuring Frequency; 
                                        (0003) ; Project - Frequency Measurement with PLL;
                                        (0004) ;
                                        (0005) ; AN Description:
                                        (0006) ;
                                        (0007) ; AN2283 discusses various frequency measurement methods using PSoC 1.
                                        (0008) ;
                                        (0009) ; File Name: 'freqcode.asm'
                                        (0010) ;
                                        (0011) ; Description: Contains assembly functions for starting the frequency
                                        (0012) ; 				measurement counter.
                                        (0013) ;
                                        (0014) ; Author: 				DWV
                                        (0015) ; Project Version: 		1.1
                                        (0016) ;
                                        (0017) ; Project Version Author:
                                        (0018) ; v1.0 - 					DWV
                                        (0019) ; v1.1 - 					MSUR
                                        (0020) ;
                                        (0021) ;
                                        (0022) ;
                                        (0023) ;*******************************************************************************
                                        (0024) ; Copyright (2014), Cypress Semiconductor Corporation. All Rights Reserved.
                                        (0025) ;*******************************************************************************
                                        (0026) ; This software is owned by Cypress Semiconductor Corporation (Cypress)
                                        (0027) ; and is protected by and subject to worldwide patent protection (United
                                        (0028) ; States and foreign), United States copyright laws and international treaty
                                        (0029) ; provisions. Cypress hereby grants to licensee a personal, non-exclusive,
                                        (0030) ; non-transferable license to copy, use, modify, create derivative works of,
                                        (0031) ; and compile the Cypress Source Code and derivative works for the sole
                                        (0032) ; purpose of creating custom software in support of licensee product to be
                                        (0033) ; used only in conjunction with a Cypress integrated circuit as specified in
                                        (0034) ; the applicable agreement. Any reproduction, modification, translation,
                                        (0035) ; compilation, or representation of this software except as specified above 
                                        (0036) ; is prohibited without the express written permission of Cypress.
                                        (0037) ;
                                        (0038) ; Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
                                        (0039) ; REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
                                        (0040) ; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
                                        (0041) ; Cypress reserves the right to make changes without further notice to the 
                                        (0042) ; materials described herein. Cypress does not assume any liability arising out 
                                        (0043) ; of the application or use of any product or circuit described herein. Cypress 
                                        (0044) ; does not authorize its products for use as critical components in life-support 
                                        (0045) ; systems where a malfunction or failure may reasonably be expected to result in 
                                        (0046) ; significant injury to the user. The inclusion of Cypress' product in a life-
                                        (0047) ; support systems application implies that the manufacturer assumes all risk of 
                                        (0048) ; such use and in doing so indemnifies Cypress against all charges. 
                                        (0049) ;
                                        (0050) ; Use of this Software may be limited by and subject to the applicable Cypress
                                        (0051) ; software license agreement. 
                                        (0052) ;******************************************************************************/
                                        (0053) 
                                        (0054) export _StartFreq
                                        (0055) include "m8c.inc"
                                        (0056) include "memory.inc"
                                        (0057) include "PSoCAPI.inc"
                                        (0058) _StartFreq:
                                        (0059)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)    RAM_SETPAGE_CUR >_bDataAvailable
06C9: 55 0F FF MOV   [0xF],0xFF         (0061)       mov [_cOverFlow],ffh                  ;set tick count to -1
06CC: 55 10 FF MOV   [0x10],0xFF        (0062)       mov [_wTickCount + 0],ffh             
06CF: 55 11 FF MOV   [0x11],0xFF        (0063)       mov [_wTickCount + 1],ffh
06D2: 55 1B 00 MOV   [0x1B],0x0         (0064)       mov [_bDataAvailable],0                   ;clear bDataReady0
06D5: 41 DB FD AND   REG[0xDB],0xFD     (0065)       and reg[INT_CLR1],~TickTimer_INT_MASK ;clear timer int
06D8: 43 E1 02 OR    REG[0xE1],0x2      
06DB: 43 23 01 OR    REG[0x23],0x1      
                                        (0066)       TickTimer_EnableInt_M                 ;enable timer int
                                        (0067)       TickTimer_Start_M                     ;start timer 
06DE: 41 DA FD AND   REG[0xDA],0xFD     (0068)       and  reg[INT_CLR0],~02h               ;clear comparator int
06E1: 43 E0 02 OR    REG[0xE0],0x2      (0069)       or   reg[INT_MSK0],02h                ;enable comparator int    
                                        (0070)       RAM_EPILOGUE RAM_USE_CLASS_4 
06E4: 7F       RET                      (0071)    ret
FILE: C:\Users\msur\Desktop\APPLIC~1\AN2283\AN2283\AN2283\FREQUE~2\FREQUE~1\FREQUE~1\main.c
(0001) /*******************************************************************************
(0002) * AN 2283 - PSoC 1 Measuring Frequency; 
(0003) * Project - Frequency Measurement with PLL;
(0004) *
(0005) * AN Description:
(0006) *
(0007) * AN2283 discusses various frequency measurement methods using PSoC 1.
(0008) *
(0009) * File Name: 'main.c'
(0010) *
(0011) * Description: C main file.
(0012) *
(0013) * Author: 				DWV
(0014) * Project Version: 		1.1
(0015) *
(0016) * Project Version Author:
(0017) * v1.0 - 					DWV
(0018) * v1.1 - 					MSUR
(0019) *
(0020) * Project Details:
(0021) *
(0022) * Overview:
(0023) *	The project implements the hybrid frequency measurement described in the AN.
(0024) *	F_sample = TickTimer's period = VC3 Freq/65536 = 1 sps in the example
(0025) *	F_clock = VC3 itself = 65.21739 kHz
(0026) *	Input to the frequency measurement timer comes from P0[7]
(0027) *	A sample signal (SampleFreq) is generated by the device itself and routed to P0[5]
(0028) *	Sample signal is 1.2346 KHz
(0029) *
(0030) * Kits Used -
(0031) *						CY3210 - PSoCEval1
(0032) *						CY3217 - MiniProg1
(0033) *						CY8C29466-24PXI - PSoC Device
(0034) *
(0035) * Pin Details:
(0036) *
(0037) *	Frequency Input 			 		-	P0.1
(0038) *	PWM Output (Test/Sample frequency)  -	P0.0
(0039) *	Debug LED output			 		-   P1.0
(0040) *	LCD Display		 			 		-	P2.0 to P2.6
(0041) *
(0042) *
(0043) ********************************************************************************
(0044) * Copyright (2014), Cypress Semiconductor Corporation. All Rights Reserved.
(0045) ********************************************************************************
(0046) * This software is owned by Cypress Semiconductor Corporation (Cypress)
(0047) * and is protected by and subject to worldwide patent protection (United
(0048) * States and foreign), United States copyright laws and international treaty
(0049) * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
(0050) * non-transferable license to copy, use, modify, create derivative works of,
(0051) * and compile the Cypress Source Code and derivative works for the sole
(0052) * purpose of creating custom software in support of licensee product to be
(0053) * used only in conjunction with a Cypress integrated circuit as specified in
(0054) * the applicable agreement. Any reproduction, modification, translation,
(0055) * compilation, or representation of this software except as specified above 
(0056) * is prohibited without the express written permission of Cypress.
(0057) *
(0058) * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
(0059) * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
(0060) * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
(0061) * Cypress reserves the right to make changes without further notice to the 
(0062) * materials described herein. Cypress does not assume any liability arising out 
(0063) * of the application or use of any product or circuit described herein. Cypress 
(0064) * does not authorize its products for use as critical components in life-support 
(0065) * systems where a malfunction or failure may reasonably be expected to result in 
(0066) * significant injury to the user. The inclusion of Cypress' product in a life-
(0067) * support systems application implies that the manufacturer assumes all risk of 
(0068) * such use and in doing so indemnifies Cypress against all charges. 
(0069) *
(0070) * Use of this Software may be limited by and subject to the applicable Cypress
(0071) * software license agreement. 
(0072) *******************************************************************************/
(0073) 
(0074) #include <m8c.h> 
(0075) #include "PSoCAPI.h" 
(0076) #include "FreqCode.h"
(0077) #include <stdlib.h>
(0078) 
(0079) /* IMO frequency in Hz*/
(0080) #define SYSCLOCK     23986176.0
(0081) 
(0082) /* F_clock or VC3 frequency */
(0083) #define FCLOCK       (SYSCLOCK / 368.0)
(0084) 
(0085) /* TickTimer's period */
(0086) #define PERIOD       65536.0
(0087) 
(0088) /* F_sample */
(0089) #define FSAMPLE      (FCLOCK / PERIOD)
(0090) 
(0091) /* Imported variables from other files */
(0092) extern unsigned char bDataAvailable;
(0093) extern unsigned int  wSaveCountNum;
(0094) extern signed char   cSaveOverFlow;
(0095) extern unsigned int  wSaveTickNum;
(0096) 
(0097) /* Function prototypes */
(0098) void DisplayValue(void);
(0099) 
(0100) /* Global varaibles used in the project */
(0101) float fFreqValue = 0.0;
(0102) char *pString;
(0103) char *pTemp;
(0104) int iTemp;
(0105) 
(0106) 
(0107) /******************************************************************************
(0108) * Function Name: main
(0109) *******************************************************************************
(0110) *
(0111) * Summary:
(0112) *  main() performs following functions:
(0113) *  1: Enables comparator and the sample frequency for frequency measurement
(0114) *  2: Initializes the timer block for measurements
(0115) *  3: Waits till the sample time is expired
(0116) *  4: Calculates the frequency and updates the measured value on the LCD
(0117) *
(0118) * Parameters:
(0119) *  None.
(0120) *
(0121) * Return:
(0122) *  None.
(0123) *
(0124) ******************************************************************************/
(0125) void main(void)
(0126) {  
(0127)    /* Start the comparator */
(0128)    Comparator_Start(Comparator_HIGHPOWER);
_main:
    06E5: 10       PUSH  X
    06E6: 50 03    MOV   A,0x3
    06E8: 7C 06 95 LCALL Comparator_SetPower|Comparator_Start|_Comparator_Start|_Comparator_SetPower
(0129)    
(0130)    /* Start the sample/test frequency output */
(0131)    SampleFreq_Start();
    06EB: 7C 04 7F LCALL _SampleFreq_Start
    06EE: 20       POP   X
(0132)    
(0133)    /* Enable Input Pullup on SignalInput pin (P0[7] in the design */
(0134)    SignalInput_Data_ADDR |= SignalInput_MASK; 
    06EF: 43 00 80 OR    REG[0x0],0x80
(0135)    
(0136)    /* Start the LCD */
(0137)    LCD_Start(); 
    06F2: 10       PUSH  X
    06F3: 7C 05 F7 LCALL LCD_Start|LCD_Init|_LCD_Init|_LCD_Start
    06F6: 20       POP   X
(0138)    
(0139)    /* Enable globa interrupts */
(0140)    M8C_EnableGInt;
    06F7: 71 01    OR    F,0x1
(0141)    
(0142)    /* Start TickTimer, Initialize Variables */
(0143)    StartFreq(); 
    06F9: 10       PUSH  X
    06FA: 7C 06 C9 LCALL __UserModules_end|__text_start|_StartFreq
    06FD: 20       POP   X
    06FE: 83 C0    JMP   0x0ABF
(0144)    
(0145)    while(1)
(0146)    {     	
(0147)       	/* Wait till sample period is complete - bDataAvailable is set */
(0148) 		while(bDataAvailable == 0x00);
    0700: 3C 1B 00 CMP   [0x1B],0x0
    0703: AF FC    JZ    0x0700
(0149) 		
(0150) 		/* Clear the bDataAvailable flag */
(0151) 		bDataAvailable = 0x00;  
    0705: 55 1B 00 MOV   [0x1B],0x0
(0152) 		
(0153) 		/* Turn ON the LED */
(0154)       	LEDOut_Data_ADDR |= LEDOut_MASK; 
    0708: 43 04 80 OR    REG[0x4],0x80
(0155) 		
(0156) 		/* if overflow count is negative, the tick handler ISR was never executed (as it is initialized with -1), set freq val = 0  */
(0157)       	if( cSaveOverFlow < 0 )
    070B: 51 16    MOV   A,[0x16]
    070D: 39 00    CMP   A,0x0
    070F: 6D       RRC   A
    0710: 31 00    XOR   A,0x0
    0712: 32 16    XOR   A,[0x16]
    0714: 6A       RLC   A
    0715: D0 0F    JNC   0x0725
(0158) 	  	{
(0159) 	  		fFreqValue = 0.0;
    0717: 55 00 00 MOV   [fFreqValue],0x0
    071A: 55 01 00 MOV   [fFreqValue+1],0x0
    071D: 55 02 00 MOV   [fFreqValue+2],0x0
    0720: 55 03 00 MOV   [fFreqValue+3],0x0
(0160) 		}
    0723: 83 96    JMP   0x0ABA
(0161) 		/* Enter this if there were overflows in the tick count (up to 127 overflows) */
(0162)       	else if ( cSaveOverFlow > 0)
    0725: 50 00    MOV   A,0x0
    0727: 3A 16    CMP   A,[0x16]
    0729: 6D       RRC   A
    072A: 32 16    XOR   A,[0x16]
    072C: 31 00    XOR   A,0x0
    072E: 6A       RLC   A
    072F: D1 A2    JNC   0x08D2
(0163) 		{
(0164)          	/* Take overflow count into frequency calculation */
(0165) 			/* Freq = F_sample * ((OverFlow_Count<<16) + Signal_Tick_Counts) */
(0166) 			fFreqValue  = (float)(cSaveOverFlow);
    0731: 5F 0D 16 MOV   [__r1],[0x16]
    0734: 55 0E 00 MOV   [__r0],0x0
    0737: 47 0D 80 TST   [__r1],0x80
    073A: A0 04    JZ    0x073F
    073C: 55 0E FF MOV   [__r0],0xFF
    073F: 5F 03 0D MOV   [fFreqValue+3],[__r1]
    0742: 5F 02 0E MOV   [fFreqValue+2],[__r0]
    0745: 47 02 80 TST   [fFreqValue+2],0x80
    0748: A0 09    JZ    0x0752
    074A: 55 01 FF MOV   [fFreqValue+1],0xFF
    074D: 55 00 FF MOV   [fFreqValue],0xFF
    0750: 80 07    JMP   0x0758
    0752: 55 01 00 MOV   [fFreqValue+1],0x0
    0755: 55 00 00 MOV   [fFreqValue],0x0
    0758: 51 00    MOV   A,[fFreqValue]
    075A: 08       PUSH  A
    075B: 51 01    MOV   A,[fFreqValue+1]
    075D: 08       PUSH  A
    075E: 51 02    MOV   A,[fFreqValue+2]
    0760: 08       PUSH  A
    0761: 51 03    MOV   A,[fFreqValue+3]
    0763: 08       PUSH  A
    0764: 7C 13 29 LCALL 0x1329
    0767: 18       POP   A
    0768: 53 03    MOV   [fFreqValue+3],A
    076A: 18       POP   A
    076B: 53 02    MOV   [fFreqValue+2],A
    076D: 18       POP   A
    076E: 53 01    MOV   [fFreqValue+1],A
    0770: 18       POP   A
    0771: 53 00    MOV   [fFreqValue],A
(0167)          	fFreqValue *= 65536.0;
    0773: 51 00    MOV   A,[fFreqValue]
    0775: 08       PUSH  A
    0776: 51 01    MOV   A,[fFreqValue+1]
    0778: 08       PUSH  A
    0779: 51 02    MOV   A,[fFreqValue+2]
    077B: 08       PUSH  A
    077C: 51 03    MOV   A,[fFreqValue+3]
    077E: 08       PUSH  A
    077F: 50 47    MOV   A,0x47
    0781: 08       PUSH  A
    0782: 50 80    MOV   A,0x80
    0784: 08       PUSH  A
    0785: 50 00    MOV   A,0x0
    0787: 08       PUSH  A
    0788: 08       PUSH  A
    0789: 7C 11 76 LCALL 0x1176
    078C: 18       POP   A
    078D: 53 03    MOV   [fFreqValue+3],A
    078F: 18       POP   A
    0790: 53 02    MOV   [fFreqValue+2],A
    0792: 18       POP   A
    0793: 53 01    MOV   [fFreqValue+1],A
    0795: 18       POP   A
    0796: 53 00    MOV   [fFreqValue],A
    0798: 38 FC    ADD   SP,0xFC
(0168)          	fFreqValue += (float) wSaveTickNum;
    079A: 51 18    MOV   A,[0x18]
    079C: 21 01    AND   A,0x1
    079E: 53 0B    MOV   [__r3],A
    07A0: 55 0C 00 MOV   [__r2],0x0
    07A3: 47 0C 80 TST   [__r2],0x80
    07A6: A0 09    JZ    0x07B0
    07A8: 55 0D FF MOV   [__r1],0xFF
    07AB: 55 0E FF MOV   [__r0],0xFF
    07AE: 80 07    JMP   0x07B6
    07B0: 55 0D 00 MOV   [__r1],0x0
    07B3: 55 0E 00 MOV   [__r0],0x0
    07B6: 51 0E    MOV   A,[__r0]
    07B8: 08       PUSH  A
    07B9: 51 0D    MOV   A,[__r1]
    07BB: 08       PUSH  A
    07BC: 51 0C    MOV   A,[__r2]
    07BE: 08       PUSH  A
    07BF: 51 0B    MOV   A,[__r3]
    07C1: 08       PUSH  A
    07C2: 7C 13 29 LCALL 0x1329
    07C5: 18       POP   A
    07C6: 53 0B    MOV   [__r3],A
    07C8: 18       POP   A
    07C9: 53 0C    MOV   [__r2],A
    07CB: 18       POP   A
    07CC: 53 0D    MOV   [__r1],A
    07CE: 18       POP   A
    07CF: 53 0E    MOV   [__r0],A
    07D1: 5F 09 18 MOV   [__r5],[0x18]
    07D4: 5F 0A 17 MOV   [__r4],[0x17]
    07D7: 70 FB    AND   F,0xFB
    07D9: 6E 0A    RRC   [__r4]
    07DB: 6E 09    RRC   [__r5]
    07DD: 5F 07 09 MOV   [__r7],[__r5]
    07E0: 5F 08 0A MOV   [__r6],[__r4]
    07E3: 47 08 80 TST   [__r6],0x80
    07E6: A0 09    JZ    0x07F0
    07E8: 55 09 FF MOV   [__r5],0xFF
    07EB: 55 0A FF MOV   [__r4],0xFF
    07EE: 80 07    JMP   0x07F6
    07F0: 55 09 00 MOV   [__r5],0x0
    07F3: 55 0A 00 MOV   [__r4],0x0
    07F6: 51 0A    MOV   A,[__r4]
    07F8: 08       PUSH  A
    07F9: 51 09    MOV   A,[__r5]
    07FB: 08       PUSH  A
    07FC: 51 08    MOV   A,[__r6]
    07FE: 08       PUSH  A
    07FF: 51 07    MOV   A,[__r7]
    0801: 08       PUSH  A
    0802: 7C 13 29 LCALL 0x1329
    0805: 18       POP   A
    0806: 53 07    MOV   [__r7],A
    0808: 18       POP   A
    0809: 53 08    MOV   [__r6],A
    080B: 18       POP   A
    080C: 53 09    MOV   [__r5],A
    080E: 18       POP   A
    080F: 08       PUSH  A
    0810: 51 09    MOV   A,[__r5]
    0812: 08       PUSH  A
    0813: 51 08    MOV   A,[__r6]
    0815: 08       PUSH  A
    0816: 51 07    MOV   A,[__r7]
    0818: 08       PUSH  A
    0819: 50 40    MOV   A,0x40
    081B: 08       PUSH  A
    081C: 50 00    MOV   A,0x0
    081E: 08       PUSH  A
    081F: 08       PUSH  A
    0820: 08       PUSH  A
    0821: 7C 11 76 LCALL 0x1176
    0824: 18       POP   A
    0825: 53 07    MOV   [__r7],A
    0827: 18       POP   A
    0828: 53 08    MOV   [__r6],A
    082A: 18       POP   A
    082B: 53 09    MOV   [__r5],A
    082D: 18       POP   A
    082E: 53 0A    MOV   [__r4],A
    0830: 38 FC    ADD   SP,0xFC
    0832: 51 0E    MOV   A,[__r0]
    0834: 08       PUSH  A
    0835: 51 0D    MOV   A,[__r1]
    0837: 08       PUSH  A
    0838: 51 0C    MOV   A,[__r2]
    083A: 08       PUSH  A
    083B: 51 0B    MOV   A,[__r3]
    083D: 08       PUSH  A
    083E: 51 0A    MOV   A,[__r4]
    0840: 08       PUSH  A
    0841: 51 09    MOV   A,[__r5]
    0843: 08       PUSH  A
    0844: 51 08    MOV   A,[__r6]
    0846: 08       PUSH  A
    0847: 51 07    MOV   A,[__r7]
    0849: 08       PUSH  A
    084A: 7C 0F 51 LCALL 0x0F51
    084D: 18       POP   A
    084E: 53 0B    MOV   [__r3],A
    0850: 18       POP   A
    0851: 53 0C    MOV   [__r2],A
    0853: 18       POP   A
    0854: 53 0D    MOV   [__r1],A
    0856: 18       POP   A
    0857: 38 FC    ADD   SP,0xFC
    0859: 08       PUSH  A
    085A: 51 0D    MOV   A,[__r1]
    085C: 08       PUSH  A
    085D: 51 0C    MOV   A,[__r2]
    085F: 08       PUSH  A
    0860: 51 0B    MOV   A,[__r3]
    0862: 08       PUSH  A
    0863: 51 00    MOV   A,[fFreqValue]
    0865: 08       PUSH  A
    0866: 51 01    MOV   A,[fFreqValue+1]
    0868: 08       PUSH  A
    0869: 51 02    MOV   A,[fFreqValue+2]
    086B: 08       PUSH  A
    086C: 51 03    MOV   A,[fFreqValue+3]
    086E: 08       PUSH  A
    086F: 7C 0F 51 LCALL 0x0F51
    0872: 18       POP   A
    0873: 53 03    MOV   [fFreqValue+3],A
    0875: 18       POP   A
    0876: 53 02    MOV   [fFreqValue+2],A
    0878: 18       POP   A
    0879: 53 01    MOV   [fFreqValue+1],A
    087B: 18       POP   A
    087C: 53 00    MOV   [fFreqValue],A
    087E: 38 FC    ADD   SP,0xFC
(0169)          	fFreqValue += 1.0;
    0880: 50 3F    MOV   A,0x3F
    0882: 08       PUSH  A
    0883: 50 80    MOV   A,0x80
    0885: 08       PUSH  A
    0886: 50 00    MOV   A,0x0
    0888: 08       PUSH  A
    0889: 08       PUSH  A
    088A: 51 00    MOV   A,[fFreqValue]
    088C: 08       PUSH  A
    088D: 51 01    MOV   A,[fFreqValue+1]
    088F: 08       PUSH  A
    0890: 51 02    MOV   A,[fFreqValue+2]
    0892: 08       PUSH  A
    0893: 51 03    MOV   A,[fFreqValue+3]
    0895: 08       PUSH  A
    0896: 7C 0F 51 LCALL 0x0F51
    0899: 18       POP   A
    089A: 53 03    MOV   [fFreqValue+3],A
    089C: 18       POP   A
    089D: 53 02    MOV   [fFreqValue+2],A
    089F: 18       POP   A
    08A0: 53 01    MOV   [fFreqValue+1],A
    08A2: 18       POP   A
    08A3: 53 00    MOV   [fFreqValue],A
    08A5: 38 FC    ADD   SP,0xFC
(0170)          	fFreqValue *= FSAMPLE;             
    08A7: 51 00    MOV   A,[fFreqValue]
    08A9: 08       PUSH  A
    08AA: 51 01    MOV   A,[fFreqValue+1]
    08AC: 08       PUSH  A
    08AD: 51 02    MOV   A,[fFreqValue+2]
    08AF: 08       PUSH  A
    08B0: 51 03    MOV   A,[fFreqValue+3]
    08B2: 08       PUSH  A
    08B3: 50 3F    MOV   A,0x3F
    08B5: 08       PUSH  A
    08B6: 50 7E    MOV   A,0x7E
    08B8: 08       PUSH  A
    08B9: 50 9B    MOV   A,0x9B
    08BB: 08       PUSH  A
    08BC: 50 D3    MOV   A,0xD3
    08BE: 08       PUSH  A
    08BF: 7C 11 76 LCALL 0x1176
    08C2: 18       POP   A
    08C3: 53 03    MOV   [fFreqValue+3],A
    08C5: 18       POP   A
    08C6: 53 02    MOV   [fFreqValue+2],A
    08C8: 18       POP   A
    08C9: 53 01    MOV   [fFreqValue+1],A
    08CB: 18       POP   A
    08CC: 53 00    MOV   [fFreqValue],A
    08CE: 38 FC    ADD   SP,0xFC
(0171)     	} 
    08D0: 81 E9    JMP   0x0ABA
(0172) 	    else
(0173) 		{		  	
(0174) 	        /* Control comes here, if there is no overflow */
(0175) 			/* If the captured counts are 0, the freq = 0 or under range */
(0176) 			if( wSaveTickNum == 0)
    08D2: 3C 17 00 CMP   [0x17],0x0
    08D5: B0 14    JNZ   0x08EA
    08D7: 3C 18 00 CMP   [0x18],0x0
    08DA: B0 0F    JNZ   0x08EA
(0177) 			{
(0178) 			 	fFreqValue = 0.0;
    08DC: 55 00 00 MOV   [fFreqValue],0x0
    08DF: 55 01 00 MOV   [fFreqValue+1],0x0
    08E2: 55 02 00 MOV   [fFreqValue+2],0x0
    08E5: 55 03 00 MOV   [fFreqValue+3],0x0
(0179) 			}
    08E8: 81 D1    JMP   0x0ABA
(0180) 	        /* else Freq = F_clock * Captured_Timer_Counts / Signal_Tick_Counts */
(0181) 			else
(0182) 			{
(0183) 	            fFreqValue  = (float) wSaveTickNum;
    08EA: 51 18    MOV   A,[0x18]
    08EC: 21 01    AND   A,0x1
    08EE: 53 0B    MOV   [__r3],A
    08F0: 55 0C 00 MOV   [__r2],0x0
    08F3: 47 0C 80 TST   [__r2],0x80
    08F6: A0 09    JZ    0x0900
    08F8: 55 0D FF MOV   [__r1],0xFF
    08FB: 55 0E FF MOV   [__r0],0xFF
    08FE: 80 07    JMP   0x0906
    0900: 55 0D 00 MOV   [__r1],0x0
    0903: 55 0E 00 MOV   [__r0],0x0
    0906: 51 0E    MOV   A,[__r0]
    0908: 08       PUSH  A
    0909: 51 0D    MOV   A,[__r1]
    090B: 08       PUSH  A
    090C: 51 0C    MOV   A,[__r2]
    090E: 08       PUSH  A
    090F: 51 0B    MOV   A,[__r3]
    0911: 08       PUSH  A
    0912: 7C 13 29 LCALL 0x1329
    0915: 18       POP   A
    0916: 53 0B    MOV   [__r3],A
    0918: 18       POP   A
    0919: 53 0C    MOV   [__r2],A
    091B: 18       POP   A
    091C: 53 0D    MOV   [__r1],A
    091E: 18       POP   A
    091F: 53 0E    MOV   [__r0],A
    0921: 5F 09 18 MOV   [__r5],[0x18]
    0924: 5F 0A 17 MOV   [__r4],[0x17]
    0927: 70 FB    AND   F,0xFB
    0929: 6E 0A    RRC   [__r4]
    092B: 6E 09    RRC   [__r5]
    092D: 5F 07 09 MOV   [__r7],[__r5]
    0930: 5F 08 0A MOV   [__r6],[__r4]
    0933: 47 08 80 TST   [__r6],0x80
    0936: A0 09    JZ    0x0940
    0938: 55 09 FF MOV   [__r5],0xFF
    093B: 55 0A FF MOV   [__r4],0xFF
    093E: 80 07    JMP   0x0946
    0940: 55 09 00 MOV   [__r5],0x0
    0943: 55 0A 00 MOV   [__r4],0x0
    0946: 51 0A    MOV   A,[__r4]
    0948: 08       PUSH  A
    0949: 51 09    MOV   A,[__r5]
    094B: 08       PUSH  A
    094C: 51 08    MOV   A,[__r6]
    094E: 08       PUSH  A
    094F: 51 07    MOV   A,[__r7]
    0951: 08       PUSH  A
    0952: 7C 13 29 LCALL 0x1329
    0955: 18       POP   A
    0956: 53 07    MOV   [__r7],A
    0958: 18       POP   A
    0959: 53 08    MOV   [__r6],A
    095B: 18       POP   A
    095C: 53 09    MOV   [__r5],A
    095E: 18       POP   A
    095F: 08       PUSH  A
    0960: 51 09    MOV   A,[__r5]
    0962: 08       PUSH  A
    0963: 51 08    MOV   A,[__r6]
    0965: 08       PUSH  A
    0966: 51 07    MOV   A,[__r7]
    0968: 08       PUSH  A
    0969: 50 40    MOV   A,0x40
    096B: 08       PUSH  A
    096C: 50 00    MOV   A,0x0
    096E: 08       PUSH  A
    096F: 08       PUSH  A
    0970: 08       PUSH  A
    0971: 7C 11 76 LCALL 0x1176
    0974: 18       POP   A
    0975: 53 07    MOV   [__r7],A
    0977: 18       POP   A
    0978: 53 08    MOV   [__r6],A
    097A: 18       POP   A
    097B: 53 09    MOV   [__r5],A
    097D: 18       POP   A
    097E: 53 0A    MOV   [__r4],A
    0980: 38 FC    ADD   SP,0xFC
    0982: 51 0E    MOV   A,[__r0]
    0984: 08       PUSH  A
    0985: 51 0D    MOV   A,[__r1]
    0987: 08       PUSH  A
    0988: 51 0C    MOV   A,[__r2]
    098A: 08       PUSH  A
    098B: 51 0B    MOV   A,[__r3]
    098D: 08       PUSH  A
    098E: 51 0A    MOV   A,[__r4]
    0990: 08       PUSH  A
    0991: 51 09    MOV   A,[__r5]
    0993: 08       PUSH  A
    0994: 51 08    MOV   A,[__r6]
    0996: 08       PUSH  A
    0997: 51 07    MOV   A,[__r7]
    0999: 08       PUSH  A
    099A: 7C 0F 51 LCALL 0x0F51
    099D: 18       POP   A
    099E: 53 03    MOV   [fFreqValue+3],A
    09A0: 18       POP   A
    09A1: 53 02    MOV   [fFreqValue+2],A
    09A3: 18       POP   A
    09A4: 53 01    MOV   [fFreqValue+1],A
    09A6: 18       POP   A
    09A7: 53 00    MOV   [fFreqValue],A
    09A9: 38 FC    ADD   SP,0xFC
(0184) 	            fFreqValue *= FCLOCK;
    09AB: 51 00    MOV   A,[fFreqValue]
    09AD: 08       PUSH  A
    09AE: 51 01    MOV   A,[fFreqValue+1]
    09B0: 08       PUSH  A
    09B1: 51 02    MOV   A,[fFreqValue+2]
    09B3: 08       PUSH  A
    09B4: 51 03    MOV   A,[fFreqValue+3]
    09B6: 08       PUSH  A
    09B7: 50 47    MOV   A,0x47
    09B9: 08       PUSH  A
    09BA: 50 7E    MOV   A,0x7E
    09BC: 08       PUSH  A
    09BD: 50 9B    MOV   A,0x9B
    09BF: 08       PUSH  A
    09C0: 50 D3    MOV   A,0xD3
    09C2: 08       PUSH  A
    09C3: 7C 11 76 LCALL 0x1176
    09C6: 18       POP   A
    09C7: 53 03    MOV   [fFreqValue+3],A
    09C9: 18       POP   A
    09CA: 53 02    MOV   [fFreqValue+2],A
    09CC: 18       POP   A
    09CD: 53 01    MOV   [fFreqValue+1],A
    09CF: 18       POP   A
    09D0: 53 00    MOV   [fFreqValue],A
    09D2: 38 FC    ADD   SP,0xFC
(0185) 	            fFreqValue /= (float) wSaveCountNum;
    09D4: 51 1A    MOV   A,[0x1A]
    09D6: 21 01    AND   A,0x1
    09D8: 53 0B    MOV   [__r3],A
    09DA: 55 0C 00 MOV   [__r2],0x0
    09DD: 47 0C 80 TST   [__r2],0x80
    09E0: A0 09    JZ    0x09EA
    09E2: 55 0D FF MOV   [__r1],0xFF
    09E5: 55 0E FF MOV   [__r0],0xFF
    09E8: 80 07    JMP   0x09F0
    09EA: 55 0D 00 MOV   [__r1],0x0
    09ED: 55 0E 00 MOV   [__r0],0x0
    09F0: 51 0E    MOV   A,[__r0]
    09F2: 08       PUSH  A
    09F3: 51 0D    MOV   A,[__r1]
    09F5: 08       PUSH  A
    09F6: 51 0C    MOV   A,[__r2]
    09F8: 08       PUSH  A
    09F9: 51 0B    MOV   A,[__r3]
    09FB: 08       PUSH  A
    09FC: 7C 13 29 LCALL 0x1329
    09FF: 18       POP   A
    0A00: 53 0B    MOV   [__r3],A
    0A02: 18       POP   A
    0A03: 53 0C    MOV   [__r2],A
    0A05: 18       POP   A
    0A06: 53 0D    MOV   [__r1],A
    0A08: 18       POP   A
    0A09: 53 0E    MOV   [__r0],A
    0A0B: 5F 09 1A MOV   [__r5],[0x1A]
    0A0E: 5F 0A 19 MOV   [__r4],[0x19]
    0A11: 70 FB    AND   F,0xFB
    0A13: 6E 0A    RRC   [__r4]
    0A15: 6E 09    RRC   [__r5]
    0A17: 5F 07 09 MOV   [__r7],[__r5]
    0A1A: 5F 08 0A MOV   [__r6],[__r4]
    0A1D: 47 08 80 TST   [__r6],0x80
    0A20: A0 09    JZ    0x0A2A
    0A22: 55 09 FF MOV   [__r5],0xFF
    0A25: 55 0A FF MOV   [__r4],0xFF
    0A28: 80 07    JMP   0x0A30
    0A2A: 55 09 00 MOV   [__r5],0x0
    0A2D: 55 0A 00 MOV   [__r4],0x0
    0A30: 51 0A    MOV   A,[__r4]
    0A32: 08       PUSH  A
    0A33: 51 09    MOV   A,[__r5]
    0A35: 08       PUSH  A
    0A36: 51 08    MOV   A,[__r6]
    0A38: 08       PUSH  A
    0A39: 51 07    MOV   A,[__r7]
    0A3B: 08       PUSH  A
    0A3C: 7C 13 29 LCALL 0x1329
    0A3F: 18       POP   A
    0A40: 53 07    MOV   [__r7],A
    0A42: 18       POP   A
    0A43: 53 08    MOV   [__r6],A
    0A45: 18       POP   A
    0A46: 53 09    MOV   [__r5],A
    0A48: 18       POP   A
    0A49: 08       PUSH  A
    0A4A: 51 09    MOV   A,[__r5]
    0A4C: 08       PUSH  A
    0A4D: 51 08    MOV   A,[__r6]
    0A4F: 08       PUSH  A
    0A50: 51 07    MOV   A,[__r7]
    0A52: 08       PUSH  A
    0A53: 50 40    MOV   A,0x40
    0A55: 08       PUSH  A
    0A56: 50 00    MOV   A,0x0
    0A58: 08       PUSH  A
    0A59: 08       PUSH  A
    0A5A: 08       PUSH  A
    0A5B: 7C 11 76 LCALL 0x1176
    0A5E: 18       POP   A
    0A5F: 53 07    MOV   [__r7],A
    0A61: 18       POP   A
    0A62: 53 08    MOV   [__r6],A
    0A64: 18       POP   A
    0A65: 53 09    MOV   [__r5],A
    0A67: 18       POP   A
    0A68: 53 0A    MOV   [__r4],A
    0A6A: 38 FC    ADD   SP,0xFC
    0A6C: 51 0E    MOV   A,[__r0]
    0A6E: 08       PUSH  A
    0A6F: 51 0D    MOV   A,[__r1]
    0A71: 08       PUSH  A
    0A72: 51 0C    MOV   A,[__r2]
    0A74: 08       PUSH  A
    0A75: 51 0B    MOV   A,[__r3]
    0A77: 08       PUSH  A
    0A78: 51 0A    MOV   A,[__r4]
    0A7A: 08       PUSH  A
    0A7B: 51 09    MOV   A,[__r5]
    0A7D: 08       PUSH  A
    0A7E: 51 08    MOV   A,[__r6]
    0A80: 08       PUSH  A
    0A81: 51 07    MOV   A,[__r7]
    0A83: 08       PUSH  A
    0A84: 7C 0F 51 LCALL 0x0F51
    0A87: 18       POP   A
    0A88: 53 0B    MOV   [__r3],A
    0A8A: 18       POP   A
    0A8B: 53 0C    MOV   [__r2],A
    0A8D: 18       POP   A
    0A8E: 53 0D    MOV   [__r1],A
    0A90: 18       POP   A
    0A91: 38 FC    ADD   SP,0xFC
    0A93: 08       PUSH  A
    0A94: 51 0D    MOV   A,[__r1]
    0A96: 08       PUSH  A
    0A97: 51 0C    MOV   A,[__r2]
    0A99: 08       PUSH  A
    0A9A: 51 0B    MOV   A,[__r3]
    0A9C: 08       PUSH  A
    0A9D: 51 00    MOV   A,[fFreqValue]
    0A9F: 08       PUSH  A
    0AA0: 51 01    MOV   A,[fFreqValue+1]
    0AA2: 08       PUSH  A
    0AA3: 51 02    MOV   A,[fFreqValue+2]
    0AA5: 08       PUSH  A
    0AA6: 51 03    MOV   A,[fFreqValue+3]
    0AA8: 08       PUSH  A
    0AA9: 7C 10 99 LCALL 0x1099
    0AAC: 18       POP   A
    0AAD: 53 03    MOV   [fFreqValue+3],A
    0AAF: 18       POP   A
    0AB0: 53 02    MOV   [fFreqValue+2],A
    0AB2: 18       POP   A
    0AB3: 53 01    MOV   [fFreqValue+1],A
    0AB5: 18       POP   A
    0AB6: 53 00    MOV   [fFreqValue],A
    0AB8: 38 FC    ADD   SP,0xFC
(0186) 	        }
(0187) 	    }
(0188) 		
(0189) 		/* Display the measured frequency value */
(0190)       	DisplayValue();
    0ABA: 90 07    CALL  _DisplayValue
(0191) 		
(0192) 		/* turn OFF LED to indicate measurement completion */
(0193)       	LEDOut_Data_ADDR &= ~LEDOut_MASK; //LED Off
    0ABC: 41 04 7F AND   REG[0x4],0x7F
(0194)    }
    0ABF: 8C 40    JMP   0x0700
    0AC1: 8F FF    JMP   0x0AC1
(0195) }
(0196) 
(0197) /******************************************************************************
(0198) * Function Name: DisplayValue
(0199) *******************************************************************************
(0200) *
(0201) * Summary:
(0202) *  Displays the measured frequency in kHz in the LCD along with Signal Tick counts
(0203) *	and Captured Timer counts
(0204) *
(0205) * Parameters:
(0206) *  None.
(0207) *
(0208) * Return:
(0209) *  None.
(0210) *
(0211) ******************************************************************************/
(0212) void DisplayValue(void)
(0213) {
(0214)    LCD_Position(1,0);
_DisplayValue:
    0AC3: 10       PUSH  X
    0AC4: 57 00    MOV   X,0x0
    0AC6: 50 01    MOV   A,0x1
    0AC8: 7C 06 67 LCALL _LCD_Position
(0215)    LCD_PrHexByte( cSaveOverFlow );
    0ACB: 51 16    MOV   A,[0x16]
    0ACD: 7C 05 18 LCALL _LCD_PrHexByte
(0216)    LCD_PrHexInt(wSaveTickNum);     
    0AD0: 58 17    MOV   X,[0x17]
    0AD2: 51 18    MOV   A,[0x18]
    0AD4: 7C 05 2B LCALL _LCD_PrHexInt
(0217)    LCD_Position(1,10);   
    0AD7: 57 0A    MOV   X,0xA
    0AD9: 50 01    MOV   A,0x1
    0ADB: 7C 06 67 LCALL _LCD_Position
(0218)    LCD_PrHexInt(wSaveCountNum);   
    0ADE: 58 19    MOV   X,[0x19]
    0AE0: 51 1A    MOV   A,[0x1A]
    0AE2: 7C 05 2B LCALL _LCD_PrHexInt
(0219)    
(0220)    LCD_Position(0,0);
    0AE5: 50 00    MOV   A,0x0
    0AE7: 57 00    MOV   X,0x0
    0AE9: 7C 06 67 LCALL _LCD_Position
    0AEC: 20       POP   X
(0221)    if(fFreqValue == 0.0)
    0AED: 50 00    MOV   A,0x0
    0AEF: 08       PUSH  A
    0AF0: 08       PUSH  A
    0AF1: 08       PUSH  A
    0AF2: 08       PUSH  A
    0AF3: 51 00    MOV   A,[fFreqValue]
    0AF5: 08       PUSH  A
    0AF6: 51 01    MOV   A,[fFreqValue+1]
    0AF8: 08       PUSH  A
    0AF9: 51 02    MOV   A,[fFreqValue+2]
    0AFB: 08       PUSH  A
    0AFC: 51 03    MOV   A,[fFreqValue+3]
    0AFE: 08       PUSH  A
    0AFF: 7C 10 4B LCALL 0x104B
    0B02: 38 F8    ADD   SP,0xF8
    0B04: 39 00    CMP   A,0x0
    0B06: B0 0F    JNZ   0x0B16
(0222)    {
(0223)       LCD_PrCString("Underrange");
    0B08: 10       PUSH  X
    0B09: 50 02    MOV   A,0x2
    0B0B: 08       PUSH  A
    0B0C: 50 15    MOV   A,0x15
    0B0E: 5C       MOV   X,A
    0B0F: 18       POP   A
    0B10: 7C 04 F6 LCALL _LCD_PrCString
    0B13: 20       POP   X
(0224)    }
    0B14: 83 5D    JMP   0x0E72
(0225)    else if(fFreqValue < 0.0)
    0B16: 50 00    MOV   A,0x0
    0B18: 08       PUSH  A
    0B19: 08       PUSH  A
    0B1A: 08       PUSH  A
    0B1B: 08       PUSH  A
    0B1C: 51 00    MOV   A,[fFreqValue]
    0B1E: 08       PUSH  A
    0B1F: 51 01    MOV   A,[fFreqValue+1]
    0B21: 08       PUSH  A
    0B22: 51 02    MOV   A,[fFreqValue+2]
    0B24: 08       PUSH  A
    0B25: 51 03    MOV   A,[fFreqValue+3]
    0B27: 08       PUSH  A
    0B28: 7C 10 4B LCALL 0x104B
    0B2B: 38 F8    ADD   SP,0xF8
    0B2D: 39 00    CMP   A,0x0
    0B2F: A0 13    JZ    0x0B43
    0B31: 39 01    CMP   A,0x1
    0B33: A0 0F    JZ    0x0B43
(0226)    {
(0227)       LCD_PrCString("Overrange ");   
    0B35: 10       PUSH  X
    0B36: 50 02    MOV   A,0x2
    0B38: 08       PUSH  A
    0B39: 50 0A    MOV   A,0xA
    0B3B: 5C       MOV   X,A
    0B3C: 18       POP   A
    0B3D: 7C 04 F6 LCALL _LCD_PrCString
    0B40: 20       POP   X
(0228)    }
    0B41: 83 30    JMP   0x0E72
(0229)    else
(0230)    {
(0231)       if(fFreqValue <10.0 )         fFreqValue +=  0.00005;
    0B43: 50 41    MOV   A,0x41
    0B45: 08       PUSH  A
    0B46: 50 20    MOV   A,0x20
    0B48: 08       PUSH  A
    0B49: 50 00    MOV   A,0x0
    0B4B: 08       PUSH  A
    0B4C: 08       PUSH  A
    0B4D: 51 00    MOV   A,[fFreqValue]
    0B4F: 08       PUSH  A
    0B50: 51 01    MOV   A,[fFreqValue+1]
    0B52: 08       PUSH  A
    0B53: 51 02    MOV   A,[fFreqValue+2]
    0B55: 08       PUSH  A
    0B56: 51 03    MOV   A,[fFreqValue+3]
    0B58: 08       PUSH  A
    0B59: 7C 10 4B LCALL 0x104B
    0B5C: 38 F8    ADD   SP,0xF8
    0B5E: 39 00    CMP   A,0x0
    0B60: A0 30    JZ    0x0B91
    0B62: 39 01    CMP   A,0x1
    0B64: A0 2C    JZ    0x0B91
    0B66: 50 38    MOV   A,0x38
    0B68: 08       PUSH  A
    0B69: 50 51    MOV   A,0x51
    0B6B: 08       PUSH  A
    0B6C: 50 B7    MOV   A,0xB7
    0B6E: 08       PUSH  A
    0B6F: 50 17    MOV   A,0x17
    0B71: 08       PUSH  A
    0B72: 51 00    MOV   A,[fFreqValue]
    0B74: 08       PUSH  A
    0B75: 51 01    MOV   A,[fFreqValue+1]
    0B77: 08       PUSH  A
    0B78: 51 02    MOV   A,[fFreqValue+2]
    0B7A: 08       PUSH  A
    0B7B: 51 03    MOV   A,[fFreqValue+3]
    0B7D: 08       PUSH  A
    0B7E: 7C 0F 51 LCALL 0x0F51
    0B81: 18       POP   A
    0B82: 53 03    MOV   [fFreqValue+3],A
    0B84: 18       POP   A
    0B85: 53 02    MOV   [fFreqValue+2],A
    0B87: 18       POP   A
    0B88: 53 01    MOV   [fFreqValue+1],A
    0B8A: 18       POP   A
    0B8B: 53 00    MOV   [fFreqValue],A
    0B8D: 38 FC    ADD   SP,0xFC
    0B8F: 81 AE    JMP   0x0D3E
(0232)       else if(fFreqValue <100.0)    fFreqValue +=  0.0005;
    0B91: 50 42    MOV   A,0x42
    0B93: 08       PUSH  A
    0B94: 50 C8    MOV   A,0xC8
    0B96: 08       PUSH  A
    0B97: 50 00    MOV   A,0x0
    0B99: 08       PUSH  A
    0B9A: 08       PUSH  A
    0B9B: 51 00    MOV   A,[fFreqValue]
    0B9D: 08       PUSH  A
    0B9E: 51 01    MOV   A,[fFreqValue+1]
    0BA0: 08       PUSH  A
    0BA1: 51 02    MOV   A,[fFreqValue+2]
    0BA3: 08       PUSH  A
    0BA4: 51 03    MOV   A,[fFreqValue+3]
    0BA6: 08       PUSH  A
    0BA7: 7C 10 4B LCALL 0x104B
    0BAA: 38 F8    ADD   SP,0xF8
    0BAC: 39 00    CMP   A,0x0
    0BAE: A0 30    JZ    0x0BDF
    0BB0: 39 01    CMP   A,0x1
    0BB2: A0 2C    JZ    0x0BDF
    0BB4: 50 3A    MOV   A,0x3A
    0BB6: 08       PUSH  A
    0BB7: 50 03    MOV   A,0x3
    0BB9: 08       PUSH  A
    0BBA: 50 12    MOV   A,0x12
    0BBC: 08       PUSH  A
    0BBD: 50 6F    MOV   A,0x6F
    0BBF: 08       PUSH  A
    0BC0: 51 00    MOV   A,[fFreqValue]
    0BC2: 08       PUSH  A
    0BC3: 51 01    MOV   A,[fFreqValue+1]
    0BC5: 08       PUSH  A
    0BC6: 51 02    MOV   A,[fFreqValue+2]
    0BC8: 08       PUSH  A
    0BC9: 51 03    MOV   A,[fFreqValue+3]
    0BCB: 08       PUSH  A
    0BCC: 7C 0F 51 LCALL 0x0F51
    0BCF: 18       POP   A
    0BD0: 53 03    MOV   [fFreqValue+3],A
    0BD2: 18       POP   A
    0BD3: 53 02    MOV   [fFreqValue+2],A
    0BD5: 18       POP   A
    0BD6: 53 01    MOV   [fFreqValue+1],A
    0BD8: 18       POP   A
    0BD9: 53 00    MOV   [fFreqValue],A
    0BDB: 38 FC    ADD   SP,0xFC
    0BDD: 81 60    JMP   0x0D3E
(0233)       else if(fFreqValue <1000.0)   fFreqValue +=  0.005;
    0BDF: 50 44    MOV   A,0x44
    0BE1: 08       PUSH  A
    0BE2: 50 7A    MOV   A,0x7A
    0BE4: 08       PUSH  A
    0BE5: 50 00    MOV   A,0x0
    0BE7: 08       PUSH  A
    0BE8: 08       PUSH  A
    0BE9: 51 00    MOV   A,[fFreqValue]
    0BEB: 08       PUSH  A
    0BEC: 51 01    MOV   A,[fFreqValue+1]
    0BEE: 08       PUSH  A
    0BEF: 51 02    MOV   A,[fFreqValue+2]
    0BF1: 08       PUSH  A
    0BF2: 51 03    MOV   A,[fFreqValue+3]
    0BF4: 08       PUSH  A
    0BF5: 7C 10 4B LCALL 0x104B
    0BF8: 38 F8    ADD   SP,0xF8
    0BFA: 39 00    CMP   A,0x0
    0BFC: A0 30    JZ    0x0C2D
    0BFE: 39 01    CMP   A,0x1
    0C00: A0 2C    JZ    0x0C2D
    0C02: 50 3B    MOV   A,0x3B
    0C04: 08       PUSH  A
    0C05: 50 A3    MOV   A,0xA3
    0C07: 08       PUSH  A
    0C08: 50 D7    MOV   A,0xD7
    0C0A: 08       PUSH  A
    0C0B: 50 0A    MOV   A,0xA
    0C0D: 08       PUSH  A
    0C0E: 51 00    MOV   A,[fFreqValue]
    0C10: 08       PUSH  A
    0C11: 51 01    MOV   A,[fFreqValue+1]
    0C13: 08       PUSH  A
    0C14: 51 02    MOV   A,[fFreqValue+2]
    0C16: 08       PUSH  A
    0C17: 51 03    MOV   A,[fFreqValue+3]
    0C19: 08       PUSH  A
    0C1A: 7C 0F 51 LCALL 0x0F51
    0C1D: 18       POP   A
    0C1E: 53 03    MOV   [fFreqValue+3],A
    0C20: 18       POP   A
    0C21: 53 02    MOV   [fFreqValue+2],A
    0C23: 18       POP   A
    0C24: 53 01    MOV   [fFreqValue+1],A
    0C26: 18       POP   A
    0C27: 53 00    MOV   [fFreqValue],A
    0C29: 38 FC    ADD   SP,0xFC
    0C2B: 81 12    JMP   0x0D3E
(0234)       else if(fFreqValue <10000.0)  fFreqValue +=  0.05;
    0C2D: 50 46    MOV   A,0x46
    0C2F: 08       PUSH  A
    0C30: 50 1C    MOV   A,0x1C
    0C32: 08       PUSH  A
    0C33: 50 40    MOV   A,0x40
    0C35: 08       PUSH  A
    0C36: 50 00    MOV   A,0x0
    0C38: 08       PUSH  A
    0C39: 51 00    MOV   A,[fFreqValue]
    0C3B: 08       PUSH  A
    0C3C: 51 01    MOV   A,[fFreqValue+1]
    0C3E: 08       PUSH  A
    0C3F: 51 02    MOV   A,[fFreqValue+2]
    0C41: 08       PUSH  A
    0C42: 51 03    MOV   A,[fFreqValue+3]
    0C44: 08       PUSH  A
    0C45: 7C 10 4B LCALL 0x104B
    0C48: 38 F8    ADD   SP,0xF8
    0C4A: 39 00    CMP   A,0x0
    0C4C: A0 30    JZ    0x0C7D
    0C4E: 39 01    CMP   A,0x1
    0C50: A0 2C    JZ    0x0C7D
    0C52: 50 3D    MOV   A,0x3D
    0C54: 08       PUSH  A
    0C55: 50 4C    MOV   A,0x4C
    0C57: 08       PUSH  A
    0C58: 50 CC    MOV   A,0xCC
    0C5A: 08       PUSH  A
    0C5B: 50 CD    MOV   A,0xCD
    0C5D: 08       PUSH  A
    0C5E: 51 00    MOV   A,[fFreqValue]
    0C60: 08       PUSH  A
    0C61: 51 01    MOV   A,[fFreqValue+1]
    0C63: 08       PUSH  A
    0C64: 51 02    MOV   A,[fFreqValue+2]
    0C66: 08       PUSH  A
    0C67: 51 03    MOV   A,[fFreqValue+3]
    0C69: 08       PUSH  A
    0C6A: 7C 0F 51 LCALL 0x0F51
    0C6D: 18       POP   A
    0C6E: 53 03    MOV   [fFreqValue+3],A
    0C70: 18       POP   A
    0C71: 53 02    MOV   [fFreqValue+2],A
    0C73: 18       POP   A
    0C74: 53 01    MOV   [fFreqValue+1],A
    0C76: 18       POP   A
    0C77: 53 00    MOV   [fFreqValue],A
    0C79: 38 FC    ADD   SP,0xFC
    0C7B: 80 C2    JMP   0x0D3E
(0235)       else if(fFreqValue <100000.0) fFreqValue +=  0.5;
    0C7D: 50 47    MOV   A,0x47
    0C7F: 08       PUSH  A
    0C80: 50 C3    MOV   A,0xC3
    0C82: 08       PUSH  A
    0C83: 50 50    MOV   A,0x50
    0C85: 08       PUSH  A
    0C86: 50 00    MOV   A,0x0
    0C88: 08       PUSH  A
    0C89: 51 00    MOV   A,[fFreqValue]
    0C8B: 08       PUSH  A
    0C8C: 51 01    MOV   A,[fFreqValue+1]
    0C8E: 08       PUSH  A
    0C8F: 51 02    MOV   A,[fFreqValue+2]
    0C91: 08       PUSH  A
    0C92: 51 03    MOV   A,[fFreqValue+3]
    0C94: 08       PUSH  A
    0C95: 7C 10 4B LCALL 0x104B
    0C98: 38 F8    ADD   SP,0xF8
    0C9A: 39 00    CMP   A,0x0
    0C9C: A0 2C    JZ    0x0CC9
    0C9E: 39 01    CMP   A,0x1
    0CA0: A0 28    JZ    0x0CC9
    0CA2: 50 3F    MOV   A,0x3F
    0CA4: 08       PUSH  A
    0CA5: 50 00    MOV   A,0x0
    0CA7: 08       PUSH  A
    0CA8: 08       PUSH  A
    0CA9: 08       PUSH  A
    0CAA: 51 00    MOV   A,[fFreqValue]
    0CAC: 08       PUSH  A
    0CAD: 51 01    MOV   A,[fFreqValue+1]
    0CAF: 08       PUSH  A
    0CB0: 51 02    MOV   A,[fFreqValue+2]
    0CB2: 08       PUSH  A
    0CB3: 51 03    MOV   A,[fFreqValue+3]
    0CB5: 08       PUSH  A
    0CB6: 7C 0F 51 LCALL 0x0F51
    0CB9: 18       POP   A
    0CBA: 53 03    MOV   [fFreqValue+3],A
    0CBC: 18       POP   A
    0CBD: 53 02    MOV   [fFreqValue+2],A
    0CBF: 18       POP   A
    0CC0: 53 01    MOV   [fFreqValue+1],A
    0CC2: 18       POP   A
    0CC3: 53 00    MOV   [fFreqValue],A
    0CC5: 38 FC    ADD   SP,0xFC
    0CC7: 80 76    JMP   0x0D3E
(0236)       else if(fFreqValue <1000000.0)fFreqValue +=  5.0;      
    0CC9: 50 49    MOV   A,0x49
    0CCB: 08       PUSH  A
    0CCC: 50 74    MOV   A,0x74
    0CCE: 08       PUSH  A
    0CCF: 50 24    MOV   A,0x24
    0CD1: 08       PUSH  A
    0CD2: 50 00    MOV   A,0x0
    0CD4: 08       PUSH  A
    0CD5: 51 00    MOV   A,[fFreqValue]
    0CD7: 08       PUSH  A
    0CD8: 51 01    MOV   A,[fFreqValue+1]
    0CDA: 08       PUSH  A
    0CDB: 51 02    MOV   A,[fFreqValue+2]
    0CDD: 08       PUSH  A
    0CDE: 51 03    MOV   A,[fFreqValue+3]
    0CE0: 08       PUSH  A
    0CE1: 7C 10 4B LCALL 0x104B
    0CE4: 38 F8    ADD   SP,0xF8
    0CE6: 39 00    CMP   A,0x0
    0CE8: A0 2E    JZ    0x0D17
    0CEA: 39 01    CMP   A,0x1
    0CEC: A0 2A    JZ    0x0D17
    0CEE: 50 40    MOV   A,0x40
    0CF0: 08       PUSH  A
    0CF1: 50 A0    MOV   A,0xA0
    0CF3: 08       PUSH  A
    0CF4: 50 00    MOV   A,0x0
    0CF6: 08       PUSH  A
    0CF7: 08       PUSH  A
    0CF8: 51 00    MOV   A,[fFreqValue]
    0CFA: 08       PUSH  A
    0CFB: 51 01    MOV   A,[fFreqValue+1]
    0CFD: 08       PUSH  A
    0CFE: 51 02    MOV   A,[fFreqValue+2]
    0D00: 08       PUSH  A
    0D01: 51 03    MOV   A,[fFreqValue+3]
    0D03: 08       PUSH  A
    0D04: 7C 0F 51 LCALL 0x0F51
    0D07: 18       POP   A
    0D08: 53 03    MOV   [fFreqValue+3],A
    0D0A: 18       POP   A
    0D0B: 53 02    MOV   [fFreqValue+2],A
    0D0D: 18       POP   A
    0D0E: 53 01    MOV   [fFreqValue+1],A
    0D10: 18       POP   A
    0D11: 53 00    MOV   [fFreqValue],A
    0D13: 38 FC    ADD   SP,0xFC
    0D15: 80 28    JMP   0x0D3E
(0237)       else                          fFreqValue += 50.0;
    0D17: 50 42    MOV   A,0x42
    0D19: 08       PUSH  A
    0D1A: 50 48    MOV   A,0x48
    0D1C: 08       PUSH  A
    0D1D: 50 00    MOV   A,0x0
    0D1F: 08       PUSH  A
    0D20: 08       PUSH  A
    0D21: 51 00    MOV   A,[fFreqValue]
    0D23: 08       PUSH  A
    0D24: 51 01    MOV   A,[fFreqValue+1]
    0D26: 08       PUSH  A
    0D27: 51 02    MOV   A,[fFreqValue+2]
    0D29: 08       PUSH  A
    0D2A: 51 03    MOV   A,[fFreqValue+3]
    0D2C: 08       PUSH  A
    0D2D: 7C 0F 51 LCALL 0x0F51
    0D30: 18       POP   A
    0D31: 53 03    MOV   [fFreqValue+3],A
    0D33: 18       POP   A
    0D34: 53 02    MOV   [fFreqValue+2],A
    0D36: 18       POP   A
    0D37: 53 01    MOV   [fFreqValue+1],A
    0D39: 18       POP   A
    0D3A: 53 00    MOV   [fFreqValue],A
    0D3C: 38 FC    ADD   SP,0xFC
(0238) 	  
(0239)       if(fFreqValue < 1000.0)
    0D3E: 50 44    MOV   A,0x44
    0D40: 08       PUSH  A
    0D41: 50 7A    MOV   A,0x7A
    0D43: 08       PUSH  A
    0D44: 50 00    MOV   A,0x0
    0D46: 08       PUSH  A
    0D47: 08       PUSH  A
    0D48: 51 00    MOV   A,[fFreqValue]
    0D4A: 08       PUSH  A
    0D4B: 51 01    MOV   A,[fFreqValue+1]
    0D4D: 08       PUSH  A
    0D4E: 51 02    MOV   A,[fFreqValue+2]
    0D50: 08       PUSH  A
    0D51: 51 03    MOV   A,[fFreqValue+3]
    0D53: 08       PUSH  A
    0D54: 7C 10 4B LCALL 0x104B
    0D57: 38 F8    ADD   SP,0xF8
    0D59: 39 00    CMP   A,0x0
    0D5B: A0 7B    JZ    0x0DD7
    0D5D: 39 01    CMP   A,0x1
    0D5F: A0 77    JZ    0x0DD7
(0240) 	  {
(0241)          pString = ftoa(fFreqValue, &iTemp);
    0D61: 50 00    MOV   A,0x0
    0D63: 08       PUSH  A
    0D64: 50 1F    MOV   A,0x1F
    0D66: 08       PUSH  A
    0D67: 51 00    MOV   A,[fFreqValue]
    0D69: 08       PUSH  A
    0D6A: 51 01    MOV   A,[fFreqValue+1]
    0D6C: 08       PUSH  A
    0D6D: 51 02    MOV   A,[fFreqValue+2]
    0D6F: 08       PUSH  A
    0D70: 51 03    MOV   A,[fFreqValue+3]
    0D72: 08       PUSH  A
    0D73: 7C 15 90 LCALL _ftoa
    0D76: 38 FA    ADD   SP,0xFA
    0D78: 5F 24 0D MOV   [pString+1],[__r1]
    0D7B: 5F 23 0E MOV   [pString],[__r0]
(0242)          for(pTemp = pString; *pTemp != 0x00; pTemp++); //find the end
    0D7E: 5F 0E 24 MOV   [__r0],[pString+1]
    0D81: 5F 22 0E MOV   [pTemp+1],[__r0]
    0D84: 80 06    JMP   0x0D8B
    0D86: 76 22    INC   [pTemp+1]
    0D88: 0E 21 00 ADC   [pTemp],0x0
    0D8B: 5F 0D 22 MOV   [__r1],[pTemp+1]
    0D8E: 3E 0D    MVI   A,[__r1]
    0D90: BF F5    JNZ   0x0D86
    0D92: 80 17    JMP   0x0DAA
(0243)          while((pTemp - pString) <6)*pTemp++ = '0';//right fill with "0"s 
    0D94: 5F 0D 22 MOV   [__r1],[pTemp+1]
    0D97: 5F 0E 21 MOV   [__r0],[pTemp]
    0D9A: 51 0D    MOV   A,[__r1]
    0D9C: 01 01    ADD   A,0x1
    0D9E: 53 22    MOV   [pTemp+1],A
    0DA0: 51 0E    MOV   A,[__r0]
    0DA2: 09 00    ADC   A,0x0
    0DA4: 53 21    MOV   [pTemp],A
    0DA6: 50 30    MOV   A,0x30
    0DA8: 3F 0D    MVI   [__r1],A
    0DAA: 5F 0E 24 MOV   [__r0],[pString+1]
    0DAD: 51 22    MOV   A,[pTemp+1]
    0DAF: 12 0E    SUB   A,[__r0]
    0DB1: 39 06    CMP   A,0x6
    0DB3: CF E0    JC    0x0D94
(0244)          *(pString + 6)=0x00;
    0DB5: 51 24    MOV   A,[pString+1]
    0DB7: 01 06    ADD   A,0x6
    0DB9: 53 0D    MOV   [__r1],A
    0DBB: 50 00    MOV   A,0x0
    0DBD: 3F 0D    MVI   [__r1],A
(0245)          LCD_PrString(pString);
    0DBF: 10       PUSH  X
    0DC0: 51 23    MOV   A,[pString]
    0DC2: 08       PUSH  A
    0DC3: 51 24    MOV   A,[pString+1]
    0DC5: 5C       MOV   X,A
    0DC6: 18       POP   A
    0DC7: 7C 05 32 LCALL _LCD_PrString
(0246)          LCD_PrCString(" Hz ");  
    0DCA: 50 02    MOV   A,0x2
    0DCC: 08       PUSH  A
    0DCD: 50 05    MOV   A,0x5
    0DCF: 5C       MOV   X,A
    0DD0: 18       POP   A
    0DD1: 7C 04 F6 LCALL _LCD_PrCString
    0DD4: 20       POP   X
(0247)       }
    0DD5: 80 9C    JMP   0x0E72
(0248)       else
(0249) 	  {
(0250)          fFreqValue /= 1000.0;
    0DD7: 50 44    MOV   A,0x44
    0DD9: 08       PUSH  A
    0DDA: 50 7A    MOV   A,0x7A
    0DDC: 08       PUSH  A
    0DDD: 50 00    MOV   A,0x0
    0DDF: 08       PUSH  A
    0DE0: 08       PUSH  A
    0DE1: 51 00    MOV   A,[fFreqValue]
    0DE3: 08       PUSH  A
    0DE4: 51 01    MOV   A,[fFreqValue+1]
    0DE6: 08       PUSH  A
    0DE7: 51 02    MOV   A,[fFreqValue+2]
    0DE9: 08       PUSH  A
    0DEA: 51 03    MOV   A,[fFreqValue+3]
    0DEC: 08       PUSH  A
    0DED: 7C 10 99 LCALL 0x1099
    0DF0: 18       POP   A
    0DF1: 53 03    MOV   [fFreqValue+3],A
    0DF3: 18       POP   A
    0DF4: 53 02    MOV   [fFreqValue+2],A
    0DF6: 18       POP   A
    0DF7: 53 01    MOV   [fFreqValue+1],A
    0DF9: 18       POP   A
    0DFA: 53 00    MOV   [fFreqValue],A
    0DFC: 38 FC    ADD   SP,0xFC
(0251)          pString = ftoa(fFreqValue, &iTemp);
    0DFE: 50 00    MOV   A,0x0
    0E00: 08       PUSH  A
    0E01: 50 1F    MOV   A,0x1F
    0E03: 08       PUSH  A
    0E04: 51 00    MOV   A,[fFreqValue]
    0E06: 08       PUSH  A
    0E07: 51 01    MOV   A,[fFreqValue+1]
    0E09: 08       PUSH  A
    0E0A: 51 02    MOV   A,[fFreqValue+2]
    0E0C: 08       PUSH  A
    0E0D: 51 03    MOV   A,[fFreqValue+3]
    0E0F: 08       PUSH  A
    0E10: 7C 15 90 LCALL _ftoa
    0E13: 38 FA    ADD   SP,0xFA
    0E15: 5F 24 0D MOV   [pString+1],[__r1]
    0E18: 5F 23 0E MOV   [pString],[__r0]
(0252)          for(pTemp = pString; *pTemp != 0x00; pTemp++); //find the end
    0E1B: 5F 0E 24 MOV   [__r0],[pString+1]
    0E1E: 5F 22 0E MOV   [pTemp+1],[__r0]
    0E21: 80 06    JMP   0x0E28
    0E23: 76 22    INC   [pTemp+1]
    0E25: 0E 21 00 ADC   [pTemp],0x0
    0E28: 5F 0D 22 MOV   [__r1],[pTemp+1]
    0E2B: 3E 0D    MVI   A,[__r1]
    0E2D: BF F5    JNZ   0x0E23
    0E2F: 80 17    JMP   0x0E47
(0253)          while((pTemp - pString) <6)*pTemp++ = '0';//right fill with "0"s 
    0E31: 5F 0D 22 MOV   [__r1],[pTemp+1]
    0E34: 5F 0E 21 MOV   [__r0],[pTemp]
    0E37: 51 0D    MOV   A,[__r1]
    0E39: 01 01    ADD   A,0x1
    0E3B: 53 22    MOV   [pTemp+1],A
    0E3D: 51 0E    MOV   A,[__r0]
    0E3F: 09 00    ADC   A,0x0
    0E41: 53 21    MOV   [pTemp],A
    0E43: 50 30    MOV   A,0x30
    0E45: 3F 0D    MVI   [__r1],A
    0E47: 5F 0E 24 MOV   [__r0],[pString+1]
    0E4A: 51 22    MOV   A,[pTemp+1]
    0E4C: 12 0E    SUB   A,[__r0]
    0E4E: 39 06    CMP   A,0x6
    0E50: CF E0    JC    0x0E31
(0254)          *(pString + 6)=0x00;
    0E52: 51 24    MOV   A,[pString+1]
    0E54: 01 06    ADD   A,0x6
    0E56: 53 0D    MOV   [__r1],A
    0E58: 50 00    MOV   A,0x0
    0E5A: 3F 0D    MVI   [__r1],A
(0255)          LCD_PrString(pString);
    0E5C: 10       PUSH  X
    0E5D: 51 23    MOV   A,[pString]
    0E5F: 08       PUSH  A
    0E60: 51 24    MOV   A,[pString+1]
    0E62: 5C       MOV   X,A
    0E63: 18       POP   A
    0E64: 7C 05 32 LCALL _LCD_PrString
(0256)          LCD_PrCString("kHz ");            
    0E67: 50 02    MOV   A,0x2
    0E69: 08       PUSH  A
    0E6A: 50 00    MOV   A,0x0
    0E6C: 5C       MOV   X,A
    0E6D: 18       POP   A
    0E6E: 7C 04 F6 LCALL _LCD_PrCString
    0E71: 20       POP   X
(0257)       }                   
(0258)    }
    0E72: 7F       RET   
FILE: .\tickhander.asm                  (0001) ;*******************************************************************************
                                        (0002) ; AN 2283 - PSoC 1 Measuring Frequency; 
                                        (0003) ; Project - Frequency Measurement with PLL;
                                        (0004) ;
                                        (0005) ; AN Description:
                                        (0006) ;
                                        (0007) ; AN2283 discusses various frequency measurement methods using PSoC 1.
                                        (0008) ;
                                        (0009) ; File Name: 'tickhander.asm'
                                        (0010) ;
                                        (0011) ; Description: Contains assembly function for the tick handler ISR - 
                                        (0012) ;				The ISR that is triggered on rising edge event of input signal
                                        (0013) ;
                                        (0014) ; Author: 				DWV
                                        (0015) ; Project Version: 		1.1
                                        (0016) ;
                                        (0017) ; Project Version Author:
                                        (0018) ; v1.0 - 					DWV
                                        (0019) ; v1.1 - 					MSUR
                                        (0020) ;
                                        (0021) ;
                                        (0022) ;
                                        (0023) ;*******************************************************************************
                                        (0024) ; Copyright (2014), Cypress Semiconductor Corporation. All Rights Reserved.
                                        (0025) ;*******************************************************************************
                                        (0026) ; This software is owned by Cypress Semiconductor Corporation (Cypress)
                                        (0027) ; and is protected by and subject to worldwide patent protection (United
                                        (0028) ; States and foreign), United States copyright laws and international treaty
                                        (0029) ; provisions. Cypress hereby grants to licensee a personal, non-exclusive,
                                        (0030) ; non-transferable license to copy, use, modify, create derivative works of,
                                        (0031) ; and compile the Cypress Source Code and derivative works for the sole
                                        (0032) ; purpose of creating custom software in support of licensee product to be
                                        (0033) ; used only in conjunction with a Cypress integrated circuit as specified in
                                        (0034) ; the applicable agreement. Any reproduction, modification, translation,
                                        (0035) ; compilation, or representation of this software except as specified above 
                                        (0036) ; is prohibited without the express written permission of Cypress.
                                        (0037) ;
                                        (0038) ; Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
                                        (0039) ; REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
                                        (0040) ; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
                                        (0041) ; Cypress reserves the right to make changes without further notice to the 
                                        (0042) ; materials described herein. Cypress does not assume any liability arising out 
                                        (0043) ; of the application or use of any product or circuit described herein. Cypress 
                                        (0044) ; does not authorize its products for use as critical components in life-support 
                                        (0045) ; systems where a malfunction or failure may reasonably be expected to result in 
                                        (0046) ; significant injury to the user. The inclusion of Cypress' product in a life-
                                        (0047) ; support systems application implies that the manufacturer assumes all risk of 
                                        (0048) ; such use and in doing so indemnifies Cypress against all charges. 
                                        (0049) ;
                                        (0050) ; Use of this Software may be limited by and subject to the applicable Cypress
                                        (0051) ; software license agreement. 
                                        (0052) ;******************************************************************************/
                                        (0053) 
                                        (0054) include "m8c.inc"
                                        (0055) include "memory.inc"
                                        (0056) include "TickTimer.inc"
                                        (0057) 
                                        (0058) LSB:	equ 1
                                        (0059) MSB:	equ 0
                                        (0060) 
                                        (0061) export  _TickHandler_ISR
                                        (0062) _TickHandler_ISR:
                                        (0063)    ;Save accumulator to stack
0E73: 08       PUSH  A                  (0064)    push A
                                        (0065)    ;Increment the Tick Counter along with overflow counter   
0E74: 76 11    INC   [0x11]             (0066)    inc  [_wTickCount + LSB]
0E76: 0E 10 00 ADC   [0x10],0x0         (0067)    adc  [_wTickCount + MSB],0
0E79: 0E 0F 00 ADC   [0xF],0x0          (0068)    adc  [_cOverFlow],0
                                        (0069)    
                                        (0070)    ;If there is no overflow after incrementing wTickCount through cOverFlow, Jump to LastTick
0E7C: D0 0B    JNC   0x0E88             (0071)    jnc  LastTick
                                        (0072)    
                                        (0073)    ;If a carry comes (1st tick or 16777216th tick) first tick value is updated
                                        (0074)    ;Note that wTickCount and cOverFlow values are set to -1 in StartFreq() API for the capturing the First Tick
                                        (0075)    
                                        (0076)    ;update the First tick value (wFirstValue) from TickTimer's capture register
                                        (0077) FirstTick:
0E7E: 5D 22    MOV   A,REG[0x22]        (0078)    mov  A, reg[TickTimer_COMPARE_LSB_REG]
0E80: 53 13    MOV   [0x13],A           (0079)    mov  [_wFirstValue + LSB],A
0E82: 5D 26    MOV   A,REG[0x26]        (0080)    mov  A, reg[TickTimer_COMPARE_MSB_REG]
0E84: 53 12    MOV   [0x12],A           (0081)    mov  [_wFirstValue + MSB],A
0E86: 18       POP   A                  (0082)    pop  A
0E87: 7E       RETI                     (0083)    reti
                                        (0084)    
                                        (0085)    ;update the Last tick value (wLastValue) from TickTimer's capture register
                                        (0086) LastTick:   
0E88: 5D 22    MOV   A,REG[0x22]        (0087)    mov  A, reg[TickTimer_COMPARE_LSB_REG]
0E8A: 53 15    MOV   [0x15],A           (0088)    mov  [_wLastValue + 1],A
0E8C: 5D 26    MOV   A,REG[0x26]        (0089)    mov  A, reg[TickTimer_COMPARE_MSB_REG]
0E8E: 53 14    MOV   [0x14],A           (0090)    mov  [_wLastValue + 0],A
0E90: 18       POP   A                  (0091)    pop  A
0E91: 7E       RETI                     (0092)    reti
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2011 ImageCraft Creations Inc.
ImageCraft, 2625 Middlefield Rd #685, Palo Alto, CA 94306
info@imagecraft.com, phone (650) 493-9326 FAX (866) 889-4834
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission
Version 7.05.00.
