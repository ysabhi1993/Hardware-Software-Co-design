                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _fFreqValue::
 0000                   .blkb 4
                        .area idata(rom,lit)
 0000 00000000          .word 0x0,0x0
                        .area data(ram, con, rel)
 0004                   .dbfile ./main.c
 0004                   .dbfile C:\Users\msur\Desktop\APPLIC~1\AN2283\AN2283\AN2283\FREQUE~2\FREQUE~1\FREQUE~1\main.c
 0004                   .dbsym e fFreqValue _fFreqValue D
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\msur\Desktop\APPLIC~1\AN2283\AN2283\AN2283\FREQUE~2\FREQUE~1\FREQUE~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 126
 0000           ; /*******************************************************************************
 0000           ; * AN 2283 - PSoC 1 Measuring Frequency; 
 0000           ; * Project - Frequency Measurement with PLL;
 0000           ; *
 0000           ; * AN Description:
 0000           ; *
 0000           ; * AN2283 discusses various frequency measurement methods using PSoC 1.
 0000           ; *
 0000           ; * File Name: 'main.c'
 0000           ; *
 0000           ; * Description: C main file.
 0000           ; *
 0000           ; * Author:                             DWV
 0000           ; * Project Version:            1.1
 0000           ; *
 0000           ; * Project Version Author:
 0000           ; * v1.0 -                                      DWV
 0000           ; * v1.1 -                                      MSUR
 0000           ; *
 0000           ; * Project Details:
 0000           ; *
 0000           ; * Overview:
 0000           ; *     The project implements the hybrid frequency measurement described in the AN.
 0000           ; *     F_sample = TickTimer's period = VC3 Freq/65536 = 1 sps in the example
 0000           ; *     F_clock = VC3 itself = 65.21739 kHz
 0000           ; *     Input to the frequency measurement timer comes from P0[7]
 0000           ; *     A sample signal (SampleFreq) is generated by the device itself and routed to P0[5]
 0000           ; *     Sample signal is 1.2346 KHz
 0000           ; *
 0000           ; * Kits Used -
 0000           ; *                                             CY3210 - PSoCEval1
 0000           ; *                                             CY3217 - MiniProg1
 0000           ; *                                             CY8C29466-24PXI - PSoC Device
 0000           ; *
 0000           ; * Pin Details:
 0000           ; *
 0000           ; *     Frequency Input                                         -       P0.1
 0000           ; *     PWM Output (Test/Sample frequency)  -   P0.0
 0000           ; *     Debug LED output                                        -   P1.0
 0000           ; *     LCD Display                                                     -       P2.0 to P2.6
 0000           ; *
 0000           ; *
 0000           ; ********************************************************************************
 0000           ; * Copyright (2014), Cypress Semiconductor Corporation. All Rights Reserved.
 0000           ; ********************************************************************************
 0000           ; * This software is owned by Cypress Semiconductor Corporation (Cypress)
 0000           ; * and is protected by and subject to worldwide patent protection (United
 0000           ; * States and foreign), United States copyright laws and international treaty
 0000           ; * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
 0000           ; * non-transferable license to copy, use, modify, create derivative works of,
 0000           ; * and compile the Cypress Source Code and derivative works for the sole
 0000           ; * purpose of creating custom software in support of licensee product to be
 0000           ; * used only in conjunction with a Cypress integrated circuit as specified in
 0000           ; * the applicable agreement. Any reproduction, modification, translation,
 0000           ; * compilation, or representation of this software except as specified above 
 0000           ; * is prohibited without the express written permission of Cypress.
 0000           ; *
 0000           ; * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
 0000           ; * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 0000           ; * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 0000           ; * Cypress reserves the right to make changes without further notice to the 
 0000           ; * materials described herein. Cypress does not assume any liability arising out 
 0000           ; * of the application or use of any product or circuit described herein. Cypress 
 0000           ; * does not authorize its products for use as critical components in life-support 
 0000           ; * systems where a malfunction or failure may reasonably be expected to result in 
 0000           ; * significant injury to the user. The inclusion of Cypress' product in a life-
 0000           ; * support systems application implies that the manufacturer assumes all risk of 
 0000           ; * such use and in doing so indemnifies Cypress against all charges. 
 0000           ; *
 0000           ; * Use of this Software may be limited by and subject to the applicable Cypress
 0000           ; * software license agreement. 
 0000           ; *******************************************************************************/
 0000           ; 
 0000           ; #include <m8c.h> 
 0000           ; #include "PSoCAPI.h" 
 0000           ; #include "FreqCode.h"
 0000           ; #include <stdlib.h>
 0000           ; 
 0000           ; /* IMO frequency in Hz*/
 0000           ; #define SYSCLOCK     23986176.0
 0000           ; 
 0000           ; /* F_clock or VC3 frequency */
 0000           ; #define FCLOCK       (SYSCLOCK / 368.0)
 0000           ; 
 0000           ; /* TickTimer's period */
 0000           ; #define PERIOD       65536.0
 0000           ; 
 0000           ; /* F_sample */
 0000           ; #define FSAMPLE      (FCLOCK / PERIOD)
 0000           ; 
 0000           ; /* Imported variables from other files */
 0000           ; extern unsigned char bDataAvailable;
 0000           ; extern unsigned int  wSaveCountNum;
 0000           ; extern signed char   cSaveOverFlow;
 0000           ; extern unsigned int  wSaveTickNum;
 0000           ; 
 0000           ; /* Function prototypes */
 0000           ; void DisplayValue(void);
 0000           ; 
 0000           ; /* Global varaibles used in the project */
 0000           ; float fFreqValue = 0.0;
 0000           ; char *pString;
 0000           ; char *pTemp;
 0000           ; int iTemp;
 0000           ; 
 0000           ; 
 0000           ; /******************************************************************************
 0000           ; * Function Name: main
 0000           ; *******************************************************************************
 0000           ; *
 0000           ; * Summary:
 0000           ; *  main() performs following functions:
 0000           ; *  1: Enables comparator and the sample frequency for frequency measurement
 0000           ; *  2: Initializes the timer block for measurements
 0000           ; *  3: Waits till the sample time is expired
 0000           ; *  4: Calculates the frequency and updates the measured value on the LCD
 0000           ; *
 0000           ; * Parameters:
 0000           ; *  None.
 0000           ; *
 0000           ; * Return:
 0000           ; *  None.
 0000           ; *
 0000           ; ******************************************************************************/
 0000           ; void main(void)
 0000           ; {  
 0000                   .dbline 128
 0000           ;    /* Start the comparator */
 0000           ;    Comparator_Start(Comparator_HIGHPOWER);
 0000 10                push X
 0001 5003              mov A,3
 0003 7C0000            xcall _Comparator_Start
 0006                   .dbline 131
 0006           ;    
 0006           ;    /* Start the sample/test frequency output */
 0006           ;    SampleFreq_Start();
 0006 7C0000            xcall _SampleFreq_Start
 0009 20                pop X
 000A                   .dbline 134
 000A           ;    
 000A           ;    /* Enable Input Pullup on SignalInput pin (P0[7] in the design */
 000A           ;    SignalInput_Data_ADDR |= SignalInput_MASK; 
 000A 430080            or REG[0],-128
 000D                   .dbline 137
 000D           ;    
 000D           ;    /* Start the LCD */
 000D           ;    LCD_Start(); 
 000D 10                push X
 000E 7C0000            xcall _LCD_Start
 0011 20                pop X
 0012                   .dbline 140
 0012           ;    
 0012           ;    /* Enable globa interrupts */
 0012           ;    M8C_EnableGInt;
 0012 7101                      or  F, 01h
 0014           
 0014                   .dbline 143
 0014           ;    
 0014           ;    /* Start TickTimer, Initialize Variables */
 0014           ;    StartFreq(); 
 0014 10                push X
 0015 7C0000            xcall _StartFreq
 0018 20                pop X
 0019 83C0              xjmp L3
 001B           L5:
 001B                   .dbline 148
 001B           ;    
 001B           ;    while(1)
 001B           ;    {          
 001B           ;               /* Wait till sample period is complete - bDataAvailable is set */
 001B           ;               while(bDataAvailable == 0x00);
 001B           L6:
 001B                   .dbline 148
 001B 3C0000            cmp [_bDataAvailable],0
 001E AFFC              jz L5
 0020                   .dbline 151
 0020           ;               
 0020           ;               /* Clear the bDataAvailable flag */
 0020           ;               bDataAvailable = 0x00;  
 0020 550000            mov [_bDataAvailable],0
 0023                   .dbline 154
 0023           ;               
 0023           ;               /* Turn ON the LED */
 0023           ;               LEDOut_Data_ADDR |= LEDOut_MASK; 
 0023 430480            or REG[0x4],-128
 0026                   .dbline 157
 0026           ;               
 0026           ;               /* if overflow count is negative, the tick handler ISR was never executed (as it is initialized with -1), set freq val = 0  */
 0026           ;               if( cSaveOverFlow < 0 )
 0026 5100              mov A,[_cSaveOverFlow]
 0028 3900              cmp A,0
 002A 6D                rrc A
 002B 3100              xor A,0
 002D 3200              xor A,[_cSaveOverFlow]
 002F 6A                rlc A
 0030 D00F              jnc L8
 0032           X1:
 0032                   .dbline 159
 0032           ;               {
 0032           ;                       fFreqValue = 0.0;
 0032                   .dbline 159
 0032 550000            mov [_fFreqValue],0
 0035 550100            mov [_fFreqValue+1],0
 0038 550200            mov [_fFreqValue+2],0
 003B 550300            mov [_fFreqValue+3],0
 003E                   .dbline 160
 003E           ;               }
 003E 8396              xjmp L9
 0040           L8:
 0040                   .dbline 162
 0040           ;               /* Enter this if there were overflows in the tick count (up to 127 overflows) */
 0040           ;               else if ( cSaveOverFlow > 0)
 0040 5000              mov A,0
 0042 3A00              cmp A,[_cSaveOverFlow]
 0044 6D                rrc A
 0045 3200              xor A,[_cSaveOverFlow]
 0047 3100              xor A,0
 0049 6A                rlc A
 004A D1A2              jnc L10
 004C           X2:
 004C                   .dbline 166
 004C           ;               {
 004C           ;               /* Take overflow count into frequency calculation */
 004C           ;                       /* Freq = F_sample * ((OverFlow_Count<<16) + Signal_Tick_Counts) */
 004C           ;                       fFreqValue  = (float)(cSaveOverFlow);
 004C                   .dbline 166
 004C 5F0000            mov [__r1],[_cSaveOverFlow]
 004F 550000            mov [__r0],0
 0052 470080            tst [__r1],-128
 0055 A004              jz X3
 0057 5500FF            mov [__r0],-1
 005A           X3:
 005A 5F0300            mov [_fFreqValue+3],[__r1]
 005D 5F0200            mov [_fFreqValue+2],[__r0]
 0060 470280            tst [_fFreqValue+2],-128
 0063 A009              jz X4
 0065 5501FF            mov [_fFreqValue+1],-1
 0068 5500FF            mov [_fFreqValue],-1
 006B 8007              jmp X5
 006D           X4:
 006D 550100            mov [_fFreqValue+1],0
 0070 550000            mov [_fFreqValue],0
 0073           X5:
 0073 5100              mov A,[_fFreqValue]
 0075 08                push A
 0076 5101              mov A,[_fFreqValue+1]
 0078 08                push A
 0079 5102              mov A,[_fFreqValue+2]
 007B 08                push A
 007C 5103              mov A,[_fFreqValue+3]
 007E 08                push A
 007F 7C0000            xcall __long2fp
 0082 18                pop A
 0083 5303              mov [_fFreqValue+3],A
 0085 18                pop A
 0086 5302              mov [_fFreqValue+2],A
 0088 18                pop A
 0089 5301              mov [_fFreqValue+1],A
 008B 18                pop A
 008C 5300              mov [_fFreqValue],A
 008E                   .dbline 167
 008E           ;               fFreqValue *= 65536.0;
 008E 5100              mov A,[_fFreqValue]
 0090 08                push A
 0091 5101              mov A,[_fFreqValue+1]
 0093 08                push A
 0094 5102              mov A,[_fFreqValue+2]
 0096 08                push A
 0097 5103              mov A,[_fFreqValue+3]
 0099 08                push A
 009A 5047              mov A,71
 009C 08                push A
 009D 5080              mov A,-128
 009F 08                push A
 00A0 5000              mov A,0
 00A2 08                push A
 00A3 08                push A
 00A4 7C0000            xcall __fpmul
 00A7 18                pop A
 00A8 5303              mov [_fFreqValue+3],A
 00AA 18                pop A
 00AB 5302              mov [_fFreqValue+2],A
 00AD 18                pop A
 00AE 5301              mov [_fFreqValue+1],A
 00B0 18                pop A
 00B1 5300              mov [_fFreqValue],A
 00B3 38FC              add SP,-4
 00B5                   .dbline 168
 00B5           ;               fFreqValue += (float) wSaveTickNum;
 00B5 5101              mov A,[_wSaveTickNum+1]
 00B7 2101              and A,1
 00B9 5300              mov [__r3],A
 00BB 550000            mov [__r2],0
 00BE 470080            tst [__r2],-128
 00C1 A009              jz X6
 00C3 5500FF            mov [__r1],-1
 00C6 5500FF            mov [__r0],-1
 00C9 8007              jmp X7
 00CB           X6:
 00CB 550000            mov [__r1],0
 00CE 550000            mov [__r0],0
 00D1           X7:
 00D1 5100              mov A,[__r0]
 00D3 08                push A
 00D4 5100              mov A,[__r1]
 00D6 08                push A
 00D7 5100              mov A,[__r2]
 00D9 08                push A
 00DA 5100              mov A,[__r3]
 00DC 08                push A
 00DD 7C0000            xcall __long2fp
 00E0 18                pop A
 00E1 5300              mov [__r3],A
 00E3 18                pop A
 00E4 5300              mov [__r2],A
 00E6 18                pop A
 00E7 5300              mov [__r1],A
 00E9 18                pop A
 00EA 5300              mov [__r0],A
 00EC 5F0001            mov [__r5],[_wSaveTickNum+1]
 00EF 5F0000            mov [__r4],[_wSaveTickNum]
 00F2 70FB              and F,-5
 00F4 6E00              rrc [__r4]
 00F6 6E00              rrc [__r5]
 00F8 5F0000            mov [__r7],[__r5]
 00FB 5F0000            mov [__r6],[__r4]
 00FE 470080            tst [__r6],-128
 0101 A009              jz X8
 0103 5500FF            mov [__r5],-1
 0106 5500FF            mov [__r4],-1
 0109 8007              jmp X9
 010B           X8:
 010B 550000            mov [__r5],0
 010E 550000            mov [__r4],0
 0111           X9:
 0111 5100              mov A,[__r4]
 0113 08                push A
 0114 5100              mov A,[__r5]
 0116 08                push A
 0117 5100              mov A,[__r6]
 0119 08                push A
 011A 5100              mov A,[__r7]
 011C 08                push A
 011D 7C0000            xcall __long2fp
 0120 18                pop A
 0121 5300              mov [__r7],A
 0123 18                pop A
 0124 5300              mov [__r6],A
 0126 18                pop A
 0127 5300              mov [__r5],A
 0129 18                pop A
 012A 08                push A
 012B 5100              mov A,[__r5]
 012D 08                push A
 012E 5100              mov A,[__r6]
 0130 08                push A
 0131 5100              mov A,[__r7]
 0133 08                push A
 0134 5040              mov A,64
 0136 08                push A
 0137 5000              mov A,0
 0139 08                push A
 013A 08                push A
 013B 08                push A
 013C 7C0000            xcall __fpmul
 013F 18                pop A
 0140 5300              mov [__r7],A
 0142 18                pop A
 0143 5300              mov [__r6],A
 0145 18                pop A
 0146 5300              mov [__r5],A
 0148 18                pop A
 0149 5300              mov [__r4],A
 014B 38FC              add SP,-4
 014D 5100              mov A,[__r0]
 014F 08                push A
 0150 5100              mov A,[__r1]
 0152 08                push A
 0153 5100              mov A,[__r2]
 0155 08                push A
 0156 5100              mov A,[__r3]
 0158 08                push A
 0159 5100              mov A,[__r4]
 015B 08                push A
 015C 5100              mov A,[__r5]
 015E 08                push A
 015F 5100              mov A,[__r6]
 0161 08                push A
 0162 5100              mov A,[__r7]
 0164 08                push A
 0165 7C0000            xcall __fpadd
 0168 18                pop A
 0169 5300              mov [__r3],A
 016B 18                pop A
 016C 5300              mov [__r2],A
 016E 18                pop A
 016F 5300              mov [__r1],A
 0171 18                pop A
 0172 38FC              add SP,-4
 0174 08                push A
 0175 5100              mov A,[__r1]
 0177 08                push A
 0178 5100              mov A,[__r2]
 017A 08                push A
 017B 5100              mov A,[__r3]
 017D 08                push A
 017E 5100              mov A,[_fFreqValue]
 0180 08                push A
 0181 5101              mov A,[_fFreqValue+1]
 0183 08                push A
 0184 5102              mov A,[_fFreqValue+2]
 0186 08                push A
 0187 5103              mov A,[_fFreqValue+3]
 0189 08                push A
 018A 7C0000            xcall __fpadd
 018D 18                pop A
 018E 5303              mov [_fFreqValue+3],A
 0190 18                pop A
 0191 5302              mov [_fFreqValue+2],A
 0193 18                pop A
 0194 5301              mov [_fFreqValue+1],A
 0196 18                pop A
 0197 5300              mov [_fFreqValue],A
 0199 38FC              add SP,-4
 019B                   .dbline 169
 019B           ;               fFreqValue += 1.0;
 019B 503F              mov A,63
 019D 08                push A
 019E 5080              mov A,-128
 01A0 08                push A
 01A1 5000              mov A,0
 01A3 08                push A
 01A4 08                push A
 01A5 5100              mov A,[_fFreqValue]
 01A7 08                push A
 01A8 5101              mov A,[_fFreqValue+1]
 01AA 08                push A
 01AB 5102              mov A,[_fFreqValue+2]
 01AD 08                push A
 01AE 5103              mov A,[_fFreqValue+3]
 01B0 08                push A
 01B1 7C0000            xcall __fpadd
 01B4 18                pop A
 01B5 5303              mov [_fFreqValue+3],A
 01B7 18                pop A
 01B8 5302              mov [_fFreqValue+2],A
 01BA 18                pop A
 01BB 5301              mov [_fFreqValue+1],A
 01BD 18                pop A
 01BE 5300              mov [_fFreqValue],A
 01C0 38FC              add SP,-4
 01C2                   .dbline 170
 01C2           ;               fFreqValue *= FSAMPLE;             
 01C2 5100              mov A,[_fFreqValue]
 01C4 08                push A
 01C5 5101              mov A,[_fFreqValue+1]
 01C7 08                push A
 01C8 5102              mov A,[_fFreqValue+2]
 01CA 08                push A
 01CB 5103              mov A,[_fFreqValue+3]
 01CD 08                push A
 01CE 503F              mov A,63
 01D0 08                push A
 01D1 507E              mov A,126
 01D3 08                push A
 01D4 509B              mov A,-101
 01D6 08                push A
 01D7 50D3              mov A,-45
 01D9 08                push A
 01DA 7C0000            xcall __fpmul
 01DD 18                pop A
 01DE 5303              mov [_fFreqValue+3],A
 01E0 18                pop A
 01E1 5302              mov [_fFreqValue+2],A
 01E3 18                pop A
 01E4 5301              mov [_fFreqValue+1],A
 01E6 18                pop A
 01E7 5300              mov [_fFreqValue],A
 01E9 38FC              add SP,-4
 01EB                   .dbline 171
 01EB           ;       } 
 01EB 81E9              xjmp L11
 01ED           L10:
 01ED                   .dbline 173
 01ED           ;           else
 01ED           ;               {                       
 01ED                   .dbline 176
 01ED           ;               /* Control comes here, if there is no overflow */
 01ED           ;                       /* If the captured counts are 0, the freq = 0 or under range */
 01ED           ;                       if( wSaveTickNum == 0)
 01ED 3C0000            cmp [_wSaveTickNum],0
 01F0 B014              jnz L12
 01F2 3C0100            cmp [_wSaveTickNum+1],0
 01F5 B00F              jnz L12
 01F7           X10:
 01F7                   .dbline 178
 01F7           ;                       {
 01F7           ;                               fFreqValue = 0.0;
 01F7                   .dbline 178
 01F7 550000            mov [_fFreqValue],0
 01FA 550100            mov [_fFreqValue+1],0
 01FD 550200            mov [_fFreqValue+2],0
 0200 550300            mov [_fFreqValue+3],0
 0203                   .dbline 179
 0203           ;                       }
 0203 81D1              xjmp L13
 0205           L12:
 0205                   .dbline 182
 0205           ;               /* else Freq = F_clock * Captured_Timer_Counts / Signal_Tick_Counts */
 0205           ;                       else
 0205           ;                       {
 0205                   .dbline 183
 0205           ;                   fFreqValue  = (float) wSaveTickNum;
 0205 5101              mov A,[_wSaveTickNum+1]
 0207 2101              and A,1
 0209 5300              mov [__r3],A
 020B 550000            mov [__r2],0
 020E 470080            tst [__r2],-128
 0211 A009              jz X11
 0213 5500FF            mov [__r1],-1
 0216 5500FF            mov [__r0],-1
 0219 8007              jmp X12
 021B           X11:
 021B 550000            mov [__r1],0
 021E 550000            mov [__r0],0
 0221           X12:
 0221 5100              mov A,[__r0]
 0223 08                push A
 0224 5100              mov A,[__r1]
 0226 08                push A
 0227 5100              mov A,[__r2]
 0229 08                push A
 022A 5100              mov A,[__r3]
 022C 08                push A
 022D 7C0000            xcall __long2fp
 0230 18                pop A
 0231 5300              mov [__r3],A
 0233 18                pop A
 0234 5300              mov [__r2],A
 0236 18                pop A
 0237 5300              mov [__r1],A
 0239 18                pop A
 023A 5300              mov [__r0],A
 023C 5F0001            mov [__r5],[_wSaveTickNum+1]
 023F 5F0000            mov [__r4],[_wSaveTickNum]
 0242 70FB              and F,-5
 0244 6E00              rrc [__r4]
 0246 6E00              rrc [__r5]
 0248 5F0000            mov [__r7],[__r5]
 024B 5F0000            mov [__r6],[__r4]
 024E 470080            tst [__r6],-128
 0251 A009              jz X13
 0253 5500FF            mov [__r5],-1
 0256 5500FF            mov [__r4],-1
 0259 8007              jmp X14
 025B           X13:
 025B 550000            mov [__r5],0
 025E 550000            mov [__r4],0
 0261           X14:
 0261 5100              mov A,[__r4]
 0263 08                push A
 0264 5100              mov A,[__r5]
 0266 08                push A
 0267 5100              mov A,[__r6]
 0269 08                push A
 026A 5100              mov A,[__r7]
 026C 08                push A
 026D 7C0000            xcall __long2fp
 0270 18                pop A
 0271 5300              mov [__r7],A
 0273 18                pop A
 0274 5300              mov [__r6],A
 0276 18                pop A
 0277 5300              mov [__r5],A
 0279 18                pop A
 027A 08                push A
 027B 5100              mov A,[__r5]
 027D 08                push A
 027E 5100              mov A,[__r6]
 0280 08                push A
 0281 5100              mov A,[__r7]
 0283 08                push A
 0284 5040              mov A,64
 0286 08                push A
 0287 5000              mov A,0
 0289 08                push A
 028A 08                push A
 028B 08                push A
 028C 7C0000            xcall __fpmul
 028F 18                pop A
 0290 5300              mov [__r7],A
 0292 18                pop A
 0293 5300              mov [__r6],A
 0295 18                pop A
 0296 5300              mov [__r5],A
 0298 18                pop A
 0299 5300              mov [__r4],A
 029B 38FC              add SP,-4
 029D 5100              mov A,[__r0]
 029F 08                push A
 02A0 5100              mov A,[__r1]
 02A2 08                push A
 02A3 5100              mov A,[__r2]
 02A5 08                push A
 02A6 5100              mov A,[__r3]
 02A8 08                push A
 02A9 5100              mov A,[__r4]
 02AB 08                push A
 02AC 5100              mov A,[__r5]
 02AE 08                push A
 02AF 5100              mov A,[__r6]
 02B1 08                push A
 02B2 5100              mov A,[__r7]
 02B4 08                push A
 02B5 7C0000            xcall __fpadd
 02B8 18                pop A
 02B9 5303              mov [_fFreqValue+3],A
 02BB 18                pop A
 02BC 5302              mov [_fFreqValue+2],A
 02BE 18                pop A
 02BF 5301              mov [_fFreqValue+1],A
 02C1 18                pop A
 02C2 5300              mov [_fFreqValue],A
 02C4 38FC              add SP,-4
 02C6                   .dbline 184
 02C6           ;                   fFreqValue *= FCLOCK;
 02C6 5100              mov A,[_fFreqValue]
 02C8 08                push A
 02C9 5101              mov A,[_fFreqValue+1]
 02CB 08                push A
 02CC 5102              mov A,[_fFreqValue+2]
 02CE 08                push A
 02CF 5103              mov A,[_fFreqValue+3]
 02D1 08                push A
 02D2 5047              mov A,71
 02D4 08                push A
 02D5 507E              mov A,126
 02D7 08                push A
 02D8 509B              mov A,-101
 02DA 08                push A
 02DB 50D3              mov A,-45
 02DD 08                push A
 02DE 7C0000            xcall __fpmul
 02E1 18                pop A
 02E2 5303              mov [_fFreqValue+3],A
 02E4 18                pop A
 02E5 5302              mov [_fFreqValue+2],A
 02E7 18                pop A
 02E8 5301              mov [_fFreqValue+1],A
 02EA 18                pop A
 02EB 5300              mov [_fFreqValue],A
 02ED 38FC              add SP,-4
 02EF                   .dbline 185
 02EF           ;                   fFreqValue /= (float) wSaveCountNum;
 02EF 5101              mov A,[_wSaveCountNum+1]
 02F1 2101              and A,1
 02F3 5300              mov [__r3],A
 02F5 550000            mov [__r2],0
 02F8 470080            tst [__r2],-128
 02FB A009              jz X15
 02FD 5500FF            mov [__r1],-1
 0300 5500FF            mov [__r0],-1
 0303 8007              jmp X16
 0305           X15:
 0305 550000            mov [__r1],0
 0308 550000            mov [__r0],0
 030B           X16:
 030B 5100              mov A,[__r0]
 030D 08                push A
 030E 5100              mov A,[__r1]
 0310 08                push A
 0311 5100              mov A,[__r2]
 0313 08                push A
 0314 5100              mov A,[__r3]
 0316 08                push A
 0317 7C0000            xcall __long2fp
 031A 18                pop A
 031B 5300              mov [__r3],A
 031D 18                pop A
 031E 5300              mov [__r2],A
 0320 18                pop A
 0321 5300              mov [__r1],A
 0323 18                pop A
 0324 5300              mov [__r0],A
 0326 5F0001            mov [__r5],[_wSaveCountNum+1]
 0329 5F0000            mov [__r4],[_wSaveCountNum]
 032C 70FB              and F,-5
 032E 6E00              rrc [__r4]
 0330 6E00              rrc [__r5]
 0332 5F0000            mov [__r7],[__r5]
 0335 5F0000            mov [__r6],[__r4]
 0338 470080            tst [__r6],-128
 033B A009              jz X17
 033D 5500FF            mov [__r5],-1
 0340 5500FF            mov [__r4],-1
 0343 8007              jmp X18
 0345           X17:
 0345 550000            mov [__r5],0
 0348 550000            mov [__r4],0
 034B           X18:
 034B 5100              mov A,[__r4]
 034D 08                push A
 034E 5100              mov A,[__r5]
 0350 08                push A
 0351 5100              mov A,[__r6]
 0353 08                push A
 0354 5100              mov A,[__r7]
 0356 08                push A
 0357 7C0000            xcall __long2fp
 035A 18                pop A
 035B 5300              mov [__r7],A
 035D 18                pop A
 035E 5300              mov [__r6],A
 0360 18                pop A
 0361 5300              mov [__r5],A
 0363 18                pop A
 0364 08                push A
 0365 5100              mov A,[__r5]
 0367 08                push A
 0368 5100              mov A,[__r6]
 036A 08                push A
 036B 5100              mov A,[__r7]
 036D 08                push A
 036E 5040              mov A,64
 0370 08                push A
 0371 5000              mov A,0
 0373 08                push A
 0374 08                push A
 0375 08                push A
 0376 7C0000            xcall __fpmul
 0379 18                pop A
 037A 5300              mov [__r7],A
 037C 18                pop A
 037D 5300              mov [__r6],A
 037F 18                pop A
 0380 5300              mov [__r5],A
 0382 18                pop A
 0383 5300              mov [__r4],A
 0385 38FC              add SP,-4
 0387 5100              mov A,[__r0]
 0389 08                push A
 038A 5100              mov A,[__r1]
 038C 08                push A
 038D 5100              mov A,[__r2]
 038F 08                push A
 0390 5100              mov A,[__r3]
 0392 08                push A
 0393 5100              mov A,[__r4]
 0395 08                push A
 0396 5100              mov A,[__r5]
 0398 08                push A
 0399 5100              mov A,[__r6]
 039B 08                push A
 039C 5100              mov A,[__r7]
 039E 08                push A
 039F 7C0000            xcall __fpadd
 03A2 18                pop A
 03A3 5300              mov [__r3],A
 03A5 18                pop A
 03A6 5300              mov [__r2],A
 03A8 18                pop A
 03A9 5300              mov [__r1],A
 03AB 18                pop A
 03AC 38FC              add SP,-4
 03AE 08                push A
 03AF 5100              mov A,[__r1]
 03B1 08                push A
 03B2 5100              mov A,[__r2]
 03B4 08                push A
 03B5 5100              mov A,[__r3]
 03B7 08                push A
 03B8 5100              mov A,[_fFreqValue]
 03BA 08                push A
 03BB 5101              mov A,[_fFreqValue+1]
 03BD 08                push A
 03BE 5102              mov A,[_fFreqValue+2]
 03C0 08                push A
 03C1 5103              mov A,[_fFreqValue+3]
 03C3 08                push A
 03C4 7C0000            xcall __fpdiv
 03C7 18                pop A
 03C8 5303              mov [_fFreqValue+3],A
 03CA 18                pop A
 03CB 5302              mov [_fFreqValue+2],A
 03CD 18                pop A
 03CE 5301              mov [_fFreqValue+1],A
 03D0 18                pop A
 03D1 5300              mov [_fFreqValue],A
 03D3 38FC              add SP,-4
 03D5                   .dbline 186
 03D5           ;               }
 03D5           L13:
 03D5                   .dbline 187
 03D5           ;           }
 03D5           L11:
 03D5           L9:
 03D5                   .dbline 190
 03D5           ;               
 03D5           ;               /* Display the measured frequency value */
 03D5           ;               DisplayValue();
 03D5 9007              xcall _DisplayValue
 03D7                   .dbline 193
 03D7           ;               
 03D7           ;               /* turn OFF LED to indicate measurement completion */
 03D7           ;               LEDOut_Data_ADDR &= ~LEDOut_MASK; //LED Off
 03D7 41047F            and REG[0x4],127
 03DA                   .dbline 194
 03DA           ;    }
 03DA           L3:
 03DA                   .dbline 145
 03DA 8C40              xjmp L6
 03DC           X0:
 03DC                   .dbline -2
 03DC           L1:
 03DC                   .dbline 0 ; func end
 03DC 8FFF              jmp .
 03DE                   .dbend
 03DE                   .dbfunc e DisplayValue _DisplayValue fV
 03DE           _DisplayValue::
 03DE                   .dbline -1
 03DE                   .dbline 213
 03DE           ; }
 03DE           ; 
 03DE           ; /******************************************************************************
 03DE           ; * Function Name: DisplayValue
 03DE           ; *******************************************************************************
 03DE           ; *
 03DE           ; * Summary:
 03DE           ; *  Displays the measured frequency in kHz in the LCD along with Signal Tick counts
 03DE           ; *     and Captured Timer counts
 03DE           ; *
 03DE           ; * Parameters:
 03DE           ; *  None.
 03DE           ; *
 03DE           ; * Return:
 03DE           ; *  None.
 03DE           ; *
 03DE           ; ******************************************************************************/
 03DE           ; void DisplayValue(void)
 03DE           ; {
 03DE                   .dbline 214
 03DE           ;    LCD_Position(1,0);
 03DE 10                push X
 03DF 5700              mov X,0
 03E1 5001              mov A,1
 03E3 7C0000            xcall _LCD_Position
 03E6                   .dbline 215
 03E6           ;    LCD_PrHexByte( cSaveOverFlow );
 03E6 5100              mov A,[_cSaveOverFlow]
 03E8 7C0000            xcall _LCD_PrHexByte
 03EB                   .dbline 216
 03EB           ;    LCD_PrHexInt(wSaveTickNum);     
 03EB 5800              mov X,[_wSaveTickNum]
 03ED 5101              mov A,[_wSaveTickNum+1]
 03EF 7C0000            xcall _LCD_PrHexInt
 03F2                   .dbline 217
 03F2           ;    LCD_Position(1,10);   
 03F2 570A              mov X,10
 03F4 5001              mov A,1
 03F6 7C0000            xcall _LCD_Position
 03F9                   .dbline 218
 03F9           ;    LCD_PrHexInt(wSaveCountNum);   
 03F9 5800              mov X,[_wSaveCountNum]
 03FB 5101              mov A,[_wSaveCountNum+1]
 03FD 7C0000            xcall _LCD_PrHexInt
 0400                   .dbline 220
 0400           ;    
 0400           ;    LCD_Position(0,0);
 0400 5000              mov A,0
 0402 5700              mov X,0
 0404 7C0000            xcall _LCD_Position
 0407 20                pop X
 0408                   .dbline 221
 0408           ;    if(fFreqValue == 0.0)
 0408 5000              mov A,0
 040A 08                push A
 040B 08                push A
 040C 08                push A
 040D 08                push A
 040E 5100              mov A,[_fFreqValue]
 0410 08                push A
 0411 5101              mov A,[_fFreqValue+1]
 0413 08                push A
 0414 5102              mov A,[_fFreqValue+2]
 0416 08                push A
 0417 5103              mov A,[_fFreqValue+3]
 0419 08                push A
 041A 7C0000            xcall __fpcmp
 041D 38F8              add SP,-8
 041F 3900              cmp A,0
 0421 B00F              jnz L15
 0423                   .dbline 223
 0423           ;    {
 0423           ;       LCD_PrCString("Underrange");
 0423                   .dbline 223
 0423 10                push X
 0424 5015              mov A,>L17
 0426 08                push A
 0427 5015              mov A,<L17
 0429 5C                mov X,A
 042A 18                pop A
 042B 7C0000            xcall _LCD_PrCString
 042E 20                pop X
 042F                   .dbline 224
 042F           ;    }
 042F 835D              xjmp L16
 0431           L15:
 0431                   .dbline 225
 0431           ;    else if(fFreqValue < 0.0)
 0431 5000              mov A,0
 0433 08                push A
 0434 08                push A
 0435 08                push A
 0436 08                push A
 0437 5100              mov A,[_fFreqValue]
 0439 08                push A
 043A 5101              mov A,[_fFreqValue+1]
 043C 08                push A
 043D 5102              mov A,[_fFreqValue+2]
 043F 08                push A
 0440 5103              mov A,[_fFreqValue+3]
 0442 08                push A
 0443 7C0000            xcall __fpcmp
 0446 38F8              add SP,-8
 0448 3900              cmp A,0
 044A A013              jz L18
 044C 3901              cmp A,1
 044E A00F              jz L18
 0450                   .dbline 227
 0450           ;    {
 0450           ;       LCD_PrCString("Overrange ");   
 0450                   .dbline 227
 0450 10                push X
 0451 500A              mov A,>L20
 0453 08                push A
 0454 500A              mov A,<L20
 0456 5C                mov X,A
 0457 18                pop A
 0458 7C0000            xcall _LCD_PrCString
 045B 20                pop X
 045C                   .dbline 228
 045C           ;    }
 045C 8330              xjmp L19
 045E           L18:
 045E                   .dbline 230
 045E           ;    else
 045E           ;    {
 045E                   .dbline 231
 045E           ;       if(fFreqValue <10.0 )         fFreqValue +=  0.00005;
 045E 5041              mov A,65
 0460 08                push A
 0461 5020              mov A,32
 0463 08                push A
 0464 5000              mov A,0
 0466 08                push A
 0467 08                push A
 0468 5100              mov A,[_fFreqValue]
 046A 08                push A
 046B 5101              mov A,[_fFreqValue+1]
 046D 08                push A
 046E 5102              mov A,[_fFreqValue+2]
 0470 08                push A
 0471 5103              mov A,[_fFreqValue+3]
 0473 08                push A
 0474 7C0000            xcall __fpcmp
 0477 38F8              add SP,-8
 0479 3900              cmp A,0
 047B A030              jz L21
 047D 3901              cmp A,1
 047F A02C              jz L21
 0481                   .dbline 231
 0481 5038              mov A,56
 0483 08                push A
 0484 5051              mov A,81
 0486 08                push A
 0487 50B7              mov A,-73
 0489 08                push A
 048A 5017              mov A,23
 048C 08                push A
 048D 5100              mov A,[_fFreqValue]
 048F 08                push A
 0490 5101              mov A,[_fFreqValue+1]
 0492 08                push A
 0493 5102              mov A,[_fFreqValue+2]
 0495 08                push A
 0496 5103              mov A,[_fFreqValue+3]
 0498 08                push A
 0499 7C0000            xcall __fpadd
 049C 18                pop A
 049D 5303              mov [_fFreqValue+3],A
 049F 18                pop A
 04A0 5302              mov [_fFreqValue+2],A
 04A2 18                pop A
 04A3 5301              mov [_fFreqValue+1],A
 04A5 18                pop A
 04A6 5300              mov [_fFreqValue],A
 04A8 38FC              add SP,-4
 04AA 81AE              xjmp L22
 04AC           L21:
 04AC                   .dbline 232
 04AC           ;       else if(fFreqValue <100.0)    fFreqValue +=  0.0005;
 04AC 5042              mov A,66
 04AE 08                push A
 04AF 50C8              mov A,-56
 04B1 08                push A
 04B2 5000              mov A,0
 04B4 08                push A
 04B5 08                push A
 04B6 5100              mov A,[_fFreqValue]
 04B8 08                push A
 04B9 5101              mov A,[_fFreqValue+1]
 04BB 08                push A
 04BC 5102              mov A,[_fFreqValue+2]
 04BE 08                push A
 04BF 5103              mov A,[_fFreqValue+3]
 04C1 08                push A
 04C2 7C0000            xcall __fpcmp
 04C5 38F8              add SP,-8
 04C7 3900              cmp A,0
 04C9 A030              jz L23
 04CB 3901              cmp A,1
 04CD A02C              jz L23
 04CF                   .dbline 232
 04CF 503A              mov A,58
 04D1 08                push A
 04D2 5003              mov A,3
 04D4 08                push A
 04D5 5012              mov A,18
 04D7 08                push A
 04D8 506F              mov A,111
 04DA 08                push A
 04DB 5100              mov A,[_fFreqValue]
 04DD 08                push A
 04DE 5101              mov A,[_fFreqValue+1]
 04E0 08                push A
 04E1 5102              mov A,[_fFreqValue+2]
 04E3 08                push A
 04E4 5103              mov A,[_fFreqValue+3]
 04E6 08                push A
 04E7 7C0000            xcall __fpadd
 04EA 18                pop A
 04EB 5303              mov [_fFreqValue+3],A
 04ED 18                pop A
 04EE 5302              mov [_fFreqValue+2],A
 04F0 18                pop A
 04F1 5301              mov [_fFreqValue+1],A
 04F3 18                pop A
 04F4 5300              mov [_fFreqValue],A
 04F6 38FC              add SP,-4
 04F8 8160              xjmp L24
 04FA           L23:
 04FA                   .dbline 233
 04FA           ;       else if(fFreqValue <1000.0)   fFreqValue +=  0.005;
 04FA 5044              mov A,68
 04FC 08                push A
 04FD 507A              mov A,122
 04FF 08                push A
 0500 5000              mov A,0
 0502 08                push A
 0503 08                push A
 0504 5100              mov A,[_fFreqValue]
 0506 08                push A
 0507 5101              mov A,[_fFreqValue+1]
 0509 08                push A
 050A 5102              mov A,[_fFreqValue+2]
 050C 08                push A
 050D 5103              mov A,[_fFreqValue+3]
 050F 08                push A
 0510 7C0000            xcall __fpcmp
 0513 38F8              add SP,-8
 0515 3900              cmp A,0
 0517 A030              jz L25
 0519 3901              cmp A,1
 051B A02C              jz L25
 051D                   .dbline 233
 051D 503B              mov A,59
 051F 08                push A
 0520 50A3              mov A,-93
 0522 08                push A
 0523 50D7              mov A,-41
 0525 08                push A
 0526 500A              mov A,10
 0528 08                push A
 0529 5100              mov A,[_fFreqValue]
 052B 08                push A
 052C 5101              mov A,[_fFreqValue+1]
 052E 08                push A
 052F 5102              mov A,[_fFreqValue+2]
 0531 08                push A
 0532 5103              mov A,[_fFreqValue+3]
 0534 08                push A
 0535 7C0000            xcall __fpadd
 0538 18                pop A
 0539 5303              mov [_fFreqValue+3],A
 053B 18                pop A
 053C 5302              mov [_fFreqValue+2],A
 053E 18                pop A
 053F 5301              mov [_fFreqValue+1],A
 0541 18                pop A
 0542 5300              mov [_fFreqValue],A
 0544 38FC              add SP,-4
 0546 8112              xjmp L26
 0548           L25:
 0548                   .dbline 234
 0548           ;       else if(fFreqValue <10000.0)  fFreqValue +=  0.05;
 0548 5046              mov A,70
 054A 08                push A
 054B 501C              mov A,28
 054D 08                push A
 054E 5040              mov A,64
 0550 08                push A
 0551 5000              mov A,0
 0553 08                push A
 0554 5100              mov A,[_fFreqValue]
 0556 08                push A
 0557 5101              mov A,[_fFreqValue+1]
 0559 08                push A
 055A 5102              mov A,[_fFreqValue+2]
 055C 08                push A
 055D 5103              mov A,[_fFreqValue+3]
 055F 08                push A
 0560 7C0000            xcall __fpcmp
 0563 38F8              add SP,-8
 0565 3900              cmp A,0
 0567 A030              jz L27
 0569 3901              cmp A,1
 056B A02C              jz L27
 056D                   .dbline 234
 056D 503D              mov A,61
 056F 08                push A
 0570 504C              mov A,76
 0572 08                push A
 0573 50CC              mov A,-52
 0575 08                push A
 0576 50CD              mov A,-51
 0578 08                push A
 0579 5100              mov A,[_fFreqValue]
 057B 08                push A
 057C 5101              mov A,[_fFreqValue+1]
 057E 08                push A
 057F 5102              mov A,[_fFreqValue+2]
 0581 08                push A
 0582 5103              mov A,[_fFreqValue+3]
 0584 08                push A
 0585 7C0000            xcall __fpadd
 0588 18                pop A
 0589 5303              mov [_fFreqValue+3],A
 058B 18                pop A
 058C 5302              mov [_fFreqValue+2],A
 058E 18                pop A
 058F 5301              mov [_fFreqValue+1],A
 0591 18                pop A
 0592 5300              mov [_fFreqValue],A
 0594 38FC              add SP,-4
 0596 80C2              xjmp L28
 0598           L27:
 0598                   .dbline 235
 0598           ;       else if(fFreqValue <100000.0) fFreqValue +=  0.5;
 0598 5047              mov A,71
 059A 08                push A
 059B 50C3              mov A,-61
 059D 08                push A
 059E 5050              mov A,80
 05A0 08                push A
 05A1 5000              mov A,0
 05A3 08                push A
 05A4 5100              mov A,[_fFreqValue]
 05A6 08                push A
 05A7 5101              mov A,[_fFreqValue+1]
 05A9 08                push A
 05AA 5102              mov A,[_fFreqValue+2]
 05AC 08                push A
 05AD 5103              mov A,[_fFreqValue+3]
 05AF 08                push A
 05B0 7C0000            xcall __fpcmp
 05B3 38F8              add SP,-8
 05B5 3900              cmp A,0
 05B7 A02C              jz L29
 05B9 3901              cmp A,1
 05BB A028              jz L29
 05BD                   .dbline 235
 05BD 503F              mov A,63
 05BF 08                push A
 05C0 5000              mov A,0
 05C2 08                push A
 05C3 08                push A
 05C4 08                push A
 05C5 5100              mov A,[_fFreqValue]
 05C7 08                push A
 05C8 5101              mov A,[_fFreqValue+1]
 05CA 08                push A
 05CB 5102              mov A,[_fFreqValue+2]
 05CD 08                push A
 05CE 5103              mov A,[_fFreqValue+3]
 05D0 08                push A
 05D1 7C0000            xcall __fpadd
 05D4 18                pop A
 05D5 5303              mov [_fFreqValue+3],A
 05D7 18                pop A
 05D8 5302              mov [_fFreqValue+2],A
 05DA 18                pop A
 05DB 5301              mov [_fFreqValue+1],A
 05DD 18                pop A
 05DE 5300              mov [_fFreqValue],A
 05E0 38FC              add SP,-4
 05E2 8076              xjmp L30
 05E4           L29:
 05E4                   .dbline 236
 05E4           ;       else if(fFreqValue <1000000.0)fFreqValue +=  5.0;      
 05E4 5049              mov A,73
 05E6 08                push A
 05E7 5074              mov A,116
 05E9 08                push A
 05EA 5024              mov A,36
 05EC 08                push A
 05ED 5000              mov A,0
 05EF 08                push A
 05F0 5100              mov A,[_fFreqValue]
 05F2 08                push A
 05F3 5101              mov A,[_fFreqValue+1]
 05F5 08                push A
 05F6 5102              mov A,[_fFreqValue+2]
 05F8 08                push A
 05F9 5103              mov A,[_fFreqValue+3]
 05FB 08                push A
 05FC 7C0000            xcall __fpcmp
 05FF 38F8              add SP,-8
 0601 3900              cmp A,0
 0603 A02E              jz L31
 0605 3901              cmp A,1
 0607 A02A              jz L31
 0609                   .dbline 236
 0609 5040              mov A,64
 060B 08                push A
 060C 50A0              mov A,-96
 060E 08                push A
 060F 5000              mov A,0
 0611 08                push A
 0612 08                push A
 0613 5100              mov A,[_fFreqValue]
 0615 08                push A
 0616 5101              mov A,[_fFreqValue+1]
 0618 08                push A
 0619 5102              mov A,[_fFreqValue+2]
 061B 08                push A
 061C 5103              mov A,[_fFreqValue+3]
 061E 08                push A
 061F 7C0000            xcall __fpadd
 0622 18                pop A
 0623 5303              mov [_fFreqValue+3],A
 0625 18                pop A
 0626 5302              mov [_fFreqValue+2],A
 0628 18                pop A
 0629 5301              mov [_fFreqValue+1],A
 062B 18                pop A
 062C 5300              mov [_fFreqValue],A
 062E 38FC              add SP,-4
 0630 8028              xjmp L32
 0632           L31:
 0632                   .dbline 237
 0632           ;       else                          fFreqValue += 50.0;
 0632 5042              mov A,66
 0634 08                push A
 0635 5048              mov A,72
 0637 08                push A
 0638 5000              mov A,0
 063A 08                push A
 063B 08                push A
 063C 5100              mov A,[_fFreqValue]
 063E 08                push A
 063F 5101              mov A,[_fFreqValue+1]
 0641 08                push A
 0642 5102              mov A,[_fFreqValue+2]
 0644 08                push A
 0645 5103              mov A,[_fFreqValue+3]
 0647 08                push A
 0648 7C0000            xcall __fpadd
 064B 18                pop A
 064C 5303              mov [_fFreqValue+3],A
 064E 18                pop A
 064F 5302              mov [_fFreqValue+2],A
 0651 18                pop A
 0652 5301              mov [_fFreqValue+1],A
 0654 18                pop A
 0655 5300              mov [_fFreqValue],A
 0657 38FC              add SP,-4
 0659           L32:
 0659           L30:
 0659           L28:
 0659           L26:
 0659           L24:
 0659           L22:
 0659                   .dbline 239
 0659           ;         
 0659           ;       if(fFreqValue < 1000.0)
 0659 5044              mov A,68
 065B 08                push A
 065C 507A              mov A,122
 065E 08                push A
 065F 5000              mov A,0
 0661 08                push A
 0662 08                push A
 0663 5100              mov A,[_fFreqValue]
 0665 08                push A
 0666 5101              mov A,[_fFreqValue+1]
 0668 08                push A
 0669 5102              mov A,[_fFreqValue+2]
 066B 08                push A
 066C 5103              mov A,[_fFreqValue+3]
 066E 08                push A
 066F 7C0000            xcall __fpcmp
 0672 38F8              add SP,-8
 0674 3900              cmp A,0
 0676 A07B              jz L33
 0678 3901              cmp A,1
 067A A077              jz L33
 067C                   .dbline 241
 067C           ;         {
 067C           ;          pString = ftoa(fFreqValue, &iTemp);
 067C                   .dbline 241
 067C 5000              mov A,>_iTemp
 067E 08                push A
 067F 5000              mov A,<_iTemp
 0681 08                push A
 0682 5100              mov A,[_fFreqValue]
 0684 08                push A
 0685 5101              mov A,[_fFreqValue+1]
 0687 08                push A
 0688 5102              mov A,[_fFreqValue+2]
 068A 08                push A
 068B 5103              mov A,[_fFreqValue+3]
 068D 08                push A
 068E 7C0000            xcall _ftoa
 0691 38FA              add SP,-6
 0693 5F0500            mov [_pString+1],[__r1]
 0696 5F0400            mov [_pString],[__r0]
 0699                   .dbline 242
 0699           ;          for(pTemp = pString; *pTemp != 0x00; pTemp++); //find the end
 0699 5F0005            mov [__r0],[_pString+1]
 069C 5F0300            mov [_pTemp+1],[__r0]
 069F 8006              xjmp L38
 06A1           L35:
 06A1                   .dbline 242
 06A1           L36:
 06A1                   .dbline 242
 06A1 7603              inc [_pTemp+1]
 06A3 0E0200            adc [_pTemp],0
 06A6           L38:
 06A6                   .dbline 242
 06A6 5F0003            mov [__r1],[_pTemp+1]
 06A9 3E00              mvi A,[__r1]
 06AB BFF5              jnz L35
 06AD 8017              xjmp L40
 06AF           L39:
 06AF                   .dbline 243
 06AF           ;          while((pTemp - pString) <6)*pTemp++ = '0';//right fill with "0"s 
 06AF 5F0003            mov [__r1],[_pTemp+1]
 06B2 5F0002            mov [__r0],[_pTemp]
 06B5 5100              mov A,[__r1]
 06B7 0101              add A,1
 06B9 5303              mov [_pTemp+1],A
 06BB 5100              mov A,[__r0]
 06BD 0900              adc A,0
 06BF 5302              mov [_pTemp],A
 06C1 5030              mov A,48
 06C3 3F00              mvi [__r1],A
 06C5           L40:
 06C5                   .dbline 243
 06C5 5F0005            mov [__r0],[_pString+1]
 06C8 5103              mov A,[_pTemp+1]
 06CA 1200              sub A,[__r0]
 06CC 3906              cmp A,6
 06CE CFE0              jc L39
 06D0           X28:
 06D0                   .dbline 244
 06D0           ;          *(pString + 6)=0x00;
 06D0 5105              mov A,[_pString+1]
 06D2 0106              add A,6
 06D4 5300              mov [__r1],A
 06D6 5000              mov A,0
 06D8 3F00              mvi [__r1],A
 06DA                   .dbline 245
 06DA           ;          LCD_PrString(pString);
 06DA 10                push X
 06DB 5104              mov A,[_pString]
 06DD 08                push A
 06DE 5105              mov A,[_pString+1]
 06E0 5C                mov X,A
 06E1 18                pop A
 06E2 7C0000            xcall _LCD_PrString
 06E5                   .dbline 246
 06E5           ;          LCD_PrCString(" Hz ");  
 06E5 5005              mov A,>L42
 06E7 08                push A
 06E8 5005              mov A,<L42
 06EA 5C                mov X,A
 06EB 18                pop A
 06EC 7C0000            xcall _LCD_PrCString
 06EF 20                pop X
 06F0                   .dbline 247
 06F0           ;       }
 06F0 809C              xjmp L34
 06F2           L33:
 06F2                   .dbline 249
 06F2           ;       else
 06F2           ;         {
 06F2                   .dbline 250
 06F2           ;          fFreqValue /= 1000.0;
 06F2 5044              mov A,68
 06F4 08                push A
 06F5 507A              mov A,122
 06F7 08                push A
 06F8 5000              mov A,0
 06FA 08                push A
 06FB 08                push A
 06FC 5100              mov A,[_fFreqValue]
 06FE 08                push A
 06FF 5101              mov A,[_fFreqValue+1]
 0701 08                push A
 0702 5102              mov A,[_fFreqValue+2]
 0704 08                push A
 0705 5103              mov A,[_fFreqValue+3]
 0707 08                push A
 0708 7C0000            xcall __fpdiv
 070B 18                pop A
 070C 5303              mov [_fFreqValue+3],A
 070E 18                pop A
 070F 5302              mov [_fFreqValue+2],A
 0711 18                pop A
 0712 5301              mov [_fFreqValue+1],A
 0714 18                pop A
 0715 5300              mov [_fFreqValue],A
 0717 38FC              add SP,-4
 0719                   .dbline 251
 0719           ;          pString = ftoa(fFreqValue, &iTemp);
 0719 5000              mov A,>_iTemp
 071B 08                push A
 071C 5000              mov A,<_iTemp
 071E 08                push A
 071F 5100              mov A,[_fFreqValue]
 0721 08                push A
 0722 5101              mov A,[_fFreqValue+1]
 0724 08                push A
 0725 5102              mov A,[_fFreqValue+2]
 0727 08                push A
 0728 5103              mov A,[_fFreqValue+3]
 072A 08                push A
 072B 7C0000            xcall _ftoa
 072E 38FA              add SP,-6
 0730 5F0500            mov [_pString+1],[__r1]
 0733 5F0400            mov [_pString],[__r0]
 0736                   .dbline 252
 0736           ;          for(pTemp = pString; *pTemp != 0x00; pTemp++); //find the end
 0736 5F0005            mov [__r0],[_pString+1]
 0739 5F0300            mov [_pTemp+1],[__r0]
 073C 8006              xjmp L46
 073E           L43:
 073E                   .dbline 252
 073E           L44:
 073E                   .dbline 252
 073E 7603              inc [_pTemp+1]
 0740 0E0200            adc [_pTemp],0
 0743           L46:
 0743                   .dbline 252
 0743 5F0003            mov [__r1],[_pTemp+1]
 0746 3E00              mvi A,[__r1]
 0748 BFF5              jnz L43
 074A 8017              xjmp L48
 074C           L47:
 074C                   .dbline 253
 074C           ;          while((pTemp - pString) <6)*pTemp++ = '0';//right fill with "0"s 
 074C 5F0003            mov [__r1],[_pTemp+1]
 074F 5F0002            mov [__r0],[_pTemp]
 0752 5100              mov A,[__r1]
 0754 0101              add A,1
 0756 5303              mov [_pTemp+1],A
 0758 5100              mov A,[__r0]
 075A 0900              adc A,0
 075C 5302              mov [_pTemp],A
 075E 5030              mov A,48
 0760 3F00              mvi [__r1],A
 0762           L48:
 0762                   .dbline 253
 0762 5F0005            mov [__r0],[_pString+1]
 0765 5103              mov A,[_pTemp+1]
 0767 1200              sub A,[__r0]
 0769 3906              cmp A,6
 076B CFE0              jc L47
 076D           X29:
 076D                   .dbline 254
 076D           ;          *(pString + 6)=0x00;
 076D 5105              mov A,[_pString+1]
 076F 0106              add A,6
 0771 5300              mov [__r1],A
 0773 5000              mov A,0
 0775 3F00              mvi [__r1],A
 0777                   .dbline 255
 0777           ;          LCD_PrString(pString);
 0777 10                push X
 0778 5104              mov A,[_pString]
 077A 08                push A
 077B 5105              mov A,[_pString+1]
 077D 5C                mov X,A
 077E 18                pop A
 077F 7C0000            xcall _LCD_PrString
 0782                   .dbline 256
 0782           ;          LCD_PrCString("kHz ");            
 0782 5000              mov A,>L50
 0784 08                push A
 0785 5000              mov A,<L50
 0787 5C                mov X,A
 0788 18                pop A
 0789 7C0000            xcall _LCD_PrCString
 078C 20                pop X
 078D                   .dbline 257
 078D           ;       }                   
 078D           L34:
 078D                   .dbline 258
 078D           ;    }
 078D           L19:
 078D           L16:
 078D                   .dbline -2
 078D           L14:
 078D                   .dbline 0 ; func end
 078D 7F                ret
 078E                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile C:\Users\msur\Desktop\APPLIC~1\AN2283\AN2283\AN2283\FREQUE~2\FREQUE~1\FREQUE~1\main.c
 0000           _iTemp::
 0000                   .blkb 2
 0002                   .dbsym e iTemp _iTemp I
 0002           _pTemp::
 0002                   .blkb 2
 0004                   .dbsym e pTemp _pTemp pc
 0004           _pString::
 0004                   .blkb 2
 0006                   .dbsym e pString _pString pc
                        .area lit(rom, con, rel, lit)
 0000           L50:
 0000 6B487A2000        .byte 'k,'H,'z,32,0
 0005           L42:
 0005 20487A2000        .byte 32,'H,'z,32,0
 000A           L20:
 000A 4F76657272616E67652000    .byte 'O,'v,'e,'r,'r,'a,'n,'g,'e,32,0
 0015           L17:
 0015 556E64657272616E676500    .byte 'U,'n,'d,'e,'r,'r,'a,'n,'g,'e,0
