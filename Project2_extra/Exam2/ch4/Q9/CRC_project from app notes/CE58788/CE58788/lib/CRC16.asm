;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: CRC16.asm
;;   Version: 3.2, Updated on 2014/7/14 at 8:9:8
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: CRC16 User Module software implementation file.
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "CRC16.inc"
include "memory.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export   CRC16_Start
export  _CRC16_Start
export   CRC16_Stop
export  _CRC16_Stop
export   CRC16_WriteSeed
export  _CRC16_WriteSeed
export   CRC16_WritePolynomial
export  _CRC16_WritePolynomial
export   CRC16_wReadCRC
export  _CRC16_wReadCRC


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;       WARNING WARNING WARNING
; The following exports are for backwards
; compatibility only and should not be used
; for new designs.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
export  wCRC16_ReadCRC
export _wCRC16_ReadCRC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;             END WARNING
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------
bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit

AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: CRC16_Start
;
;  DESCRIPTION:
;     Starts the CRC16 user module.  The CRC will begin computing the CRC
;     POLYNOMIAL when data is clocked in.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:   None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 CRC16_Start:
_CRC16_Start:
   RAM_PROLOGUE RAM_USE_CLASS_1
   or    REG[CRC16_CONTROL_LSB_REG], bfCONTROL_REG_START_BIT
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: CRC16_Stop
;
;  DESCRIPTION:
;     Disables CRC16 operation.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:   None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
;    Writing to the Seed register will cause the seed value to be latched into
;    the Shift register.
;
 CRC16_Stop:
_CRC16_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   and   REG[CRC16_CONTROL_LSB_REG], ~bfCONTROL_REG_START_BIT
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: CRC16_WriteSeed
;
;  DESCRIPTION:
;     Initializes the CRC polynomial function with a starting seed value.
;     The CRC16 User module is stopped while the Seed value is updated and
;     upon exit, its previous start state is restored.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     wSeedValue - the seed value to initialize the polynomial function.
;     MSB passed in X
;     LSB passed in A
;
;  RETURNS:  None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
;    CRC16 user module is stopped while the seed is updated.
;
 CRC16_WriteSeed:
_CRC16_WriteSeed:

   RAM_PROLOGUE RAM_USE_CLASS_1
   ;save the input parameters
   push  X
   push  A

   ;get and save the current start state
   mov   A, REG[CRC16_CONTROL_LSB_REG]
   mov   X, A

   ;stop the CRC16
   and   REG[CRC16_CONTROL_LSB_REG], ~bfCONTROL_REG_START_BIT

   ; Load the Seed value into the Seed register
   pop   A
   mov   reg[CRC16_SEED_LSB_REG], A
   pop   A
   mov   reg[CRC16_SEED_MSB_REG], A

   ; restore the start state
   mov   A, X
   mov   REG[CRC16_CONTROL_LSB_REG], A

   RAM_EPILOGUE RAM_USE_CLASS_1
   ret

.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: CRC16_WritePolynomial
;
;  DESCRIPTION:
;     Initializes the CRC polynomial value.
;     The CRC16 User module is stopped while the polynomial value is updated and
;     upon exit, its previous start state is restored.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;     wPolynomial - the polynomial to load into the polynomial register
;     MSB passed in X
;     LSB passed in A
;
;  RETURNS:  None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;    
;    CRC16 user module is stopped while the polynomial is updated.
;
 CRC16_WritePolynomial:
_CRC16_WritePolynomial:

   RAM_PROLOGUE RAM_USE_CLASS_1
   ;save the input parameters
   push  X
   push  A

   ;get and save the current start state
   mov   A, REG[CRC16_CONTROL_LSB_REG]
   mov   X, A

   ;stop the CRC16
   and   REG[CRC16_CONTROL_LSB_REG], ~bfCONTROL_REG_START_BIT

   ; Load the polynomial into the CRC16 Polynomial register
   pop   A
   mov   reg[CRC16_POLY_LSB_REG], A
   pop   A
   mov   reg[CRC16_POLY_MSB_REG], A

   ; restore the start state
   mov   A, X
   mov   REG[CRC16_CONTROL_LSB_REG], A

   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: CRC16_wReadCRC
;
;  DESCRIPTION:
;     Reads the currently computed CRC polynomial function value.
;     MUST ensure that the current data byte has completely been clocked in
;     before calling this function.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: None
;
;  RETURNS:
;     wCrcValue - CRC value read.
;        MSB returned in X
;        LSB returned in A
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;    
;    The seed value is lost.
;
;  THEORY of OPERATION or PROCEDURE:
;     1) Read the Shift register - CRC value is transferred to Seed register
;     2) Read the Seed register.
;
;-----------------------------------------------------------------------------
 CRC16_wReadCRC:
_CRC16_wReadCRC:
 wCRC16_ReadCRC:   ; For backwards compatibility only
_wCRC16_ReadCRC:   ; For backwards compatibility only

   RAM_PROLOGUE RAM_USE_CLASS_1
   ;-------------
   ;  MSB BYTE
   ;-------------
   ; Read the Shift register.  This causes the current
   ;  CRC computed number to be transferred to the Seed register.
   mov   A, reg[CRC16_SHIFT_MSB_REG]

   ; Read the CRC computed value
   mov   A, reg[CRC16_SEED_MSB_REG]
   mov   X, A

   ;-------------
   ;  LSB BYTE
   ;-------------
   ; Read the Shift register.  This causes the current
   ;  CRC computed number to be transferred to the Seed register.
   mov   A, reg[CRC16_SHIFT_LSB_REG]

   ; Read the CRC computed value
   mov   A, reg[CRC16_SEED_LSB_REG]

   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

; End of File CRC16.asm
