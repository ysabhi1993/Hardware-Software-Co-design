FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [i+2],0x0          (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [i+3],0x0          (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 1B LCALL 0x031B             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 05 MOV   REG[0xD0],0x5      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 14    MOV   X,0x14             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 2E    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 2E    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 2E    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 2D    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 2E    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 2E FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 2D    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 2D    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 2E    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 2E FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 2D    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 15 AC LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0216: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_hwsw_partition_fft_Bank1
                                        (0019) export LoadConfigTBL_hwsw_partition_fft_Bank0
                                        (0020) export LoadConfigTBL_hwsw_partition_fft_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_hwsw_partition_fft_Bank0:
                                        (0023) ;  Instance name LCD_1, User Module LCD
                                        (0024) ;  Global Register values Bank 0
                                        (0025) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0026) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0027) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0028) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0029) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0030) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0031) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0032) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0033) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0034) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0035) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0036) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0037) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0038) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0039) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0040) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0041) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0042) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0043) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0044) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0045) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0046) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0047) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0048) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0049) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0050) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0051) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0052) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0053) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0054) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0055) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0056) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0057) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0058) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0059) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0060) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0061) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0062) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0063) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0064) 	db		ffh
                                        (0065) LoadConfigTBL_hwsw_partition_fft_Bank1:
                                        (0066) ;  Instance name LCD_1, User Module LCD
                                        (0067) ;  Global Register values Bank 1
                                        (0068) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0069) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0070) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0071) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0072) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0073) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0074) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0075) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0076) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0077) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0078) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0079) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0080) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0081) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0082) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0083) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0084) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0085) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0086) 	db		ffh
                                        (0087) AREA psoc_config(rom, rel)
                                        (0088) LoadConfigTBL_hwsw_partition_fft_Ordered:
                                        (0089) ;  Ordered Global Register values
                                        (0090) 	M8C_SetBank0
0218: 62 00 00 MOV   REG[0x0],0x0       (0091) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
021B: 71 10    OR    F,0x10             
                                        (0092) 	M8C_SetBank1
021D: 62 00 00 MOV   REG[0x0],0x0       (0093) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0220: 62 01 FF MOV   REG[0x1],0xFF      (0094) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0223: 70 EF    AND   F,0xEF             
                                        (0095) 	M8C_SetBank0
0225: 62 03 FF MOV   REG[0x3],0xFF      (0096) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0228: 62 02 00 MOV   REG[0x2],0x0       (0097) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
022B: 71 10    OR    F,0x10             
                                        (0098) 	M8C_SetBank1
022D: 62 02 00 MOV   REG[0x2],0x0       (0099) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0230: 62 03 00 MOV   REG[0x3],0x0       (0100) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0233: 70 EF    AND   F,0xEF             
                                        (0101) 	M8C_SetBank0
0235: 62 01 00 MOV   REG[0x1],0x0       (0102) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0238: 62 04 00 MOV   REG[0x4],0x0       (0103) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
023B: 71 10    OR    F,0x10             
                                        (0104) 	M8C_SetBank1
023D: 62 04 00 MOV   REG[0x4],0x0       (0105) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0240: 62 05 FF MOV   REG[0x5],0xFF      (0106) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0243: 70 EF    AND   F,0xEF             
                                        (0107) 	M8C_SetBank0
0245: 62 07 FF MOV   REG[0x7],0xFF      (0108) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0248: 62 06 00 MOV   REG[0x6],0x0       (0109) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
024B: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
024D: 62 06 00 MOV   REG[0x6],0x0       (0111) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0250: 62 07 00 MOV   REG[0x7],0x0       (0112) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0253: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
0255: 62 05 00 MOV   REG[0x5],0x0       (0114) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0258: 62 08 00 MOV   REG[0x8],0x0       (0115) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
025B: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
025D: 62 08 7F MOV   REG[0x8],0x7F      (0117) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0260: 62 09 80 MOV   REG[0x9],0x80      (0118) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0263: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
0265: 62 0B 80 MOV   REG[0xB],0x80      (0120) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0268: 62 0A 00 MOV   REG[0xA],0x0       (0121) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
026B: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
026D: 62 0A 00 MOV   REG[0xA],0x0       (0123) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0270: 62 0B 00 MOV   REG[0xB],0x0       (0124) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0273: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
0275: 62 09 00 MOV   REG[0x9],0x0       (0126) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0278: 62 0C 00 MOV   REG[0xC],0x0       (0127) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
027B: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
027D: 62 0C 00 MOV   REG[0xC],0x0       (0129) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0280: 62 0D 00 MOV   REG[0xD],0x0       (0130) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0283: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
0285: 62 0F 00 MOV   REG[0xF],0x0       (0132) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0288: 62 0E 00 MOV   REG[0xE],0x0       (0133) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
028B: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
028D: 62 0E 00 MOV   REG[0xE],0x0       (0135) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0290: 62 0F 00 MOV   REG[0xF],0x0       (0136) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0293: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0295: 62 0D 00 MOV   REG[0xD],0x0       (0138) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0298: 62 10 00 MOV   REG[0x10],0x0      (0139) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
029B: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
029D: 62 10 00 MOV   REG[0x10],0x0      (0141) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02A0: 62 11 00 MOV   REG[0x11],0x0      (0142) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02A3: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
02A5: 62 13 00 MOV   REG[0x13],0x0      (0144) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02A8: 62 12 00 MOV   REG[0x12],0x0      (0145) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02AB: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
02AD: 62 12 00 MOV   REG[0x12],0x0      (0147) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02B0: 62 13 00 MOV   REG[0x13],0x0      (0148) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02B3: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
02B5: 62 11 00 MOV   REG[0x11],0x0      (0150) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02B8: 62 14 00 MOV   REG[0x14],0x0      (0151) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02BB: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
02BD: 62 14 00 MOV   REG[0x14],0x0      (0153) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02C0: 62 15 00 MOV   REG[0x15],0x0      (0154) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02C3: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
02C5: 62 17 00 MOV   REG[0x17],0x0      (0156) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02C8: 62 16 00 MOV   REG[0x16],0x0      (0157) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02CB: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
02CD: 62 16 00 MOV   REG[0x16],0x0      (0159) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02D0: 62 17 00 MOV   REG[0x17],0x0      (0160) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02D3: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
02D5: 62 15 00 MOV   REG[0x15],0x0      (0162) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02D8: 62 18 00 MOV   REG[0x18],0x0      (0163) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02DB: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
02DD: 62 18 00 MOV   REG[0x18],0x0      (0165) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02E0: 62 19 00 MOV   REG[0x19],0x0      (0166) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02E3: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
02E5: 62 1B 00 MOV   REG[0x1B],0x0      (0168) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02E8: 62 1A 00 MOV   REG[0x1A],0x0      (0169) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02EB: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
02ED: 62 1A 00 MOV   REG[0x1A],0x0      (0171) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
02F0: 62 1B 00 MOV   REG[0x1B],0x0      (0172) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
02F3: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
02F5: 62 19 00 MOV   REG[0x19],0x0      (0174) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
02F8: 62 1C 00 MOV   REG[0x1C],0x0      (0175) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
02FB: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02FD: 62 1C 00 MOV   REG[0x1C],0x0      (0177) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0300: 62 1D 00 MOV   REG[0x1D],0x0      (0178) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0303: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
0305: 62 1F 00 MOV   REG[0x1F],0x0      (0180) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0308: 62 1E 00 MOV   REG[0x1E],0x0      (0181) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
030B: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
030D: 62 1E 00 MOV   REG[0x1E],0x0      (0183) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0310: 62 1F 00 MOV   REG[0x1F],0x0      (0184) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0313: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0315: 62 1D 00 MOV   REG[0x1D],0x0      (0186) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0318: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
031A: 7F       RET                      (0188) 	ret
                                        (0189) 
                                        (0190) 
                                        (0191) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_hwsw_partition_fft
                                        (0026) export _LoadConfig_hwsw_partition_fft
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
031B: 55 00 00 MOV   [final_mod],0x0    (0065) 	mov		[Port_2_Data_SHADE], 0h
031E: 55 01 7F MOV   [final_mod+1],0x7F (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0321: 55 02 80 MOV   [final_mod+2],0x80 (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0324: 7C 03 2B LCALL 0x032B             (0069) 	lcall	LoadConfig_hwsw_partition_fft
0327: 7C 02 16 LCALL 0x0216             (0070) 	lcall	LoadConfigTBL_hwsw_partition_fft_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
032A: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration hwsw_partition_fft
                                        (0078) ;
                                        (0079) ;    Load configuration registers for hwsw_partition_fft.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_hwsw_partition_fft:
                                        (0096)  LoadConfig_hwsw_partition_fft:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
032B: 10       PUSH  X                  (0099) 	push	x
032C: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
032E: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0330: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0331: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_hwsw_partition_fft_Bank0
0333: 57 A0    MOV   X,0xA0             (0105)     mov     X, <LoadConfigTBL_hwsw_partition_fft_Bank0
0335: 7C 03 46 LCALL 0x0346             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0338: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
033A: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
033B: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_hwsw_partition_fft_Bank1
033D: 57 EF    MOV   X,0xEF             (0112)     mov     X, <LoadConfigTBL_hwsw_partition_fft_Bank1
033F: 7C 03 46 LCALL 0x0346             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0342: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0344: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0345: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0346: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0348: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0349: 08       PUSH  A                  (0143)     push    A
034A: 4F       MOV   X,SP               (0144)     mov     X, SP
034B: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
034E: D0 04    JNC   0x0353             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0350: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0353: 18       POP   A                  (0149)     pop     A
0354: 20       POP   X                  (0150)     pop     X
0355: 70 EF    AND   F,0xEF             
0357: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
035A: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
035B: 08       PUSH  A                  (0156)     push    A
035C: 28       ROMX                     (0157)     romx                            ; Load register address from table
035D: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
035F: A0 1F    JZ    0x037F             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0361: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0362: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0365: A0 03    JZ    0x0369             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0367: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0369: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
036B: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
036C: 20       POP   X                  (0167)     pop     X
036D: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
036E: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0370: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0371: 08       PUSH  A                  (0171)     push    A
0372: 28       ROMX                     (0172)     romx                            ; load config data from the table
0373: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0374: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0376: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0378: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0379: 20       POP   X                  (0177)     pop     X
037A: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
037B: 09 00    ADC   A,0x0              (0179)     adc     A, 0
037D: 8F D7    JMP   0x0355             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
037F: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0381: 70 3F    AND   F,0x3F             
0383: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0385: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT2DR
                                        (0135) LCD_1_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0386: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0387: 10       PUSH  X                  (0209)     push  X
0388: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0389: B0 04    JNZ   0x038E             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
038B: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
038C: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
038D: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
038E: 90 44    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(0218)     call  LCD_1_WriteData              ; Write data to LCD
0390: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0391: 18       POP   A                  (0220)     pop   A
0392: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0393: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
0395: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0396: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
03A8: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
03A9: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
03AA: 67       ASR   A                  (0262)     asr   A
03AB: 67       ASR   A                  (0263)     asr   A
03AC: 67       ASR   A                  (0264)     asr   A
03AD: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03AF: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
03B1: 90 21    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(0267)     call  LCD_1_WriteData              ; Write data to screen
03B3: 18       POP   A                  (0268)     pop   A                            ; Restore value
03B4: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03B6: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
03B8: 90 1A    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03BA: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03BB: 4B       SWAP  A,X                (0305)     swap  A,X
03BC: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
03BE: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03BF: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03C1: 7F       RET                      (0310)     ret
03C2: 70 BF    AND   F,0xBF             
03C4: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
03C6: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
03C8: A0 06    JZ    0x03CF             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
03CA: 90 08    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(0349)     call  LCD_1_WriteData              ; Write data to screen
03CC: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
03CD: 8F F8    JMP   0x03C6             (0351)     jmp   .Loop_PrString               ; Go get next character
03CF: 70 3F    AND   F,0x3F             
03D1: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
03D3: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
03D4: 90 65    CALL  0x043B             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
03D6: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
03D7: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
03D8: 67       ASR   A                  (0390)     asr   A
03D9: 67       ASR   A                  (0391)     asr   A
03DA: 67       ASR   A                  (0392)     asr   A
03DB: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03DD: 90 3B    CALL  0x041A             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
03DF: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03E0: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03E2: 40       NOP                      (0397)     nop
03E3: 40       NOP                      (0398)     nop
03E4: 40       NOP                      (0399)     nop
03E5: 90 33    CALL  0x041A             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03E7: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03E8: 90 51    CALL  0x043B             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
03EA: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03EB: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03EC: 67       ASR   A                  (0436)     asr   A
03ED: 67       ASR   A                  (0437)     asr   A
03EE: 67       ASR   A                  (0438)     asr   A
03EF: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03F1: 90 09    CALL  0x03FC             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
03F3: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03F4: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03F6: 40       NOP                      (0443)     nop
03F7: 40       NOP                      (0444)     nop
03F8: 40       NOP                      (0445)     nop
03F9: 90 01    CALL  0x03FC             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
03FB: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
03FC: 08       PUSH  A                  (0477)     push  A
03FD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0400: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0403: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0405: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0407: 18       POP   A                  (0483)     pop   A
0408: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
040A: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
040C: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
040E: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0410: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0412: 40       NOP                      (0489)     nop
0413: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
0415: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0417: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0419: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
041A: 08       PUSH  A                  (0523)     push  A
041B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
041E: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK
0421: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
0424: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0426: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
0428: 18       POP   A                  (0530)     pop   A
0429: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
042B: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
042D: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
042F: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
0431: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0433: 40       NOP                      (0536)     NOP
0434: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
0436: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0438: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
043A: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
043B: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
043C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
043F: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
0442: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0444: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
0446: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
0449: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
044B: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
044D: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
044F: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0451: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
0454: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0456: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_1_Port],A
0458: 40       NOP                      (0586)     NOP
                                        (0587) 
0459: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
045A: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
045C: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
045F: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0461: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
0463: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0464: 40       NOP                      (0597)     nop
0465: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0467: 08       PUSH  A                  (0610)     push  A
0468: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
046B: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
046D: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
046F: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0470: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0471: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0472: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
0475: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0477: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
0479: 40       NOP                      (0623)     nop
047A: 40       NOP                      (0624)     nop
                                        (0625) 
047B: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
047E: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0480: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
0482: 18       POP   A                  (0630)     pop   A
0483: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0485: A0 04    JZ    0x048A             (0633)     jz    .UNLOCK
0487: 79       DEC   X                  (0634)     dec   X
0488: BF D3    JNZ   0x045C             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
048A: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
048B: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
048E: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0490: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0492: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0494: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0496: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0497: 7F       RET                      (0646)     ret
0498: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
049B: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
049E: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
04A1: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
04A4: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
04A6: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
04A8: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
04AA: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
04AC: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_1_PortMode1],A
04AE: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
04B0: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04B2: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
04B4: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04B6: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
04B8: 50 03    MOV   A,0x3              (0701)     mov   A,03h
04BA: 9F 40    CALL  0x03FC             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
04BC: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
04BE: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
04C0: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04C2: 9F 38    CALL  0x03FC             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
04C4: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
04C6: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
04C8: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
04CA: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04CC: 9F 2E    CALL  0x03FC             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
04CE: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04D0: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
04D2: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04D4: 9F 26    CALL  0x03FC             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
04D6: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04D8: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
04DA: 50 08    MOV   A,0x8              (0726)     mov   A,08h
04DC: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
04DE: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04E0: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
04E2: 50 01    MOV   A,0x1              (0731)     mov   A,01h
04E4: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
04E6: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04E8: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
04EA: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04EC: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
04EE: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04F0: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
04F2: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04F4: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
04F6: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
04F8: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
04FA: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
04FC: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
04FE: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
0500: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
0502: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0504: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0506: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
050B: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
050D: 10       PUSH  X                  (0791)     push  X                            ; Store COL
050E: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
0510: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0511: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0513: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0514: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
0516: 70 3F    AND   F,0x3F             
0518: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
051A: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
051B: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
051D: 78       DEC   A                  (0828)     dec   A
051E: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0520: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0529: 08       PUSH  A                  (0871)     push  A
052A: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
052C: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
052E: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0530: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0532: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0534: D0 06    JNC   0x053B             (0877)     jnc   .Delay50u_End
0536: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0538: 78       DEC   A                  (0880)     dec   A                              ; [4]
0539: BF FE    JNZ   0x0538             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
053B: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
053C: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
053D: 4F       MOV   X,SP               (1015)     mov   X, SP
053E: 10       PUSH  X                  (1016)     push  X
053F: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0541: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
0543: 70 3F    AND   F,0x3F             
0545: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0547: 9F C2    CALL  _LCD_1_Position    (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0549: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
054A: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
054D: B0 05    JNZ   0x0553             (1026)     jnz   .LCD_CHECK1
054F: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0551: 80 11    JMP   0x0563             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0553: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0556: D0 07    JNC   0x055E             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0558: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
055A: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
055C: 80 06    JMP   0x0563             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
055E: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0560: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0563: 9E 6F    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
0565: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0567: BF E2    JNZ   0x054A             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0569: 70 3F    AND   F,0x3F             
056B: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
056D: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
056E: 4F       MOV   X,SP               (1168)     mov   X, SP
056F: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0571: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0573: 08       PUSH  A                  (1172)     push  A
0574: FF 91    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
0576: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0578: 9E 6E    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
057A: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
057D: B0 05    JNZ   0x0583             (1177)     jnz   .VBG_NZ_SEG
057F: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0581: 80 13    JMP   0x0595             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0583: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0586: D0 09    JNC   0x0590             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0588: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
058A: 78       DEC   A                  (1185)     dec   A
058B: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
058E: 80 06    JMP   0x0595             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0590: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0593: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0595: 9E 3D    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(1194)     call  LCD_1_WriteData              ; Write value
0597: 18       POP   A                  (1195)     pop   A
0598: 78       DEC   A                  (1196)     dec   A
0599: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
059B: BF D7    JNZ   0x0573             (1198)     jnz   .VBG_LOOP
059D: 70 3F    AND   F,0x3F             
059F: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
05A1: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
05A2: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
05A3: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
05A4: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
05A5: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
05A7: 9E 3F    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
05A9: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05AC: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05AF: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05B1: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05B3: D0 05    JNC   0x05B9             (1251)     jnc   .VBG_SOLID
05B5: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05B7: 80 03    JMP   0x05BB             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05B9: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05BB: 9E 17    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(1257)     call  LCD_1_WriteData              ; character data
05BD: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05BF: BF EF    JNZ   0x05AF             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
05C1: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
05C3: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
05C6: BF E5    JNZ   0x05AC             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
05C8: 18       POP   A                  (1264)     pop  A
05C9: 18       POP   A                  (1265)     pop  A
05CA: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
05CC: 9E 1A    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
05CE: 70 3F    AND   F,0x3F             
05D0: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
05D2: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
05E1: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
05E2: 38 03    ADD   SP,0x3             (1320)     add   SP,3
05E4: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
05E6: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
05E8: 9D FE    CALL  _LCD_1_Control     (1324)     call  LCD_1_Control                ; Position the CG pointer
05EA: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
05ED: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
05F0: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
05F2: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
05F5: B0 05    JNZ   0x05FB             (1332)     jnz   .BG_OTHER
05F7: FF DA    INDEX LCD_1_BG_TYPE1     (1333)     index LCD_1_BG_TYPE1
05F9: 80 03    JMP   0x05FD             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
05FB: FF DD    INDEX LCD_1_BG_TYPE2     (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
05FD: 9D D5    CALL  _LCD_1_Write_Data|_LCD_1_WriteData|LCD_1_Write_Data|LCD_1_WriteData(1338)     call  LCD_1_WriteData
05FF: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0601: BF EE    JNZ   0x05F0             (1340)     jnz   .BG_Loop2
0603: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0605: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0608: BF E4    JNZ   0x05ED             (1343)     jnz   .BG_Loop1
                                        (1344) 
060A: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
060C: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_1_DISP_ON
060E: 9D D8    CALL  _LCD_1_Control     (1347)     call  LCD_1_Control
0610: 70 3F    AND   F,0x3F             
0612: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0614: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
    0615: 30       HALT  
_bFlashWriteBlock:
    0616: 62 D0 00 MOV   REG[0xD0],0x0
    0619: 53 F8    MOV   [i+2],A
    061B: 5D F7    MOV   A,REG[0xF7]
    061D: 08       PUSH  A
    061E: 21 C0    AND   A,0xC0
    0620: B0 07    JNZ   0x0628
    0622: 56 02 00 MOV   [X+2],0x0
    0625: 55 F8 00 MOV   [i+2],0x0
    0628: 51 F8    MOV   A,[i+2]
    062A: 70 BF    AND   F,0xBF
    062C: 60 D3    MOV   REG[0xD3],A
    062E: 55 FD 01 MOV   [i+7],0x1
    0631: 3C FD 01 CMP   [i+7],0x1
    0634: B0 CE    JNZ   0x0703
    0636: 71 10    OR    F,0x10
    0638: 5D E0    MOV   A,REG[0xE0]
    063A: 08       PUSH  A
    063B: 21 F8    AND   A,0xF8
    063D: 49 FE 10 TST   REG[0xFE],0x10
    0640: A0 05    JZ    0x0646
    0642: 29 03    OR    A,0x3
    0644: 80 03    JMP   0x0648
    0646: 29 02    OR    A,0x2
    0648: 60 E0    MOV   REG[0xE0],A
    064A: 70 EF    AND   F,0xEF
    064C: 62 E3 00 MOV   REG[0xE3],0x0
    064F: 65 FD    ASL   [i+7]
    0651: 3C FD 02 CMP   [i+7],0x2
    0654: B0 AE    JNZ   0x0703
    0656: 90 BF    CALL  0x0717
    0658: 39 00    CMP   A,0x0
    065A: A0 09    JZ    0x0664
    065C: 55 FF 00 MOV   [i+9],0x0
    065F: 55 FD 10 MOV   [i+7],0x10
    0662: 80 8B    JMP   0x06EE
    0664: 62 E3 00 MOV   REG[0xE3],0x0
    0667: 65 FD    ASL   [i+7]
    0669: 52 01    MOV   A,[X+1]
    066B: 6A       RLC   A
    066C: 52 00    MOV   A,[X+0]
    066E: 6A       RLC   A
    066F: 71 10    OR    F,0x10
    0671: 60 FA    MOV   REG[0xFA],A
    0673: 70 EF    AND   F,0xEF
    0675: 08       PUSH  A
    0676: 52 01    MOV   A,[X+1]
    0678: 21 7F    AND   A,0x7F
    067A: 53 FA    MOV   [i+4],A
    067C: 08       PUSH  A
    067D: 52 05    MOV   A,[X+5]
    067F: 53 FC    MOV   [i+6],A
    0681: 55 FE 56 MOV   [i+8],0x56
    0684: 51 FD    MOV   A,[i+7]
    0686: 39 04    CMP   A,0x4
    0688: B0 7A    JNZ   0x0703
    068A: 08       PUSH  A
    068B: 10       PUSH  X
_FlashBlockLocal1:
    068C: 4F       MOV   X,SP
    068D: 5B       MOV   A,X
    068E: 01 03    ADD   A,0x3
    0690: 53 F9    MOV   [i+3],A
    0692: 55 F8 3A MOV   [i+2],0x3A
    0695: 50 03    MOV   A,0x3
    0697: 00       SWI   
    0698: 20       POP   X
    0699: 18       POP   A
    069A: 53 FD    MOV   [i+7],A
    069C: 3C F8 00 CMP   [i+2],0x0
    069F: A0 0B    JZ    0x06AB
    06A1: 55 FF 00 MOV   [i+9],0x0
    06A4: 55 FD 10 MOV   [i+7],0x10
    06A7: 38 FE    ADD   SP,0xFE
    06A9: 80 44    JMP   0x06EE
    06AB: 62 E3 00 MOV   REG[0xE3],0x0
    06AE: 65 FD    ASL   [i+7]
    06B0: 18       POP   A
    06B1: 53 FA    MOV   [i+4],A
    06B3: 18       POP   A
    06B4: 71 10    OR    F,0x10
    06B6: 60 FA    MOV   REG[0xFA],A
    06B8: 70 EF    AND   F,0xEF
    06BA: 52 03    MOV   A,[X+3]
    06BC: 53 FB    MOV   [i+5],A
    06BE: 52 02    MOV   A,[X+2]
    06C0: 60 D4    MOV   REG[0xD4],A
    06C2: 52 06    MOV   A,[X+6]
    06C4: 53 FC    MOV   [i+6],A
    06C6: 55 FE 56 MOV   [i+8],0x56
    06C9: 51 FD    MOV   A,[i+7]
    06CB: 39 08    CMP   A,0x8
    06CD: B0 35    JNZ   0x0703
    06CF: 08       PUSH  A
    06D0: 10       PUSH  X
_FlashBlockLocal2:
    06D1: 4F       MOV   X,SP
    06D2: 5B       MOV   A,X
    06D3: 01 03    ADD   A,0x3
    06D5: 53 F9    MOV   [i+3],A
    06D7: 55 F8 3A MOV   [i+2],0x3A
    06DA: 50 02    MOV   A,0x2
    06DC: 00       SWI   
    06DD: 20       POP   X
    06DE: 18       POP   A
    06DF: 53 FD    MOV   [i+7],A
    06E1: 55 FF 01 MOV   [i+9],0x1
    06E4: 3C F8 00 CMP   [i+2],0x0
    06E7: A0 04    JZ    0x06EC
    06E9: 55 FF 00 MOV   [i+9],0x0
    06EC: 65 FD    ASL   [i+7]
    06EE: 3C FD 10 CMP   [i+7],0x10
    06F1: B0 11    JNZ   0x0703
    06F3: 18       POP   A
    06F4: 71 10    OR    F,0x10
    06F6: 60 E0    MOV   REG[0xE0],A
    06F8: 70 EF    AND   F,0xEF
    06FA: 65 FD    ASL   [i+7]
    06FC: 51 FF    MOV   A,[i+9]
    06FE: 3C FD 20 CMP   [i+7],0x20
    0701: A0 04    JZ    0x0706
    0703: 30       HALT  
    0704: 8F FE    JMP   0x0703
    0706: 70 3F    AND   F,0x3F
    0708: 71 C0    OR    F,0xC0
    070A: 62 D0 00 MOV   REG[0xD0],0x0
    070D: 62 D5 00 MOV   REG[0xD5],0x0
    0710: 62 D4 00 MOV   REG[0xD4],0x0
    0713: 7E       RETI  
    0714: 30       HALT  
    0715: 30       HALT  
    0716: 30       HALT  
    0717: 55 FA 03 MOV   [i+4],0x3
    071A: 62 D5 00 MOV   REG[0xD5],0x0
    071D: 71 10    OR    F,0x10
    071F: 62 FA 00 MOV   REG[0xFA],0x0
    0722: 70 EF    AND   F,0xEF
    0724: 51 FD    MOV   A,[i+7]
    0726: 39 02    CMP   A,0x2
    0728: BF DA    JNZ   0x0703
    072A: 08       PUSH  A
    072B: 10       PUSH  X
_FlashBlockLocal3:
    072C: 4F       MOV   X,SP
    072D: 5B       MOV   A,X
    072E: 01 03    ADD   A,0x3
    0730: 53 F9    MOV   [i+3],A
    0732: 55 F8 3A MOV   [i+2],0x3A
    0735: 50 06    MOV   A,0x6
    0737: 00       SWI   
    0738: 20       POP   X
    0739: 3C FF 01 CMP   [i+9],0x1
    073C: B0 75    JNZ   0x07B2
    073E: 10       PUSH  X
    073F: 5D D3    MOV   A,REG[0xD3]
    0741: 08       PUSH  A
    0742: 52 04    MOV   A,[X+4]
    0744: 60 E8    MOV   REG[0xE8],A
    0746: 21 80    AND   A,0x80
    0748: B0 09    JNZ   0x0752
    074A: 51 FD    MOV   A,[i+7]
    074C: 54 07    MOV   [X+7],A
    074E: 57 FB    MOV   X,0xFB
    0750: 80 07    JMP   0x0758
    0752: 51 FA    MOV   A,[i+4]
    0754: 54 07    MOV   [X+7],A
    0756: 57 F8    MOV   X,0xF8
    0758: 62 D3 00 MOV   REG[0xD3],0x0
    075B: 52 00    MOV   A,[X+0]
    075D: 60 E9    MOV   REG[0xE9],A
    075F: 5D EB    MOV   A,REG[0xEB]
    0761: 64       ASL   A
    0762: 5D EA    MOV   A,REG[0xEA]
    0764: 6A       RLC   A
    0765: 73       CPL   A
    0766: 74       INC   A
    0767: 03 01    ADD   A,[X+1]
    0769: 53 FE    MOV   [i+8],A
    076B: 21 7F    AND   A,0x7F
    076D: 60 E8    MOV   REG[0xE8],A
    076F: 52 02    MOV   A,[X+2]
    0771: 67       ASR   A
    0772: 21 7F    AND   A,0x7F
    0774: 60 E9    MOV   REG[0xE9],A
    0776: 5D EA    MOV   A,REG[0xEA]
    0778: 53 FF    MOV   [i+9],A
    077A: 5D EB    MOV   A,REG[0xEB]
    077C: 64       ASL   A
    077D: 6B FF    RLC   [i+9]
    077F: 48 02 01 TST   [X+2],0x1
    0782: A0 06    JZ    0x0789
    0784: 02 FE    ADD   A,[i+8]
    0786: 0E FF 00 ADC   [i+9],0x0
    0789: 64       ASL   A
    078A: 6B FF    RLC   [i+9]
    078C: 64       ASL   A
    078D: 6B FF    RLC   [i+9]
    078F: 18       POP   A
    0790: 60 D3    MOV   REG[0xD3],A
    0792: 51 FF    MOV   A,[i+9]
    0794: 20       POP   X
    0795: 54 06    MOV   [X+6],A
    0797: 51 FE    MOV   A,[i+8]
    0799: 54 05    MOV   [X+5],A
    079B: 49 FE 10 TST   REG[0xFE],0x10
    079E: A0 09    JZ    0x07A8
    07A0: 69 06    ASR   [X+6]
    07A2: 77 06    INC   [X+6]
    07A4: 69 05    ASR   [X+5]
    07A6: 77 05    INC   [X+5]
    07A8: 18       POP   A
    07A9: 39 02    CMP   A,0x2
    07AB: BF 57    JNZ   0x0703
    07AD: 53 FD    MOV   [i+7],A
    07AF: 50 00    MOV   A,0x0
    07B1: 7F       RET   
    07B2: 18       POP   A
    07B3: 39 02    CMP   A,0x2
    07B5: BF 4D    JNZ   0x0703
    07B7: 53 FD    MOV   [i+7],A
    07B9: 50 01    MOV   A,0x1
    07BB: 7F       RET   
_FlashReadBlock:
    07BC: 62 D0 00 MOV   REG[0xD0],0x0
    07BF: 53 F8    MOV   [i+2],A
    07C1: 5D F7    MOV   A,REG[0xF7]
    07C3: 08       PUSH  A
    07C4: 21 C0    AND   A,0xC0
    07C6: B0 07    JNZ   0x07CE
    07C8: 56 02 00 MOV   [X+2],0x0
    07CB: 55 F8 00 MOV   [i+2],0x0
    07CE: 51 F8    MOV   A,[i+2]
    07D0: 70 BF    AND   F,0xBF
    07D2: 60 D3    MOV   REG[0xD3],A
    07D4: 52 03    MOV   A,[X+3]
    07D6: 53 FB    MOV   [i+5],A
    07D8: 52 02    MOV   A,[X+2]
    07DA: 60 D5    MOV   REG[0xD5],A
    07DC: 52 04    MOV   A,[X+4]
    07DE: 74       INC   A
    07DF: 53 FD    MOV   [i+7],A
    07E1: 52 05    MOV   A,[X+5]
    07E3: 53 FE    MOV   [i+8],A
    07E5: 52 01    MOV   A,[X+1]
    07E7: 64       ASL   A
    07E8: 6C 00    RLC   [X+0]
    07EA: 64       ASL   A
    07EB: 6C 00    RLC   [X+0]
    07ED: 64       ASL   A
    07EE: 6C 00    RLC   [X+0]
    07F0: 64       ASL   A
    07F1: 6C 00    RLC   [X+0]
    07F3: 64       ASL   A
    07F4: 6C 00    RLC   [X+0]
    07F6: 64       ASL   A
    07F7: 6C 00    RLC   [X+0]
    07F9: 08       PUSH  A
    07FA: 52 00    MOV   A,[X+0]
    07FC: 20       POP   X
    07FD: 08       PUSH  A
    07FE: 28       ROMX  
    07FF: 3F FB    MVI   [i+5],A
    0801: 18       POP   A
    0802: 75       INC   X
    0803: B0 02    JNZ   0x0806
    0805: 74       INC   A
    0806: 7A FE    DEC   [i+8]
    0808: B0 05    JNZ   0x080E
    080A: 7A FD    DEC   [i+7]
    080C: A0 0F    JZ    0x081C
    080E: 3C FB 00 CMP   [i+5],0x0
    0811: BF EB    JNZ   0x07FD
    0813: 08       PUSH  A
    0814: 5D D5    MOV   A,REG[0xD5]
    0816: 74       INC   A
    0817: 60 D5    MOV   REG[0xD5],A
    0819: 18       POP   A
    081A: 8F E2    JMP   0x07FD
    081C: 70 3F    AND   F,0x3F
    081E: 71 C0    OR    F,0xC0
    0820: 62 D0 00 MOV   REG[0xD0],0x0
    0823: 62 D5 00 MOV   REG[0xD5],0x0
    0826: 7E       RETI  
FILE: F:\HARDWA~1\Project2\HWSW_P~1\HWSW_P~1\HWSW_P~1\fft.h
(0001) #include "math.h"				 //mathematical library
(0002) 
(0003) // FFT parameters
(0004) #define N_points 8              //number of points				
(0005) #define exponent log(8)/log(2)  //log2(N_points); for N_points=64 -> exponent=6
(0006) 
(0007) // FFT variables
(0008) double mod[N_points]={0};        //arrays
(0009) double data_re[N_points]={0};
(0010) double data_imm[N_points]={0};
(0011) 
(0012) double save_data_re[N_points]={0};
(0013) double save_data_imm[N_points]={0};
(0014) 
(0015) 
(0016) 
(0017) short FFT(int dir,long m,double *x,double *y)
(0018) {
__UserModules_end|__text_start|_FFT|_FFT:
  ty                   --> X+68
  tx                   --> X+64
  i2                   --> X+60
  l                    --> X+56
  z                    --> X+52
  c2                   --> X+48
  c1                   --> X+44
  k                    --> X+40
  j                    --> X+36
  l2                   --> X+32
  n                    --> X+28
  l1                   --> X+24
  u2                   --> X+20
  u1                   --> X+16
  t2                   --> X+12
  t1                   --> X+8
  i1                   --> X+4
  i                    --> X+0
  y                    --> X-13
  x                    --> X-11
  m                    --> X-9
  dir                  --> X-5
    0827: 10       PUSH  X
    0828: 4F       MOV   X,SP
    0829: 38 4A    ADD   SP,0x4A
(0019)    // dir:  forward (=1) o inverse (!=1) transform; 
(0020)    // m exponent;
(0021)    
(0022)    long n,i,i1,j,k,i2,l,l1,l2;
(0023)    double c1,c2,tx,ty,t1,t2,u1,u2,z;
(0024) 
(0025)    /* Calculate the number of points */
(0026)    n = 1;
    082B: 56 1C 00 MOV   [X+28],0x0
    082E: 56 1D 00 MOV   [X+29],0x0
    0831: 56 1E 00 MOV   [X+30],0x0
    0834: 56 1F 01 MOV   [X+31],0x1
(0027)    for (i=0;i<m;i++) 
    0837: 56 00 00 MOV   [X+0],0x0
    083A: 56 01 00 MOV   [X+1],0x0
    083D: 56 02 00 MOV   [X+2],0x0
    0840: 56 03 00 MOV   [X+3],0x0
    0843: 80 15    JMP   0x0859
(0028)       n *= 2;
    0845: 66 1F    ASL   [X+31]
    0847: 6C 1E    RLC   [X+30]
    0849: 6C 1D    RLC   [X+29]
    084B: 6C 1C    RLC   [X+28]
    084D: 07 03 01 ADD   [X+3],0x1
    0850: 0F 02 00 ADC   [X+2],0x0
    0853: 0F 01 00 ADC   [X+1],0x0
    0856: 0F 00 00 ADC   [X+0],0x0
    0859: 52 03    MOV   A,[X+3]
    085B: 13 FA    SUB   A,[X-6]
    085D: 52 02    MOV   A,[X+2]
    085F: 1B F9    SBB   A,[X-7]
    0861: 52 01    MOV   A,[X+1]
    0863: 1B F8    SBB   A,[X-8]
    0865: 52 F7    MOV   A,[X-9]
    0867: 31 80    XOR   A,0x80
    0869: 62 D0 05 MOV   REG[0xD0],0x5
    086C: 53 22    MOV   [__rX],A
    086E: 52 00    MOV   A,[X+0]
    0870: 31 80    XOR   A,0x80
    0872: 1A 22    SBB   A,[__rX]
    0874: CF D0    JC    0x0845
(0029) 
(0030)    /* Do the bit reversal */
(0031)    i2 = n >> 1;
    0876: 62 D0 05 MOV   REG[0xD0],0x5
    0879: 52 1C    MOV   A,[X+28]
    087B: 53 2E    MOV   [__r0],A
    087D: 52 1D    MOV   A,[X+29]
    087F: 53 2D    MOV   [__r1],A
    0881: 52 1E    MOV   A,[X+30]
    0883: 53 2C    MOV   [__r2],A
    0885: 52 1F    MOV   A,[X+31]
    0887: 53 2B    MOV   [__r3],A
    0889: 68 2E    ASR   [__r0]
    088B: 6E 2D    RRC   [__r1]
    088D: 6E 2C    RRC   [__r2]
    088F: 6E 2B    RRC   [__r3]
    0891: 51 2E    MOV   A,[__r0]
    0893: 54 3C    MOV   [X+60],A
    0895: 51 2D    MOV   A,[__r1]
    0897: 54 3D    MOV   [X+61],A
    0899: 51 2C    MOV   A,[__r2]
    089B: 54 3E    MOV   [X+62],A
    089D: 51 2B    MOV   A,[__r3]
    089F: 54 3F    MOV   [X+63],A
(0032)    j = 0;
    08A1: 56 24 00 MOV   [X+36],0x0
    08A4: 56 25 00 MOV   [X+37],0x0
    08A7: 56 26 00 MOV   [X+38],0x0
    08AA: 56 27 00 MOV   [X+39],0x0
(0033)    for (i=0;i<n-1;i++) {
    08AD: 56 00 00 MOV   [X+0],0x0
    08B0: 56 01 00 MOV   [X+1],0x0
    08B3: 56 02 00 MOV   [X+2],0x0
    08B6: 56 03 00 MOV   [X+3],0x0
    08B9: 82 A4    JMP   0x0B5E
(0034)       if (i < j) {
    08BB: 52 03    MOV   A,[X+3]
    08BD: 13 27    SUB   A,[X+39]
    08BF: 52 02    MOV   A,[X+2]
    08C1: 1B 26    SBB   A,[X+38]
    08C3: 52 01    MOV   A,[X+1]
    08C5: 1B 25    SBB   A,[X+37]
    08C7: 52 24    MOV   A,[X+36]
    08C9: 31 80    XOR   A,0x80
    08CB: 62 D0 05 MOV   REG[0xD0],0x5
    08CE: 53 22    MOV   [__rX],A
    08D0: 52 00    MOV   A,[X+0]
    08D2: 31 80    XOR   A,0x80
    08D4: 1A 22    SBB   A,[__rX]
    08D6: D2 24    JNC   0x0AFB
(0035)          tx = x[i];
    08D8: 62 D0 05 MOV   REG[0xD0],0x5
    08DB: 52 00    MOV   A,[X+0]
    08DD: 53 2E    MOV   [__r0],A
    08DF: 52 01    MOV   A,[X+1]
    08E1: 53 2D    MOV   [__r1],A
    08E3: 52 02    MOV   A,[X+2]
    08E5: 53 2C    MOV   [__r2],A
    08E7: 52 03    MOV   A,[X+3]
    08E9: 53 2B    MOV   [__r3],A
    08EB: 50 02    MOV   A,0x2
    08ED: 62 D0 05 MOV   REG[0xD0],0x5
    08F0: 65 2B    ASL   [__r3]
    08F2: 6B 2C    RLC   [__r2]
    08F4: 6B 2D    RLC   [__r1]
    08F6: 6B 2E    RLC   [__r0]
    08F8: 78       DEC   A
    08F9: BF F3    JNZ   0x08ED
    08FB: 51 2B    MOV   A,[__r3]
    08FD: 53 2D    MOV   [__r1],A
    08FF: 51 2C    MOV   A,[__r2]
    0901: 53 2E    MOV   [__r0],A
    0903: 52 F6    MOV   A,[X-10]
    0905: 04 2D    ADD   [__r1],A
    0907: 52 F5    MOV   A,[X-11]
    0909: 0C 2E    ADC   [__r0],A
    090B: 51 2E    MOV   A,[__r0]
    090D: 60 D4    MOV   REG[0xD4],A
    090F: 3E 2D    MVI   A,[__r1]
    0911: 54 40    MOV   [X+64],A
    0913: 3E 2D    MVI   A,[__r1]
    0915: 54 41    MOV   [X+65],A
    0917: 3E 2D    MVI   A,[__r1]
    0919: 54 42    MOV   [X+66],A
    091B: 3E 2D    MVI   A,[__r1]
    091D: 54 43    MOV   [X+67],A
(0036)          ty = y[i];
    091F: 52 00    MOV   A,[X+0]
    0921: 53 2E    MOV   [__r0],A
    0923: 52 01    MOV   A,[X+1]
    0925: 53 2D    MOV   [__r1],A
    0927: 52 02    MOV   A,[X+2]
    0929: 53 2C    MOV   [__r2],A
    092B: 52 03    MOV   A,[X+3]
    092D: 53 2B    MOV   [__r3],A
    092F: 50 02    MOV   A,0x2
    0931: 62 D0 05 MOV   REG[0xD0],0x5
    0934: 65 2B    ASL   [__r3]
    0936: 6B 2C    RLC   [__r2]
    0938: 6B 2D    RLC   [__r1]
    093A: 6B 2E    RLC   [__r0]
    093C: 78       DEC   A
    093D: BF F3    JNZ   0x0931
    093F: 51 2B    MOV   A,[__r3]
    0941: 53 2D    MOV   [__r1],A
    0943: 51 2C    MOV   A,[__r2]
    0945: 53 2E    MOV   [__r0],A
    0947: 52 F4    MOV   A,[X-12]
    0949: 04 2D    ADD   [__r1],A
    094B: 52 F3    MOV   A,[X-13]
    094D: 0C 2E    ADC   [__r0],A
    094F: 51 2E    MOV   A,[__r0]
    0951: 60 D4    MOV   REG[0xD4],A
    0953: 3E 2D    MVI   A,[__r1]
    0955: 54 44    MOV   [X+68],A
    0957: 3E 2D    MVI   A,[__r1]
    0959: 54 45    MOV   [X+69],A
    095B: 3E 2D    MVI   A,[__r1]
    095D: 54 46    MOV   [X+70],A
    095F: 3E 2D    MVI   A,[__r1]
    0961: 54 47    MOV   [X+71],A
(0037)          x[i] = x[j];
    0963: 52 24    MOV   A,[X+36]
    0965: 53 2E    MOV   [__r0],A
    0967: 52 25    MOV   A,[X+37]
    0969: 53 2D    MOV   [__r1],A
    096B: 52 26    MOV   A,[X+38]
    096D: 53 2C    MOV   [__r2],A
    096F: 52 27    MOV   A,[X+39]
    0971: 53 2B    MOV   [__r3],A
    0973: 50 02    MOV   A,0x2
    0975: 62 D0 05 MOV   REG[0xD0],0x5
    0978: 65 2B    ASL   [__r3]
    097A: 6B 2C    RLC   [__r2]
    097C: 6B 2D    RLC   [__r1]
    097E: 6B 2E    RLC   [__r0]
    0980: 78       DEC   A
    0981: BF F3    JNZ   0x0975
    0983: 51 2B    MOV   A,[__r3]
    0985: 53 2D    MOV   [__r1],A
    0987: 51 2C    MOV   A,[__r2]
    0989: 53 2E    MOV   [__r0],A
    098B: 52 F6    MOV   A,[X-10]
    098D: 04 2D    ADD   [__r1],A
    098F: 52 F5    MOV   A,[X-11]
    0991: 0C 2E    ADC   [__r0],A
    0993: 51 2E    MOV   A,[__r0]
    0995: 60 D4    MOV   REG[0xD4],A
    0997: 3E 2D    MVI   A,[__r1]
    0999: 53 2A    MOV   [__r4],A
    099B: 3E 2D    MVI   A,[__r1]
    099D: 53 29    MOV   [__r5],A
    099F: 3E 2D    MVI   A,[__r1]
    09A1: 53 28    MOV   [__r6],A
    09A3: 3E 2D    MVI   A,[__r1]
    09A5: 53 27    MOV   [__r7],A
    09A7: 52 00    MOV   A,[X+0]
    09A9: 53 2E    MOV   [__r0],A
    09AB: 52 01    MOV   A,[X+1]
    09AD: 53 2D    MOV   [__r1],A
    09AF: 52 02    MOV   A,[X+2]
    09B1: 53 2C    MOV   [__r2],A
    09B3: 52 03    MOV   A,[X+3]
    09B5: 53 2B    MOV   [__r3],A
    09B7: 50 02    MOV   A,0x2
    09B9: 62 D0 05 MOV   REG[0xD0],0x5
    09BC: 65 2B    ASL   [__r3]
    09BE: 6B 2C    RLC   [__r2]
    09C0: 6B 2D    RLC   [__r1]
    09C2: 6B 2E    RLC   [__r0]
    09C4: 78       DEC   A
    09C5: BF F3    JNZ   0x09B9
    09C7: 51 2B    MOV   A,[__r3]
    09C9: 53 2D    MOV   [__r1],A
    09CB: 51 2C    MOV   A,[__r2]
    09CD: 53 2E    MOV   [__r0],A
    09CF: 52 F6    MOV   A,[X-10]
    09D1: 04 2D    ADD   [__r1],A
    09D3: 52 F5    MOV   A,[X-11]
    09D5: 0C 2E    ADC   [__r0],A
    09D7: 51 2E    MOV   A,[__r0]
    09D9: 60 D5    MOV   REG[0xD5],A
    09DB: 51 2A    MOV   A,[__r4]
    09DD: 3F 2D    MVI   [__r1],A
    09DF: 51 29    MOV   A,[__r5]
    09E1: 3F 2D    MVI   [__r1],A
    09E3: 51 28    MOV   A,[__r6]
    09E5: 3F 2D    MVI   [__r1],A
    09E7: 51 27    MOV   A,[__r7]
    09E9: 3F 2D    MVI   [__r1],A
(0038)          y[i] = y[j];
    09EB: 52 24    MOV   A,[X+36]
    09ED: 53 2E    MOV   [__r0],A
    09EF: 52 25    MOV   A,[X+37]
    09F1: 53 2D    MOV   [__r1],A
    09F3: 52 26    MOV   A,[X+38]
    09F5: 53 2C    MOV   [__r2],A
    09F7: 52 27    MOV   A,[X+39]
    09F9: 53 2B    MOV   [__r3],A
    09FB: 50 02    MOV   A,0x2
    09FD: 62 D0 05 MOV   REG[0xD0],0x5
    0A00: 65 2B    ASL   [__r3]
    0A02: 6B 2C    RLC   [__r2]
    0A04: 6B 2D    RLC   [__r1]
    0A06: 6B 2E    RLC   [__r0]
    0A08: 78       DEC   A
    0A09: BF F3    JNZ   0x09FD
    0A0B: 51 2B    MOV   A,[__r3]
    0A0D: 53 2D    MOV   [__r1],A
    0A0F: 51 2C    MOV   A,[__r2]
    0A11: 53 2E    MOV   [__r0],A
    0A13: 52 F4    MOV   A,[X-12]
    0A15: 04 2D    ADD   [__r1],A
    0A17: 52 F3    MOV   A,[X-13]
    0A19: 0C 2E    ADC   [__r0],A
    0A1B: 51 2E    MOV   A,[__r0]
    0A1D: 60 D4    MOV   REG[0xD4],A
    0A1F: 3E 2D    MVI   A,[__r1]
    0A21: 53 2A    MOV   [__r4],A
    0A23: 3E 2D    MVI   A,[__r1]
    0A25: 53 29    MOV   [__r5],A
    0A27: 3E 2D    MVI   A,[__r1]
    0A29: 53 28    MOV   [__r6],A
    0A2B: 3E 2D    MVI   A,[__r1]
    0A2D: 53 27    MOV   [__r7],A
    0A2F: 52 00    MOV   A,[X+0]
    0A31: 53 2E    MOV   [__r0],A
    0A33: 52 01    MOV   A,[X+1]
    0A35: 53 2D    MOV   [__r1],A
    0A37: 52 02    MOV   A,[X+2]
    0A39: 53 2C    MOV   [__r2],A
    0A3B: 52 03    MOV   A,[X+3]
    0A3D: 53 2B    MOV   [__r3],A
    0A3F: 50 02    MOV   A,0x2
    0A41: 62 D0 05 MOV   REG[0xD0],0x5
    0A44: 65 2B    ASL   [__r3]
    0A46: 6B 2C    RLC   [__r2]
    0A48: 6B 2D    RLC   [__r1]
    0A4A: 6B 2E    RLC   [__r0]
    0A4C: 78       DEC   A
    0A4D: BF F3    JNZ   0x0A41
    0A4F: 51 2B    MOV   A,[__r3]
    0A51: 53 2D    MOV   [__r1],A
    0A53: 51 2C    MOV   A,[__r2]
    0A55: 53 2E    MOV   [__r0],A
    0A57: 52 F4    MOV   A,[X-12]
    0A59: 04 2D    ADD   [__r1],A
    0A5B: 52 F3    MOV   A,[X-13]
    0A5D: 0C 2E    ADC   [__r0],A
    0A5F: 51 2E    MOV   A,[__r0]
    0A61: 60 D5    MOV   REG[0xD5],A
    0A63: 51 2A    MOV   A,[__r4]
    0A65: 3F 2D    MVI   [__r1],A
    0A67: 51 29    MOV   A,[__r5]
    0A69: 3F 2D    MVI   [__r1],A
    0A6B: 51 28    MOV   A,[__r6]
    0A6D: 3F 2D    MVI   [__r1],A
    0A6F: 51 27    MOV   A,[__r7]
    0A71: 3F 2D    MVI   [__r1],A
(0039)          x[j] = tx;
    0A73: 52 24    MOV   A,[X+36]
    0A75: 53 2E    MOV   [__r0],A
    0A77: 52 25    MOV   A,[X+37]
    0A79: 53 2D    MOV   [__r1],A
    0A7B: 52 26    MOV   A,[X+38]
    0A7D: 53 2C    MOV   [__r2],A
    0A7F: 52 27    MOV   A,[X+39]
    0A81: 53 2B    MOV   [__r3],A
    0A83: 50 02    MOV   A,0x2
    0A85: 62 D0 05 MOV   REG[0xD0],0x5
    0A88: 65 2B    ASL   [__r3]
    0A8A: 6B 2C    RLC   [__r2]
    0A8C: 6B 2D    RLC   [__r1]
    0A8E: 6B 2E    RLC   [__r0]
    0A90: 78       DEC   A
    0A91: BF F3    JNZ   0x0A85
    0A93: 51 2B    MOV   A,[__r3]
    0A95: 53 2D    MOV   [__r1],A
    0A97: 51 2C    MOV   A,[__r2]
    0A99: 53 2E    MOV   [__r0],A
    0A9B: 52 F6    MOV   A,[X-10]
    0A9D: 04 2D    ADD   [__r1],A
    0A9F: 52 F5    MOV   A,[X-11]
    0AA1: 0C 2E    ADC   [__r0],A
    0AA3: 51 2E    MOV   A,[__r0]
    0AA5: 60 D5    MOV   REG[0xD5],A
    0AA7: 52 40    MOV   A,[X+64]
    0AA9: 3F 2D    MVI   [__r1],A
    0AAB: 52 41    MOV   A,[X+65]
    0AAD: 3F 2D    MVI   [__r1],A
    0AAF: 52 42    MOV   A,[X+66]
    0AB1: 3F 2D    MVI   [__r1],A
    0AB3: 52 43    MOV   A,[X+67]
    0AB5: 3F 2D    MVI   [__r1],A
(0040)          y[j] = ty;
    0AB7: 52 24    MOV   A,[X+36]
    0AB9: 53 2E    MOV   [__r0],A
    0ABB: 52 25    MOV   A,[X+37]
    0ABD: 53 2D    MOV   [__r1],A
    0ABF: 52 26    MOV   A,[X+38]
    0AC1: 53 2C    MOV   [__r2],A
    0AC3: 52 27    MOV   A,[X+39]
    0AC5: 53 2B    MOV   [__r3],A
    0AC7: 50 02    MOV   A,0x2
    0AC9: 62 D0 05 MOV   REG[0xD0],0x5
    0ACC: 65 2B    ASL   [__r3]
    0ACE: 6B 2C    RLC   [__r2]
    0AD0: 6B 2D    RLC   [__r1]
    0AD2: 6B 2E    RLC   [__r0]
    0AD4: 78       DEC   A
    0AD5: BF F3    JNZ   0x0AC9
    0AD7: 51 2B    MOV   A,[__r3]
    0AD9: 53 2D    MOV   [__r1],A
    0ADB: 51 2C    MOV   A,[__r2]
    0ADD: 53 2E    MOV   [__r0],A
    0ADF: 52 F4    MOV   A,[X-12]
    0AE1: 04 2D    ADD   [__r1],A
    0AE3: 52 F3    MOV   A,[X-13]
    0AE5: 0C 2E    ADC   [__r0],A
    0AE7: 51 2E    MOV   A,[__r0]
    0AE9: 60 D5    MOV   REG[0xD5],A
    0AEB: 52 44    MOV   A,[X+68]
    0AED: 3F 2D    MVI   [__r1],A
    0AEF: 52 45    MOV   A,[X+69]
    0AF1: 3F 2D    MVI   [__r1],A
    0AF3: 52 46    MOV   A,[X+70]
    0AF5: 3F 2D    MVI   [__r1],A
    0AF7: 52 47    MOV   A,[X+71]
    0AF9: 3F 2D    MVI   [__r1],A
(0041)       }
(0042)       k = i2;
    0AFB: 52 3C    MOV   A,[X+60]
    0AFD: 54 28    MOV   [X+40],A
    0AFF: 52 3D    MOV   A,[X+61]
    0B01: 54 29    MOV   [X+41],A
    0B03: 52 3E    MOV   A,[X+62]
    0B05: 54 2A    MOV   [X+42],A
    0B07: 52 3F    MOV   A,[X+63]
    0B09: 54 2B    MOV   [X+43],A
    0B0B: 80 19    JMP   0x0B25
(0043)       while (k <= j) {
(0044)          j -= k;
    0B0D: 52 2B    MOV   A,[X+43]
    0B0F: 15 27    SUB   [X+39],A
    0B11: 52 2A    MOV   A,[X+42]
    0B13: 1D 26    SBB   [X+38],A
    0B15: 52 29    MOV   A,[X+41]
    0B17: 1D 25    SBB   [X+37],A
    0B19: 52 28    MOV   A,[X+40]
    0B1B: 1D 24    SBB   [X+36],A
(0045)          k >>= 1;
    0B1D: 69 28    ASR   [X+40]
    0B1F: 6F 29    RRC   [X+41]
    0B21: 6F 2A    RRC   [X+42]
    0B23: 6F 2B    RRC   [X+43]
(0046)       }
    0B25: 52 27    MOV   A,[X+39]
    0B27: 13 2B    SUB   A,[X+43]
    0B29: 52 26    MOV   A,[X+38]
    0B2B: 1B 2A    SBB   A,[X+42]
    0B2D: 52 25    MOV   A,[X+37]
    0B2F: 1B 29    SBB   A,[X+41]
    0B31: 52 28    MOV   A,[X+40]
    0B33: 31 80    XOR   A,0x80
    0B35: 62 D0 05 MOV   REG[0xD0],0x5
    0B38: 53 22    MOV   [__rX],A
    0B3A: 52 24    MOV   A,[X+36]
    0B3C: 31 80    XOR   A,0x80
    0B3E: 1A 22    SBB   A,[__rX]
    0B40: DF CC    JNC   0x0B0D
(0047)       j += k;
    0B42: 52 2B    MOV   A,[X+43]
    0B44: 05 27    ADD   [X+39],A
    0B46: 52 2A    MOV   A,[X+42]
    0B48: 0D 26    ADC   [X+38],A
    0B4A: 52 29    MOV   A,[X+41]
    0B4C: 0D 25    ADC   [X+37],A
    0B4E: 52 28    MOV   A,[X+40]
    0B50: 0D 24    ADC   [X+36],A
(0048)    }
    0B52: 07 03 01 ADD   [X+3],0x1
    0B55: 0F 02 00 ADC   [X+2],0x0
    0B58: 0F 01 00 ADC   [X+1],0x0
    0B5B: 0F 00 00 ADC   [X+0],0x0
    0B5E: 62 D0 05 MOV   REG[0xD0],0x5
    0B61: 52 1F    MOV   A,[X+31]
    0B63: 11 01    SUB   A,0x1
    0B65: 53 2B    MOV   [__r3],A
    0B67: 52 1E    MOV   A,[X+30]
    0B69: 19 00    SBB   A,0x0
    0B6B: 53 2C    MOV   [__r2],A
    0B6D: 52 1D    MOV   A,[X+29]
    0B6F: 19 00    SBB   A,0x0
    0B71: 53 2D    MOV   [__r1],A
    0B73: 52 1C    MOV   A,[X+28]
    0B75: 19 00    SBB   A,0x0
    0B77: 53 2E    MOV   [__r0],A
    0B79: 52 03    MOV   A,[X+3]
    0B7B: 12 2B    SUB   A,[__r3]
    0B7D: 52 02    MOV   A,[X+2]
    0B7F: 1A 2C    SBB   A,[__r2]
    0B81: 52 01    MOV   A,[X+1]
    0B83: 1A 2D    SBB   A,[__r1]
    0B85: 51 2E    MOV   A,[__r0]
    0B87: 31 80    XOR   A,0x80
    0B89: 53 22    MOV   [__rX],A
    0B8B: 52 00    MOV   A,[X+0]
    0B8D: 31 80    XOR   A,0x80
    0B8F: 1A 22    SBB   A,[__rX]
    0B91: CD 29    JC    0x08BB
(0049) 
(0050)    /* Compute the FFT */
(0051)    c1 = -1.0; 
    0B93: 56 2C BF MOV   [X+44],0xBF
    0B96: 56 2D 80 MOV   [X+45],0x80
    0B99: 56 2E 00 MOV   [X+46],0x0
    0B9C: 56 2F 00 MOV   [X+47],0x0
(0052)    c2 = 0.0;
    0B9F: 56 30 00 MOV   [X+48],0x0
    0BA2: 56 31 00 MOV   [X+49],0x0
    0BA5: 56 32 00 MOV   [X+50],0x0
    0BA8: 56 33 00 MOV   [X+51],0x0
(0053)    l2 = 1;
    0BAB: 56 20 00 MOV   [X+32],0x0
    0BAE: 56 21 00 MOV   [X+33],0x0
    0BB1: 56 22 00 MOV   [X+34],0x0
    0BB4: 56 23 01 MOV   [X+35],0x1
(0054)    for (l=0;l<m;l++) {
    0BB7: 56 38 00 MOV   [X+56],0x0
    0BBA: 56 39 00 MOV   [X+57],0x0
    0BBD: 56 3A 00 MOV   [X+58],0x0
    0BC0: 56 3B 00 MOV   [X+59],0x0
    0BC3: 86 E2    JMP   0x12A6
(0055)       l1 = l2;
    0BC5: 52 20    MOV   A,[X+32]
    0BC7: 54 18    MOV   [X+24],A
    0BC9: 52 21    MOV   A,[X+33]
    0BCB: 54 19    MOV   [X+25],A
    0BCD: 52 22    MOV   A,[X+34]
    0BCF: 54 1A    MOV   [X+26],A
    0BD1: 52 23    MOV   A,[X+35]
    0BD3: 54 1B    MOV   [X+27],A
(0056)       l2 <<= 1;
    0BD5: 66 23    ASL   [X+35]
    0BD7: 6C 22    RLC   [X+34]
    0BD9: 6C 21    RLC   [X+33]
    0BDB: 6C 20    RLC   [X+32]
(0057)       u1 = 1.0; 
    0BDD: 56 10 3F MOV   [X+16],0x3F
    0BE0: 56 11 80 MOV   [X+17],0x80
    0BE3: 56 12 00 MOV   [X+18],0x0
    0BE6: 56 13 00 MOV   [X+19],0x0
(0058)       u2 = 0.0;
    0BE9: 56 14 00 MOV   [X+20],0x0
    0BEC: 56 15 00 MOV   [X+21],0x0
    0BEF: 56 16 00 MOV   [X+22],0x0
    0BF2: 56 17 00 MOV   [X+23],0x0
(0059)       for (j=0;j<l1;j++) {
    0BF5: 56 24 00 MOV   [X+36],0x0
    0BF8: 56 25 00 MOV   [X+37],0x0
    0BFB: 56 26 00 MOV   [X+38],0x0
    0BFE: 56 27 00 MOV   [X+39],0x0
    0C01: 85 90    JMP   0x1192
(0060)          for (i=j;i<n;i+=l2) {
    0C03: 52 24    MOV   A,[X+36]
    0C05: 54 00    MOV   [X+0],A
    0C07: 52 25    MOV   A,[X+37]
    0C09: 54 01    MOV   [X+1],A
    0C0B: 52 26    MOV   A,[X+38]
    0C0D: 54 02    MOV   [X+2],A
    0C0F: 52 27    MOV   A,[X+39]
    0C11: 54 03    MOV   [X+3],A
    0C13: 84 4C    JMP   0x1060
(0061)             i1 = i + l1;
    0C15: 52 03    MOV   A,[X+3]
    0C17: 03 1B    ADD   A,[X+27]
    0C19: 54 07    MOV   [X+7],A
    0C1B: 52 02    MOV   A,[X+2]
    0C1D: 0B 1A    ADC   A,[X+26]
    0C1F: 54 06    MOV   [X+6],A
    0C21: 52 01    MOV   A,[X+1]
    0C23: 0B 19    ADC   A,[X+25]
    0C25: 54 05    MOV   [X+5],A
    0C27: 52 00    MOV   A,[X+0]
    0C29: 0B 18    ADC   A,[X+24]
    0C2B: 54 04    MOV   [X+4],A
(0062)             t1 = u1 * x[i1] - u2 * y[i1];
    0C2D: 62 D0 05 MOV   REG[0xD0],0x5
    0C30: 52 04    MOV   A,[X+4]
    0C32: 53 2E    MOV   [__r0],A
    0C34: 52 05    MOV   A,[X+5]
    0C36: 53 2D    MOV   [__r1],A
    0C38: 52 06    MOV   A,[X+6]
    0C3A: 53 2C    MOV   [__r2],A
    0C3C: 52 07    MOV   A,[X+7]
    0C3E: 53 2B    MOV   [__r3],A
    0C40: 50 02    MOV   A,0x2
    0C42: 62 D0 05 MOV   REG[0xD0],0x5
    0C45: 65 2B    ASL   [__r3]
    0C47: 6B 2C    RLC   [__r2]
    0C49: 6B 2D    RLC   [__r1]
    0C4B: 6B 2E    RLC   [__r0]
    0C4D: 78       DEC   A
    0C4E: BF F3    JNZ   0x0C42
    0C50: 51 2B    MOV   A,[__r3]
    0C52: 53 2D    MOV   [__r1],A
    0C54: 51 2C    MOV   A,[__r2]
    0C56: 53 2E    MOV   [__r0],A
    0C58: 51 2D    MOV   A,[__r1]
    0C5A: 03 F4    ADD   A,[X-12]
    0C5C: 53 2B    MOV   [__r3],A
    0C5E: 51 2E    MOV   A,[__r0]
    0C60: 0B F3    ADC   A,[X-13]
    0C62: 60 D4    MOV   REG[0xD4],A
    0C64: 3E 2B    MVI   A,[__r3]
    0C66: 53 2A    MOV   [__r4],A
    0C68: 3E 2B    MVI   A,[__r3]
    0C6A: 53 29    MOV   [__r5],A
    0C6C: 3E 2B    MVI   A,[__r3]
    0C6E: 53 28    MOV   [__r6],A
    0C70: 3E 2B    MVI   A,[__r3]
    0C72: 53 27    MOV   [__r7],A
    0C74: 51 2A    MOV   A,[__r4]
    0C76: 08       PUSH  A
    0C77: 51 29    MOV   A,[__r5]
    0C79: 08       PUSH  A
    0C7A: 51 28    MOV   A,[__r6]
    0C7C: 08       PUSH  A
    0C7D: 51 27    MOV   A,[__r7]
    0C7F: 08       PUSH  A
    0C80: 52 14    MOV   A,[X+20]
    0C82: 08       PUSH  A
    0C83: 52 15    MOV   A,[X+21]
    0C85: 08       PUSH  A
    0C86: 52 16    MOV   A,[X+22]
    0C88: 08       PUSH  A
    0C89: 52 17    MOV   A,[X+23]
    0C8B: 08       PUSH  A
    0C8C: 7C 23 CE LCALL 0x23CE
    0C8F: 18       POP   A
    0C90: 53 27    MOV   [__r7],A
    0C92: 18       POP   A
    0C93: 53 28    MOV   [__r6],A
    0C95: 18       POP   A
    0C96: 53 29    MOV   [__r5],A
    0C98: 18       POP   A
    0C99: 53 2A    MOV   [__r4],A
    0C9B: 38 FC    ADD   SP,0xFC
    0C9D: 52 F6    MOV   A,[X-10]
    0C9F: 04 2D    ADD   [__r1],A
    0CA1: 52 F5    MOV   A,[X-11]
    0CA3: 0C 2E    ADC   [__r0],A
    0CA5: 51 2E    MOV   A,[__r0]
    0CA7: 60 D4    MOV   REG[0xD4],A
    0CA9: 3E 2D    MVI   A,[__r1]
    0CAB: 53 26    MOV   [__r8],A
    0CAD: 3E 2D    MVI   A,[__r1]
    0CAF: 53 25    MOV   [__r9],A
    0CB1: 3E 2D    MVI   A,[__r1]
    0CB3: 53 24    MOV   [__r10],A
    0CB5: 3E 2D    MVI   A,[__r1]
    0CB7: 53 23    MOV   [__r11],A
    0CB9: 51 26    MOV   A,[__r8]
    0CBB: 08       PUSH  A
    0CBC: 51 25    MOV   A,[__r9]
    0CBE: 08       PUSH  A
    0CBF: 51 24    MOV   A,[__r10]
    0CC1: 08       PUSH  A
    0CC2: 51 23    MOV   A,[__r11]
    0CC4: 08       PUSH  A
    0CC5: 52 10    MOV   A,[X+16]
    0CC7: 08       PUSH  A
    0CC8: 52 11    MOV   A,[X+17]
    0CCA: 08       PUSH  A
    0CCB: 52 12    MOV   A,[X+18]
    0CCD: 08       PUSH  A
    0CCE: 52 13    MOV   A,[X+19]
    0CD0: 08       PUSH  A
    0CD1: 7C 23 CE LCALL 0x23CE
    0CD4: 18       POP   A
    0CD5: 53 2B    MOV   [__r3],A
    0CD7: 18       POP   A
    0CD8: 53 2C    MOV   [__r2],A
    0CDA: 18       POP   A
    0CDB: 53 2D    MOV   [__r1],A
    0CDD: 18       POP   A
    0CDE: 53 2E    MOV   [__r0],A
    0CE0: 38 FC    ADD   SP,0xFC
    0CE2: 51 2A    MOV   A,[__r4]
    0CE4: 08       PUSH  A
    0CE5: 51 29    MOV   A,[__r5]
    0CE7: 08       PUSH  A
    0CE8: 51 28    MOV   A,[__r6]
    0CEA: 08       PUSH  A
    0CEB: 51 27    MOV   A,[__r7]
    0CED: 08       PUSH  A
    0CEE: 51 2E    MOV   A,[__r0]
    0CF0: 08       PUSH  A
    0CF1: 51 2D    MOV   A,[__r1]
    0CF3: 08       PUSH  A
    0CF4: 51 2C    MOV   A,[__r2]
    0CF6: 08       PUSH  A
    0CF7: 51 2B    MOV   A,[__r3]
    0CF9: 08       PUSH  A
    0CFA: 7C 24 F8 LCALL 0x24F8
    0CFD: 18       POP   A
    0CFE: 54 0B    MOV   [X+11],A
    0D00: 18       POP   A
    0D01: 54 0A    MOV   [X+10],A
    0D03: 18       POP   A
    0D04: 54 09    MOV   [X+9],A
    0D06: 18       POP   A
    0D07: 54 08    MOV   [X+8],A
    0D09: 38 FC    ADD   SP,0xFC
(0063)             t2 = u1 * y[i1] + u2 * x[i1];
    0D0B: 52 04    MOV   A,[X+4]
    0D0D: 53 2E    MOV   [__r0],A
    0D0F: 52 05    MOV   A,[X+5]
    0D11: 53 2D    MOV   [__r1],A
    0D13: 52 06    MOV   A,[X+6]
    0D15: 53 2C    MOV   [__r2],A
    0D17: 52 07    MOV   A,[X+7]
    0D19: 53 2B    MOV   [__r3],A
    0D1B: 50 02    MOV   A,0x2
    0D1D: 62 D0 05 MOV   REG[0xD0],0x5
    0D20: 65 2B    ASL   [__r3]
    0D22: 6B 2C    RLC   [__r2]
    0D24: 6B 2D    RLC   [__r1]
    0D26: 6B 2E    RLC   [__r0]
    0D28: 78       DEC   A
    0D29: BF F3    JNZ   0x0D1D
    0D2B: 51 2B    MOV   A,[__r3]
    0D2D: 53 2D    MOV   [__r1],A
    0D2F: 51 2C    MOV   A,[__r2]
    0D31: 53 2E    MOV   [__r0],A
    0D33: 51 2D    MOV   A,[__r1]
    0D35: 03 F6    ADD   A,[X-10]
    0D37: 53 2B    MOV   [__r3],A
    0D39: 51 2E    MOV   A,[__r0]
    0D3B: 0B F5    ADC   A,[X-11]
    0D3D: 60 D4    MOV   REG[0xD4],A
    0D3F: 3E 2B    MVI   A,[__r3]
    0D41: 53 2A    MOV   [__r4],A
    0D43: 3E 2B    MVI   A,[__r3]
    0D45: 53 29    MOV   [__r5],A
    0D47: 3E 2B    MVI   A,[__r3]
    0D49: 53 28    MOV   [__r6],A
    0D4B: 3E 2B    MVI   A,[__r3]
    0D4D: 53 27    MOV   [__r7],A
    0D4F: 51 2A    MOV   A,[__r4]
    0D51: 08       PUSH  A
    0D52: 51 29    MOV   A,[__r5]
    0D54: 08       PUSH  A
    0D55: 51 28    MOV   A,[__r6]
    0D57: 08       PUSH  A
    0D58: 51 27    MOV   A,[__r7]
    0D5A: 08       PUSH  A
    0D5B: 52 14    MOV   A,[X+20]
    0D5D: 08       PUSH  A
    0D5E: 52 15    MOV   A,[X+21]
    0D60: 08       PUSH  A
    0D61: 52 16    MOV   A,[X+22]
    0D63: 08       PUSH  A
    0D64: 52 17    MOV   A,[X+23]
    0D66: 08       PUSH  A
    0D67: 7C 23 CE LCALL 0x23CE
    0D6A: 18       POP   A
    0D6B: 53 27    MOV   [__r7],A
    0D6D: 18       POP   A
    0D6E: 53 28    MOV   [__r6],A
    0D70: 18       POP   A
    0D71: 53 29    MOV   [__r5],A
    0D73: 18       POP   A
    0D74: 53 2A    MOV   [__r4],A
    0D76: 38 FC    ADD   SP,0xFC
    0D78: 52 F4    MOV   A,[X-12]
    0D7A: 04 2D    ADD   [__r1],A
    0D7C: 52 F3    MOV   A,[X-13]
    0D7E: 0C 2E    ADC   [__r0],A
    0D80: 51 2E    MOV   A,[__r0]
    0D82: 60 D4    MOV   REG[0xD4],A
    0D84: 3E 2D    MVI   A,[__r1]
    0D86: 53 26    MOV   [__r8],A
    0D88: 3E 2D    MVI   A,[__r1]
    0D8A: 53 25    MOV   [__r9],A
    0D8C: 3E 2D    MVI   A,[__r1]
    0D8E: 53 24    MOV   [__r10],A
    0D90: 3E 2D    MVI   A,[__r1]
    0D92: 53 23    MOV   [__r11],A
    0D94: 51 26    MOV   A,[__r8]
    0D96: 08       PUSH  A
    0D97: 51 25    MOV   A,[__r9]
    0D99: 08       PUSH  A
    0D9A: 51 24    MOV   A,[__r10]
    0D9C: 08       PUSH  A
    0D9D: 51 23    MOV   A,[__r11]
    0D9F: 08       PUSH  A
    0DA0: 52 10    MOV   A,[X+16]
    0DA2: 08       PUSH  A
    0DA3: 52 11    MOV   A,[X+17]
    0DA5: 08       PUSH  A
    0DA6: 52 12    MOV   A,[X+18]
    0DA8: 08       PUSH  A
    0DA9: 52 13    MOV   A,[X+19]
    0DAB: 08       PUSH  A
    0DAC: 7C 23 CE LCALL 0x23CE
    0DAF: 18       POP   A
    0DB0: 53 2B    MOV   [__r3],A
    0DB2: 18       POP   A
    0DB3: 53 2C    MOV   [__r2],A
    0DB5: 18       POP   A
    0DB6: 53 2D    MOV   [__r1],A
    0DB8: 18       POP   A
    0DB9: 53 2E    MOV   [__r0],A
    0DBB: 38 FC    ADD   SP,0xFC
    0DBD: 51 2A    MOV   A,[__r4]
    0DBF: 08       PUSH  A
    0DC0: 51 29    MOV   A,[__r5]
    0DC2: 08       PUSH  A
    0DC3: 51 28    MOV   A,[__r6]
    0DC5: 08       PUSH  A
    0DC6: 51 27    MOV   A,[__r7]
    0DC8: 08       PUSH  A
    0DC9: 51 2E    MOV   A,[__r0]
    0DCB: 08       PUSH  A
    0DCC: 51 2D    MOV   A,[__r1]
    0DCE: 08       PUSH  A
    0DCF: 51 2C    MOV   A,[__r2]
    0DD1: 08       PUSH  A
    0DD2: 51 2B    MOV   A,[__r3]
    0DD4: 08       PUSH  A
    0DD5: 7C 21 8E LCALL 0x218E
    0DD8: 18       POP   A
    0DD9: 54 0F    MOV   [X+15],A
    0DDB: 18       POP   A
    0DDC: 54 0E    MOV   [X+14],A
    0DDE: 18       POP   A
    0DDF: 54 0D    MOV   [X+13],A
    0DE1: 18       POP   A
    0DE2: 54 0C    MOV   [X+12],A
    0DE4: 38 FC    ADD   SP,0xFC
(0064)             x[i1] = x[i] - t1; 
    0DE6: 52 00    MOV   A,[X+0]
    0DE8: 53 2E    MOV   [__r0],A
    0DEA: 52 01    MOV   A,[X+1]
    0DEC: 53 2D    MOV   [__r1],A
    0DEE: 52 02    MOV   A,[X+2]
    0DF0: 53 2C    MOV   [__r2],A
    0DF2: 52 03    MOV   A,[X+3]
    0DF4: 53 2B    MOV   [__r3],A
    0DF6: 50 02    MOV   A,0x2
    0DF8: 62 D0 05 MOV   REG[0xD0],0x5
    0DFB: 65 2B    ASL   [__r3]
    0DFD: 6B 2C    RLC   [__r2]
    0DFF: 6B 2D    RLC   [__r1]
    0E01: 6B 2E    RLC   [__r0]
    0E03: 78       DEC   A
    0E04: BF F3    JNZ   0x0DF8
    0E06: 51 2B    MOV   A,[__r3]
    0E08: 53 2D    MOV   [__r1],A
    0E0A: 51 2C    MOV   A,[__r2]
    0E0C: 53 2E    MOV   [__r0],A
    0E0E: 52 F6    MOV   A,[X-10]
    0E10: 04 2D    ADD   [__r1],A
    0E12: 52 F5    MOV   A,[X-11]
    0E14: 0C 2E    ADC   [__r0],A
    0E16: 51 2E    MOV   A,[__r0]
    0E18: 60 D4    MOV   REG[0xD4],A
    0E1A: 3E 2D    MVI   A,[__r1]
    0E1C: 53 2A    MOV   [__r4],A
    0E1E: 3E 2D    MVI   A,[__r1]
    0E20: 53 29    MOV   [__r5],A
    0E22: 3E 2D    MVI   A,[__r1]
    0E24: 53 28    MOV   [__r6],A
    0E26: 3E 2D    MVI   A,[__r1]
    0E28: 53 27    MOV   [__r7],A
    0E2A: 52 08    MOV   A,[X+8]
    0E2C: 08       PUSH  A
    0E2D: 52 09    MOV   A,[X+9]
    0E2F: 08       PUSH  A
    0E30: 52 0A    MOV   A,[X+10]
    0E32: 08       PUSH  A
    0E33: 52 0B    MOV   A,[X+11]
    0E35: 08       PUSH  A
    0E36: 51 2A    MOV   A,[__r4]
    0E38: 08       PUSH  A
    0E39: 51 29    MOV   A,[__r5]
    0E3B: 08       PUSH  A
    0E3C: 51 28    MOV   A,[__r6]
    0E3E: 08       PUSH  A
    0E3F: 51 27    MOV   A,[__r7]
    0E41: 08       PUSH  A
    0E42: 7C 24 F8 LCALL 0x24F8
    0E45: 18       POP   A
    0E46: 53 2B    MOV   [__r3],A
    0E48: 18       POP   A
    0E49: 53 2C    MOV   [__r2],A
    0E4B: 18       POP   A
    0E4C: 53 2D    MOV   [__r1],A
    0E4E: 18       POP   A
    0E4F: 53 2E    MOV   [__r0],A
    0E51: 38 FC    ADD   SP,0xFC
    0E53: 52 04    MOV   A,[X+4]
    0E55: 53 2A    MOV   [__r4],A
    0E57: 52 05    MOV   A,[X+5]
    0E59: 53 29    MOV   [__r5],A
    0E5B: 52 06    MOV   A,[X+6]
    0E5D: 53 28    MOV   [__r6],A
    0E5F: 52 07    MOV   A,[X+7]
    0E61: 53 27    MOV   [__r7],A
    0E63: 50 02    MOV   A,0x2
    0E65: 62 D0 05 MOV   REG[0xD0],0x5
    0E68: 65 27    ASL   [__r7]
    0E6A: 6B 28    RLC   [__r6]
    0E6C: 6B 29    RLC   [__r5]
    0E6E: 6B 2A    RLC   [__r4]
    0E70: 78       DEC   A
    0E71: BF F3    JNZ   0x0E65
    0E73: 51 27    MOV   A,[__r7]
    0E75: 53 29    MOV   [__r5],A
    0E77: 51 28    MOV   A,[__r6]
    0E79: 53 2A    MOV   [__r4],A
    0E7B: 52 F6    MOV   A,[X-10]
    0E7D: 04 29    ADD   [__r5],A
    0E7F: 52 F5    MOV   A,[X-11]
    0E81: 0C 2A    ADC   [__r4],A
    0E83: 51 2A    MOV   A,[__r4]
    0E85: 60 D5    MOV   REG[0xD5],A
    0E87: 51 2E    MOV   A,[__r0]
    0E89: 3F 29    MVI   [__r5],A
    0E8B: 51 2D    MOV   A,[__r1]
    0E8D: 3F 29    MVI   [__r5],A
    0E8F: 51 2C    MOV   A,[__r2]
    0E91: 3F 29    MVI   [__r5],A
    0E93: 51 2B    MOV   A,[__r3]
    0E95: 3F 29    MVI   [__r5],A
(0065)             y[i1] = y[i] - t2;
    0E97: 52 00    MOV   A,[X+0]
    0E99: 53 2E    MOV   [__r0],A
    0E9B: 52 01    MOV   A,[X+1]
    0E9D: 53 2D    MOV   [__r1],A
    0E9F: 52 02    MOV   A,[X+2]
    0EA1: 53 2C    MOV   [__r2],A
    0EA3: 52 03    MOV   A,[X+3]
    0EA5: 53 2B    MOV   [__r3],A
    0EA7: 50 02    MOV   A,0x2
    0EA9: 62 D0 05 MOV   REG[0xD0],0x5
    0EAC: 65 2B    ASL   [__r3]
    0EAE: 6B 2C    RLC   [__r2]
    0EB0: 6B 2D    RLC   [__r1]
    0EB2: 6B 2E    RLC   [__r0]
    0EB4: 78       DEC   A
    0EB5: BF F3    JNZ   0x0EA9
    0EB7: 51 2B    MOV   A,[__r3]
    0EB9: 53 2D    MOV   [__r1],A
    0EBB: 51 2C    MOV   A,[__r2]
    0EBD: 53 2E    MOV   [__r0],A
    0EBF: 52 F4    MOV   A,[X-12]
    0EC1: 04 2D    ADD   [__r1],A
    0EC3: 52 F3    MOV   A,[X-13]
    0EC5: 0C 2E    ADC   [__r0],A
    0EC7: 51 2E    MOV   A,[__r0]
    0EC9: 60 D4    MOV   REG[0xD4],A
    0ECB: 3E 2D    MVI   A,[__r1]
    0ECD: 53 2A    MOV   [__r4],A
    0ECF: 3E 2D    MVI   A,[__r1]
    0ED1: 53 29    MOV   [__r5],A
    0ED3: 3E 2D    MVI   A,[__r1]
    0ED5: 53 28    MOV   [__r6],A
    0ED7: 3E 2D    MVI   A,[__r1]
    0ED9: 53 27    MOV   [__r7],A
    0EDB: 52 0C    MOV   A,[X+12]
    0EDD: 08       PUSH  A
    0EDE: 52 0D    MOV   A,[X+13]
    0EE0: 08       PUSH  A
    0EE1: 52 0E    MOV   A,[X+14]
    0EE3: 08       PUSH  A
    0EE4: 52 0F    MOV   A,[X+15]
    0EE6: 08       PUSH  A
    0EE7: 51 2A    MOV   A,[__r4]
    0EE9: 08       PUSH  A
    0EEA: 51 29    MOV   A,[__r5]
    0EEC: 08       PUSH  A
    0EED: 51 28    MOV   A,[__r6]
    0EEF: 08       PUSH  A
    0EF0: 51 27    MOV   A,[__r7]
    0EF2: 08       PUSH  A
    0EF3: 7C 24 F8 LCALL 0x24F8
    0EF6: 18       POP   A
    0EF7: 53 2B    MOV   [__r3],A
    0EF9: 18       POP   A
    0EFA: 53 2C    MOV   [__r2],A
    0EFC: 18       POP   A
    0EFD: 53 2D    MOV   [__r1],A
    0EFF: 18       POP   A
    0F00: 53 2E    MOV   [__r0],A
    0F02: 38 FC    ADD   SP,0xFC
    0F04: 52 04    MOV   A,[X+4]
    0F06: 53 2A    MOV   [__r4],A
    0F08: 52 05    MOV   A,[X+5]
    0F0A: 53 29    MOV   [__r5],A
    0F0C: 52 06    MOV   A,[X+6]
    0F0E: 53 28    MOV   [__r6],A
    0F10: 52 07    MOV   A,[X+7]
    0F12: 53 27    MOV   [__r7],A
    0F14: 50 02    MOV   A,0x2
    0F16: 62 D0 05 MOV   REG[0xD0],0x5
    0F19: 65 27    ASL   [__r7]
    0F1B: 6B 28    RLC   [__r6]
    0F1D: 6B 29    RLC   [__r5]
    0F1F: 6B 2A    RLC   [__r4]
    0F21: 78       DEC   A
    0F22: BF F3    JNZ   0x0F16
    0F24: 51 27    MOV   A,[__r7]
    0F26: 53 29    MOV   [__r5],A
    0F28: 51 28    MOV   A,[__r6]
    0F2A: 53 2A    MOV   [__r4],A
    0F2C: 52 F4    MOV   A,[X-12]
    0F2E: 04 29    ADD   [__r5],A
    0F30: 52 F3    MOV   A,[X-13]
    0F32: 0C 2A    ADC   [__r4],A
    0F34: 51 2A    MOV   A,[__r4]
    0F36: 60 D5    MOV   REG[0xD5],A
    0F38: 51 2E    MOV   A,[__r0]
    0F3A: 3F 29    MVI   [__r5],A
    0F3C: 51 2D    MOV   A,[__r1]
    0F3E: 3F 29    MVI   [__r5],A
    0F40: 51 2C    MOV   A,[__r2]
    0F42: 3F 29    MVI   [__r5],A
    0F44: 51 2B    MOV   A,[__r3]
    0F46: 3F 29    MVI   [__r5],A
(0066)             x[i] += t1;
    0F48: 52 00    MOV   A,[X+0]
    0F4A: 53 2E    MOV   [__r0],A
    0F4C: 52 01    MOV   A,[X+1]
    0F4E: 53 2D    MOV   [__r1],A
    0F50: 52 02    MOV   A,[X+2]
    0F52: 53 2C    MOV   [__r2],A
    0F54: 52 03    MOV   A,[X+3]
    0F56: 53 2B    MOV   [__r3],A
    0F58: 50 02    MOV   A,0x2
    0F5A: 62 D0 05 MOV   REG[0xD0],0x5
    0F5D: 65 2B    ASL   [__r3]
    0F5F: 6B 2C    RLC   [__r2]
    0F61: 6B 2D    RLC   [__r1]
    0F63: 6B 2E    RLC   [__r0]
    0F65: 78       DEC   A
    0F66: BF F3    JNZ   0x0F5A
    0F68: 51 2B    MOV   A,[__r3]
    0F6A: 53 2D    MOV   [__r1],A
    0F6C: 51 2C    MOV   A,[__r2]
    0F6E: 53 2E    MOV   [__r0],A
    0F70: 52 F6    MOV   A,[X-10]
    0F72: 04 2D    ADD   [__r1],A
    0F74: 52 F5    MOV   A,[X-11]
    0F76: 0C 2E    ADC   [__r0],A
    0F78: 51 2E    MOV   A,[__r0]
    0F7A: 60 D4    MOV   REG[0xD4],A
    0F7C: 3E 2D    MVI   A,[__r1]
    0F7E: 53 2A    MOV   [__r4],A
    0F80: 3E 2D    MVI   A,[__r1]
    0F82: 53 29    MOV   [__r5],A
    0F84: 3E 2D    MVI   A,[__r1]
    0F86: 53 28    MOV   [__r6],A
    0F88: 3E 2D    MVI   A,[__r1]
    0F8A: 16 2D 04 SUB   [__r1],0x4
    0F8D: 53 27    MOV   [__r7],A
    0F8F: 52 08    MOV   A,[X+8]
    0F91: 08       PUSH  A
    0F92: 52 09    MOV   A,[X+9]
    0F94: 08       PUSH  A
    0F95: 52 0A    MOV   A,[X+10]
    0F97: 08       PUSH  A
    0F98: 52 0B    MOV   A,[X+11]
    0F9A: 08       PUSH  A
    0F9B: 51 2A    MOV   A,[__r4]
    0F9D: 08       PUSH  A
    0F9E: 51 29    MOV   A,[__r5]
    0FA0: 08       PUSH  A
    0FA1: 51 28    MOV   A,[__r6]
    0FA3: 08       PUSH  A
    0FA4: 51 27    MOV   A,[__r7]
    0FA6: 08       PUSH  A
    0FA7: 7C 21 8E LCALL 0x218E
    0FAA: 18       POP   A
    0FAB: 53 27    MOV   [__r7],A
    0FAD: 18       POP   A
    0FAE: 53 28    MOV   [__r6],A
    0FB0: 18       POP   A
    0FB1: 53 29    MOV   [__r5],A
    0FB3: 18       POP   A
    0FB4: 53 2A    MOV   [__r4],A
    0FB6: 38 FC    ADD   SP,0xFC
    0FB8: 51 2E    MOV   A,[__r0]
    0FBA: 60 D5    MOV   REG[0xD5],A
    0FBC: 51 2A    MOV   A,[__r4]
    0FBE: 3F 2D    MVI   [__r1],A
    0FC0: 51 29    MOV   A,[__r5]
    0FC2: 3F 2D    MVI   [__r1],A
    0FC4: 51 28    MOV   A,[__r6]
    0FC6: 3F 2D    MVI   [__r1],A
    0FC8: 51 27    MOV   A,[__r7]
    0FCA: 3F 2D    MVI   [__r1],A
(0067)             y[i] += t2;
    0FCC: 52 00    MOV   A,[X+0]
    0FCE: 53 2E    MOV   [__r0],A
    0FD0: 52 01    MOV   A,[X+1]
    0FD2: 53 2D    MOV   [__r1],A
    0FD4: 52 02    MOV   A,[X+2]
    0FD6: 53 2C    MOV   [__r2],A
    0FD8: 52 03    MOV   A,[X+3]
    0FDA: 53 2B    MOV   [__r3],A
    0FDC: 50 02    MOV   A,0x2
    0FDE: 62 D0 05 MOV   REG[0xD0],0x5
    0FE1: 65 2B    ASL   [__r3]
    0FE3: 6B 2C    RLC   [__r2]
    0FE5: 6B 2D    RLC   [__r1]
    0FE7: 6B 2E    RLC   [__r0]
    0FE9: 78       DEC   A
    0FEA: BF F3    JNZ   0x0FDE
    0FEC: 51 2B    MOV   A,[__r3]
    0FEE: 53 2D    MOV   [__r1],A
    0FF0: 51 2C    MOV   A,[__r2]
    0FF2: 53 2E    MOV   [__r0],A
    0FF4: 52 F4    MOV   A,[X-12]
    0FF6: 04 2D    ADD   [__r1],A
    0FF8: 52 F3    MOV   A,[X-13]
    0FFA: 0C 2E    ADC   [__r0],A
    0FFC: 51 2E    MOV   A,[__r0]
    0FFE: 60 D4    MOV   REG[0xD4],A
    1000: 3E 2D    MVI   A,[__r1]
    1002: 53 2A    MOV   [__r4],A
    1004: 3E 2D    MVI   A,[__r1]
    1006: 53 29    MOV   [__r5],A
    1008: 3E 2D    MVI   A,[__r1]
    100A: 53 28    MOV   [__r6],A
    100C: 3E 2D    MVI   A,[__r1]
    100E: 16 2D 04 SUB   [__r1],0x4
    1011: 53 27    MOV   [__r7],A
    1013: 52 0C    MOV   A,[X+12]
    1015: 08       PUSH  A
    1016: 52 0D    MOV   A,[X+13]
    1018: 08       PUSH  A
    1019: 52 0E    MOV   A,[X+14]
    101B: 08       PUSH  A
    101C: 52 0F    MOV   A,[X+15]
    101E: 08       PUSH  A
    101F: 51 2A    MOV   A,[__r4]
    1021: 08       PUSH  A
    1022: 51 29    MOV   A,[__r5]
    1024: 08       PUSH  A
    1025: 51 28    MOV   A,[__r6]
    1027: 08       PUSH  A
    1028: 51 27    MOV   A,[__r7]
    102A: 08       PUSH  A
    102B: 7C 21 8E LCALL 0x218E
    102E: 18       POP   A
    102F: 53 27    MOV   [__r7],A
    1031: 18       POP   A
    1032: 53 28    MOV   [__r6],A
    1034: 18       POP   A
    1035: 53 29    MOV   [__r5],A
    1037: 18       POP   A
    1038: 53 2A    MOV   [__r4],A
    103A: 38 FC    ADD   SP,0xFC
    103C: 51 2E    MOV   A,[__r0]
    103E: 60 D5    MOV   REG[0xD5],A
    1040: 51 2A    MOV   A,[__r4]
    1042: 3F 2D    MVI   [__r1],A
    1044: 51 29    MOV   A,[__r5]
    1046: 3F 2D    MVI   [__r1],A
    1048: 51 28    MOV   A,[__r6]
    104A: 3F 2D    MVI   [__r1],A
    104C: 51 27    MOV   A,[__r7]
    104E: 3F 2D    MVI   [__r1],A
(0068)          }
    1050: 52 23    MOV   A,[X+35]
    1052: 05 03    ADD   [X+3],A
    1054: 52 22    MOV   A,[X+34]
    1056: 0D 02    ADC   [X+2],A
    1058: 52 21    MOV   A,[X+33]
    105A: 0D 01    ADC   [X+1],A
    105C: 52 20    MOV   A,[X+32]
    105E: 0D 00    ADC   [X+0],A
    1060: 52 03    MOV   A,[X+3]
    1062: 13 1F    SUB   A,[X+31]
    1064: 52 02    MOV   A,[X+2]
    1066: 1B 1E    SBB   A,[X+30]
    1068: 52 01    MOV   A,[X+1]
    106A: 1B 1D    SBB   A,[X+29]
    106C: 52 1C    MOV   A,[X+28]
    106E: 31 80    XOR   A,0x80
    1070: 62 D0 05 MOV   REG[0xD0],0x5
    1073: 53 22    MOV   [__rX],A
    1075: 52 00    MOV   A,[X+0]
    1077: 31 80    XOR   A,0x80
    1079: 1A 22    SBB   A,[__rX]
    107B: CB 99    JC    0x0C15
(0069)          z =  u1 * c1 - u2 * c2;
    107D: 62 D0 05 MOV   REG[0xD0],0x5
    1080: 52 30    MOV   A,[X+48]
    1082: 08       PUSH  A
    1083: 52 31    MOV   A,[X+49]
    1085: 08       PUSH  A
    1086: 52 32    MOV   A,[X+50]
    1088: 08       PUSH  A
    1089: 52 33    MOV   A,[X+51]
    108B: 08       PUSH  A
    108C: 52 14    MOV   A,[X+20]
    108E: 08       PUSH  A
    108F: 52 15    MOV   A,[X+21]
    1091: 08       PUSH  A
    1092: 52 16    MOV   A,[X+22]
    1094: 08       PUSH  A
    1095: 52 17    MOV   A,[X+23]
    1097: 08       PUSH  A
    1098: 7C 23 CE LCALL 0x23CE
    109B: 18       POP   A
    109C: 53 2B    MOV   [__r3],A
    109E: 18       POP   A
    109F: 53 2C    MOV   [__r2],A
    10A1: 18       POP   A
    10A2: 53 2D    MOV   [__r1],A
    10A4: 18       POP   A
    10A5: 53 2E    MOV   [__r0],A
    10A7: 38 FC    ADD   SP,0xFC
    10A9: 52 2C    MOV   A,[X+44]
    10AB: 08       PUSH  A
    10AC: 52 2D    MOV   A,[X+45]
    10AE: 08       PUSH  A
    10AF: 52 2E    MOV   A,[X+46]
    10B1: 08       PUSH  A
    10B2: 52 2F    MOV   A,[X+47]
    10B4: 08       PUSH  A
    10B5: 52 10    MOV   A,[X+16]
    10B7: 08       PUSH  A
    10B8: 52 11    MOV   A,[X+17]
    10BA: 08       PUSH  A
    10BB: 52 12    MOV   A,[X+18]
    10BD: 08       PUSH  A
    10BE: 52 13    MOV   A,[X+19]
    10C0: 08       PUSH  A
    10C1: 7C 23 CE LCALL 0x23CE
    10C4: 18       POP   A
    10C5: 53 27    MOV   [__r7],A
    10C7: 18       POP   A
    10C8: 53 28    MOV   [__r6],A
    10CA: 18       POP   A
    10CB: 53 29    MOV   [__r5],A
    10CD: 18       POP   A
    10CE: 53 2A    MOV   [__r4],A
    10D0: 38 FC    ADD   SP,0xFC
    10D2: 51 2E    MOV   A,[__r0]
    10D4: 08       PUSH  A
    10D5: 51 2D    MOV   A,[__r1]
    10D7: 08       PUSH  A
    10D8: 51 2C    MOV   A,[__r2]
    10DA: 08       PUSH  A
    10DB: 51 2B    MOV   A,[__r3]
    10DD: 08       PUSH  A
    10DE: 51 2A    MOV   A,[__r4]
    10E0: 08       PUSH  A
    10E1: 51 29    MOV   A,[__r5]
    10E3: 08       PUSH  A
    10E4: 51 28    MOV   A,[__r6]
    10E6: 08       PUSH  A
    10E7: 51 27    MOV   A,[__r7]
    10E9: 08       PUSH  A
    10EA: 7C 24 F8 LCALL 0x24F8
    10ED: 18       POP   A
    10EE: 54 37    MOV   [X+55],A
    10F0: 18       POP   A
    10F1: 54 36    MOV   [X+54],A
    10F3: 18       POP   A
    10F4: 54 35    MOV   [X+53],A
    10F6: 18       POP   A
    10F7: 54 34    MOV   [X+52],A
    10F9: 38 FC    ADD   SP,0xFC
(0070)          u2 = u1 * c2 + u2 * c1;
    10FB: 52 2C    MOV   A,[X+44]
    10FD: 08       PUSH  A
    10FE: 52 2D    MOV   A,[X+45]
    1100: 08       PUSH  A
    1101: 52 2E    MOV   A,[X+46]
    1103: 08       PUSH  A
    1104: 52 2F    MOV   A,[X+47]
    1106: 08       PUSH  A
    1107: 52 14    MOV   A,[X+20]
    1109: 08       PUSH  A
    110A: 52 15    MOV   A,[X+21]
    110C: 08       PUSH  A
    110D: 52 16    MOV   A,[X+22]
    110F: 08       PUSH  A
    1110: 52 17    MOV   A,[X+23]
    1112: 08       PUSH  A
    1113: 7C 23 CE LCALL 0x23CE
    1116: 18       POP   A
    1117: 53 2B    MOV   [__r3],A
    1119: 18       POP   A
    111A: 53 2C    MOV   [__r2],A
    111C: 18       POP   A
    111D: 53 2D    MOV   [__r1],A
    111F: 18       POP   A
    1120: 53 2E    MOV   [__r0],A
    1122: 38 FC    ADD   SP,0xFC
    1124: 52 30    MOV   A,[X+48]
    1126: 08       PUSH  A
    1127: 52 31    MOV   A,[X+49]
    1129: 08       PUSH  A
    112A: 52 32    MOV   A,[X+50]
    112C: 08       PUSH  A
    112D: 52 33    MOV   A,[X+51]
    112F: 08       PUSH  A
    1130: 52 10    MOV   A,[X+16]
    1132: 08       PUSH  A
    1133: 52 11    MOV   A,[X+17]
    1135: 08       PUSH  A
    1136: 52 12    MOV   A,[X+18]
    1138: 08       PUSH  A
    1139: 52 13    MOV   A,[X+19]
    113B: 08       PUSH  A
    113C: 7C 23 CE LCALL 0x23CE
    113F: 18       POP   A
    1140: 53 27    MOV   [__r7],A
    1142: 18       POP   A
    1143: 53 28    MOV   [__r6],A
    1145: 18       POP   A
    1146: 53 29    MOV   [__r5],A
    1148: 18       POP   A
    1149: 53 2A    MOV   [__r4],A
    114B: 38 FC    ADD   SP,0xFC
    114D: 51 2E    MOV   A,[__r0]
    114F: 08       PUSH  A
    1150: 51 2D    MOV   A,[__r1]
    1152: 08       PUSH  A
    1153: 51 2C    MOV   A,[__r2]
    1155: 08       PUSH  A
    1156: 51 2B    MOV   A,[__r3]
    1158: 08       PUSH  A
    1159: 51 2A    MOV   A,[__r4]
    115B: 08       PUSH  A
    115C: 51 29    MOV   A,[__r5]
    115E: 08       PUSH  A
    115F: 51 28    MOV   A,[__r6]
    1161: 08       PUSH  A
    1162: 51 27    MOV   A,[__r7]
    1164: 08       PUSH  A
    1165: 7C 21 8E LCALL 0x218E
    1168: 18       POP   A
    1169: 54 17    MOV   [X+23],A
    116B: 18       POP   A
    116C: 54 16    MOV   [X+22],A
    116E: 18       POP   A
    116F: 54 15    MOV   [X+21],A
    1171: 18       POP   A
    1172: 54 14    MOV   [X+20],A
    1174: 38 FC    ADD   SP,0xFC
(0071)          u1 = z;
    1176: 52 34    MOV   A,[X+52]
    1178: 54 10    MOV   [X+16],A
    117A: 52 35    MOV   A,[X+53]
    117C: 54 11    MOV   [X+17],A
    117E: 52 36    MOV   A,[X+54]
    1180: 54 12    MOV   [X+18],A
    1182: 52 37    MOV   A,[X+55]
    1184: 54 13    MOV   [X+19],A
(0072)       }
    1186: 07 27 01 ADD   [X+39],0x1
    1189: 0F 26 00 ADC   [X+38],0x0
    118C: 0F 25 00 ADC   [X+37],0x0
    118F: 0F 24 00 ADC   [X+36],0x0
    1192: 52 27    MOV   A,[X+39]
    1194: 13 1B    SUB   A,[X+27]
    1196: 52 26    MOV   A,[X+38]
    1198: 1B 1A    SBB   A,[X+26]
    119A: 52 25    MOV   A,[X+37]
    119C: 1B 19    SBB   A,[X+25]
    119E: 52 18    MOV   A,[X+24]
    11A0: 31 80    XOR   A,0x80
    11A2: 62 D0 05 MOV   REG[0xD0],0x5
    11A5: 53 22    MOV   [__rX],A
    11A7: 52 24    MOV   A,[X+36]
    11A9: 31 80    XOR   A,0x80
    11AB: 1A 22    SBB   A,[__rX]
    11AD: CA 55    JC    0x0C03
(0073)       c2 = sqrt((1.0 - c1) / 2.0);
    11AF: 62 D0 05 MOV   REG[0xD0],0x5
    11B2: 52 2C    MOV   A,[X+44]
    11B4: 08       PUSH  A
    11B5: 52 2D    MOV   A,[X+45]
    11B7: 08       PUSH  A
    11B8: 52 2E    MOV   A,[X+46]
    11BA: 08       PUSH  A
    11BB: 52 2F    MOV   A,[X+47]
    11BD: 08       PUSH  A
    11BE: 50 3F    MOV   A,0x3F
    11C0: 08       PUSH  A
    11C1: 50 80    MOV   A,0x80
    11C3: 08       PUSH  A
    11C4: 50 00    MOV   A,0x0
    11C6: 08       PUSH  A
    11C7: 08       PUSH  A
    11C8: 7C 24 F8 LCALL 0x24F8
    11CB: 18       POP   A
    11CC: 53 2B    MOV   [__r3],A
    11CE: 18       POP   A
    11CF: 53 2C    MOV   [__r2],A
    11D1: 18       POP   A
    11D2: 53 2D    MOV   [__r1],A
    11D4: 18       POP   A
    11D5: 53 2E    MOV   [__r0],A
    11D7: 38 FC    ADD   SP,0xFC
    11D9: 50 40    MOV   A,0x40
    11DB: 08       PUSH  A
    11DC: 50 00    MOV   A,0x0
    11DE: 08       PUSH  A
    11DF: 08       PUSH  A
    11E0: 08       PUSH  A
    11E1: 51 2E    MOV   A,[__r0]
    11E3: 08       PUSH  A
    11E4: 51 2D    MOV   A,[__r1]
    11E6: 08       PUSH  A
    11E7: 51 2C    MOV   A,[__r2]
    11E9: 08       PUSH  A
    11EA: 51 2B    MOV   A,[__r3]
    11EC: 08       PUSH  A
    11ED: 7C 22 EB LCALL 0x22EB
    11F0: 18       POP   A
    11F1: 53 2B    MOV   [__r3],A
    11F3: 18       POP   A
    11F4: 53 2C    MOV   [__r2],A
    11F6: 18       POP   A
    11F7: 53 2D    MOV   [__r1],A
    11F9: 18       POP   A
    11FA: 38 FC    ADD   SP,0xFC
    11FC: 08       PUSH  A
    11FD: 51 2D    MOV   A,[__r1]
    11FF: 08       PUSH  A
    1200: 51 2C    MOV   A,[__r2]
    1202: 08       PUSH  A
    1203: 51 2B    MOV   A,[__r3]
    1205: 08       PUSH  A
    1206: 7C 35 AD LCALL _sqrtf
    1209: 38 FC    ADD   SP,0xFC
    120B: 62 D0 05 MOV   REG[0xD0],0x5
    120E: 51 2E    MOV   A,[__r0]
    1210: 54 30    MOV   [X+48],A
    1212: 51 2D    MOV   A,[__r1]
    1214: 54 31    MOV   [X+49],A
    1216: 51 2C    MOV   A,[__r2]
    1218: 54 32    MOV   [X+50],A
    121A: 51 2B    MOV   A,[__r3]
    121C: 54 33    MOV   [X+51],A
(0074)       if (dir == 1) 
    121E: 3D FB 00 CMP   [X-5],0x0
    1221: B0 09    JNZ   0x122B
    1223: 3D FC 01 CMP   [X-4],0x1
    1226: B0 04    JNZ   0x122B
(0075)          c2 = -c2;
    1228: 37 30 80 XOR   [X+48],0x80
(0076)       c1 = sqrt((1.0 + c1) / 2.0);
    122B: 62 D0 05 MOV   REG[0xD0],0x5
    122E: 50 3F    MOV   A,0x3F
    1230: 08       PUSH  A
    1231: 50 80    MOV   A,0x80
    1233: 08       PUSH  A
    1234: 50 00    MOV   A,0x0
    1236: 08       PUSH  A
    1237: 08       PUSH  A
    1238: 52 2C    MOV   A,[X+44]
    123A: 08       PUSH  A
    123B: 52 2D    MOV   A,[X+45]
    123D: 08       PUSH  A
    123E: 52 2E    MOV   A,[X+46]
    1240: 08       PUSH  A
    1241: 52 2F    MOV   A,[X+47]
    1243: 08       PUSH  A
    1244: 7C 21 8E LCALL 0x218E
    1247: 18       POP   A
    1248: 53 2B    MOV   [__r3],A
    124A: 18       POP   A
    124B: 53 2C    MOV   [__r2],A
    124D: 18       POP   A
    124E: 53 2D    MOV   [__r1],A
    1250: 18       POP   A
    1251: 53 2E    MOV   [__r0],A
    1253: 38 FC    ADD   SP,0xFC
    1255: 50 40    MOV   A,0x40
    1257: 08       PUSH  A
    1258: 50 00    MOV   A,0x0
    125A: 08       PUSH  A
    125B: 08       PUSH  A
    125C: 08       PUSH  A
    125D: 51 2E    MOV   A,[__r0]
    125F: 08       PUSH  A
    1260: 51 2D    MOV   A,[__r1]
    1262: 08       PUSH  A
    1263: 51 2C    MOV   A,[__r2]
    1265: 08       PUSH  A
    1266: 51 2B    MOV   A,[__r3]
    1268: 08       PUSH  A
    1269: 7C 22 EB LCALL 0x22EB
    126C: 18       POP   A
    126D: 53 2B    MOV   [__r3],A
    126F: 18       POP   A
    1270: 53 2C    MOV   [__r2],A
    1272: 18       POP   A
    1273: 53 2D    MOV   [__r1],A
    1275: 18       POP   A
    1276: 38 FC    ADD   SP,0xFC
    1278: 08       PUSH  A
    1279: 51 2D    MOV   A,[__r1]
    127B: 08       PUSH  A
    127C: 51 2C    MOV   A,[__r2]
    127E: 08       PUSH  A
    127F: 51 2B    MOV   A,[__r3]
    1281: 08       PUSH  A
    1282: 7C 35 AD LCALL _sqrtf
    1285: 38 FC    ADD   SP,0xFC
    1287: 62 D0 05 MOV   REG[0xD0],0x5
    128A: 51 2E    MOV   A,[__r0]
    128C: 54 2C    MOV   [X+44],A
    128E: 51 2D    MOV   A,[__r1]
    1290: 54 2D    MOV   [X+45],A
    1292: 51 2C    MOV   A,[__r2]
    1294: 54 2E    MOV   [X+46],A
    1296: 51 2B    MOV   A,[__r3]
    1298: 54 2F    MOV   [X+47],A
(0077)    }
    129A: 07 3B 01 ADD   [X+59],0x1
    129D: 0F 3A 00 ADC   [X+58],0x0
    12A0: 0F 39 00 ADC   [X+57],0x0
    12A3: 0F 38 00 ADC   [X+56],0x0
    12A6: 52 3B    MOV   A,[X+59]
    12A8: 13 FA    SUB   A,[X-6]
    12AA: 52 3A    MOV   A,[X+58]
    12AC: 1B F9    SBB   A,[X-7]
    12AE: 52 39    MOV   A,[X+57]
    12B0: 1B F8    SBB   A,[X-8]
    12B2: 52 F7    MOV   A,[X-9]
    12B4: 31 80    XOR   A,0x80
    12B6: 62 D0 05 MOV   REG[0xD0],0x5
    12B9: 53 22    MOV   [__rX],A
    12BB: 52 38    MOV   A,[X+56]
    12BD: 31 80    XOR   A,0x80
    12BF: 1A 22    SBB   A,[__rX]
    12C1: C9 03    JC    0x0BC5
(0078) 
(0079)    /* Scaling factor for forward transform */
(0080)    if (dir == 1) {
    12C3: 3D FB 00 CMP   [X-5],0x0
    12C6: B1 7E    JNZ   0x1445
    12C8: 3D FC 01 CMP   [X-4],0x1
    12CB: B1 79    JNZ   0x1445
(0081)       for (i=0;i<n;i++) {
    12CD: 56 00 00 MOV   [X+0],0x0
    12D0: 56 01 00 MOV   [X+1],0x0
    12D3: 56 02 00 MOV   [X+2],0x0
    12D6: 56 03 00 MOV   [X+3],0x0
    12D9: 81 4E    JMP   0x1428
(0082)          x[i] /= n;
    12DB: 62 D0 05 MOV   REG[0xD0],0x5
    12DE: 52 00    MOV   A,[X+0]
    12E0: 53 2E    MOV   [__r0],A
    12E2: 52 01    MOV   A,[X+1]
    12E4: 53 2D    MOV   [__r1],A
    12E6: 52 02    MOV   A,[X+2]
    12E8: 53 2C    MOV   [__r2],A
    12EA: 52 03    MOV   A,[X+3]
    12EC: 53 2B    MOV   [__r3],A
    12EE: 50 02    MOV   A,0x2
    12F0: 62 D0 05 MOV   REG[0xD0],0x5
    12F3: 65 2B    ASL   [__r3]
    12F5: 6B 2C    RLC   [__r2]
    12F7: 6B 2D    RLC   [__r1]
    12F9: 6B 2E    RLC   [__r0]
    12FB: 78       DEC   A
    12FC: BF F3    JNZ   0x12F0
    12FE: 51 2B    MOV   A,[__r3]
    1300: 53 2D    MOV   [__r1],A
    1302: 51 2C    MOV   A,[__r2]
    1304: 53 2E    MOV   [__r0],A
    1306: 52 F6    MOV   A,[X-10]
    1308: 04 2D    ADD   [__r1],A
    130A: 52 F5    MOV   A,[X-11]
    130C: 0C 2E    ADC   [__r0],A
    130E: 52 1C    MOV   A,[X+28]
    1310: 08       PUSH  A
    1311: 52 1D    MOV   A,[X+29]
    1313: 08       PUSH  A
    1314: 52 1E    MOV   A,[X+30]
    1316: 08       PUSH  A
    1317: 52 1F    MOV   A,[X+31]
    1319: 08       PUSH  A
    131A: 7C 25 D2 LCALL 0x25D2
    131D: 18       POP   A
    131E: 53 27    MOV   [__r7],A
    1320: 18       POP   A
    1321: 53 28    MOV   [__r6],A
    1323: 18       POP   A
    1324: 53 29    MOV   [__r5],A
    1326: 18       POP   A
    1327: 53 2A    MOV   [__r4],A
    1329: 51 2E    MOV   A,[__r0]
    132B: 60 D4    MOV   REG[0xD4],A
    132D: 3E 2D    MVI   A,[__r1]
    132F: 53 26    MOV   [__r8],A
    1331: 3E 2D    MVI   A,[__r1]
    1333: 53 25    MOV   [__r9],A
    1335: 3E 2D    MVI   A,[__r1]
    1337: 53 24    MOV   [__r10],A
    1339: 3E 2D    MVI   A,[__r1]
    133B: 16 2D 04 SUB   [__r1],0x4
    133E: 53 23    MOV   [__r11],A
    1340: 51 2A    MOV   A,[__r4]
    1342: 08       PUSH  A
    1343: 51 29    MOV   A,[__r5]
    1345: 08       PUSH  A
    1346: 51 28    MOV   A,[__r6]
    1348: 08       PUSH  A
    1349: 51 27    MOV   A,[__r7]
    134B: 08       PUSH  A
    134C: 51 26    MOV   A,[__r8]
    134E: 08       PUSH  A
    134F: 51 25    MOV   A,[__r9]
    1351: 08       PUSH  A
    1352: 51 24    MOV   A,[__r10]
    1354: 08       PUSH  A
    1355: 51 23    MOV   A,[__r11]
    1357: 08       PUSH  A
    1358: 7C 22 EB LCALL 0x22EB
    135B: 18       POP   A
    135C: 53 27    MOV   [__r7],A
    135E: 18       POP   A
    135F: 53 28    MOV   [__r6],A
    1361: 18       POP   A
    1362: 53 29    MOV   [__r5],A
    1364: 18       POP   A
    1365: 53 2A    MOV   [__r4],A
    1367: 38 FC    ADD   SP,0xFC
    1369: 51 2E    MOV   A,[__r0]
    136B: 60 D5    MOV   REG[0xD5],A
    136D: 51 2A    MOV   A,[__r4]
    136F: 3F 2D    MVI   [__r1],A
    1371: 51 29    MOV   A,[__r5]
    1373: 3F 2D    MVI   [__r1],A
    1375: 51 28    MOV   A,[__r6]
    1377: 3F 2D    MVI   [__r1],A
    1379: 51 27    MOV   A,[__r7]
    137B: 3F 2D    MVI   [__r1],A
(0083)          y[i] /= n;
    137D: 52 00    MOV   A,[X+0]
    137F: 53 2E    MOV   [__r0],A
    1381: 52 01    MOV   A,[X+1]
    1383: 53 2D    MOV   [__r1],A
    1385: 52 02    MOV   A,[X+2]
    1387: 53 2C    MOV   [__r2],A
    1389: 52 03    MOV   A,[X+3]
    138B: 53 2B    MOV   [__r3],A
    138D: 50 02    MOV   A,0x2
    138F: 62 D0 05 MOV   REG[0xD0],0x5
    1392: 65 2B    ASL   [__r3]
    1394: 6B 2C    RLC   [__r2]
    1396: 6B 2D    RLC   [__r1]
    1398: 6B 2E    RLC   [__r0]
    139A: 78       DEC   A
    139B: BF F3    JNZ   0x138F
    139D: 51 2B    MOV   A,[__r3]
    139F: 53 2D    MOV   [__r1],A
    13A1: 51 2C    MOV   A,[__r2]
    13A3: 53 2E    MOV   [__r0],A
    13A5: 52 F4    MOV   A,[X-12]
    13A7: 04 2D    ADD   [__r1],A
    13A9: 52 F3    MOV   A,[X-13]
    13AB: 0C 2E    ADC   [__r0],A
    13AD: 52 1C    MOV   A,[X+28]
    13AF: 08       PUSH  A
    13B0: 52 1D    MOV   A,[X+29]
    13B2: 08       PUSH  A
    13B3: 52 1E    MOV   A,[X+30]
    13B5: 08       PUSH  A
    13B6: 52 1F    MOV   A,[X+31]
    13B8: 08       PUSH  A
    13B9: 7C 25 D2 LCALL 0x25D2
    13BC: 18       POP   A
    13BD: 53 27    MOV   [__r7],A
    13BF: 18       POP   A
    13C0: 53 28    MOV   [__r6],A
    13C2: 18       POP   A
    13C3: 53 29    MOV   [__r5],A
    13C5: 18       POP   A
    13C6: 53 2A    MOV   [__r4],A
    13C8: 51 2E    MOV   A,[__r0]
    13CA: 60 D4    MOV   REG[0xD4],A
    13CC: 3E 2D    MVI   A,[__r1]
    13CE: 53 26    MOV   [__r8],A
    13D0: 3E 2D    MVI   A,[__r1]
    13D2: 53 25    MOV   [__r9],A
    13D4: 3E 2D    MVI   A,[__r1]
    13D6: 53 24    MOV   [__r10],A
    13D8: 3E 2D    MVI   A,[__r1]
    13DA: 16 2D 04 SUB   [__r1],0x4
    13DD: 53 23    MOV   [__r11],A
    13DF: 51 2A    MOV   A,[__r4]
    13E1: 08       PUSH  A
    13E2: 51 29    MOV   A,[__r5]
    13E4: 08       PUSH  A
    13E5: 51 28    MOV   A,[__r6]
    13E7: 08       PUSH  A
    13E8: 51 27    MOV   A,[__r7]
    13EA: 08       PUSH  A
    13EB: 51 26    MOV   A,[__r8]
    13ED: 08       PUSH  A
    13EE: 51 25    MOV   A,[__r9]
    13F0: 08       PUSH  A
    13F1: 51 24    MOV   A,[__r10]
    13F3: 08       PUSH  A
    13F4: 51 23    MOV   A,[__r11]
    13F6: 08       PUSH  A
    13F7: 7C 22 EB LCALL 0x22EB
    13FA: 18       POP   A
    13FB: 53 27    MOV   [__r7],A
    13FD: 18       POP   A
    13FE: 53 28    MOV   [__r6],A
    1400: 18       POP   A
    1401: 53 29    MOV   [__r5],A
    1403: 18       POP   A
    1404: 53 2A    MOV   [__r4],A
    1406: 38 FC    ADD   SP,0xFC
    1408: 51 2E    MOV   A,[__r0]
    140A: 60 D5    MOV   REG[0xD5],A
    140C: 51 2A    MOV   A,[__r4]
    140E: 3F 2D    MVI   [__r1],A
    1410: 51 29    MOV   A,[__r5]
    1412: 3F 2D    MVI   [__r1],A
    1414: 51 28    MOV   A,[__r6]
    1416: 3F 2D    MVI   [__r1],A
    1418: 51 27    MOV   A,[__r7]
    141A: 3F 2D    MVI   [__r1],A
(0084)       }
    141C: 07 03 01 ADD   [X+3],0x1
    141F: 0F 02 00 ADC   [X+2],0x0
    1422: 0F 01 00 ADC   [X+1],0x0
    1425: 0F 00 00 ADC   [X+0],0x0
    1428: 52 03    MOV   A,[X+3]
    142A: 13 1F    SUB   A,[X+31]
    142C: 52 02    MOV   A,[X+2]
    142E: 1B 1E    SBB   A,[X+30]
    1430: 52 01    MOV   A,[X+1]
    1432: 1B 1D    SBB   A,[X+29]
    1434: 52 1C    MOV   A,[X+28]
    1436: 31 80    XOR   A,0x80
    1438: 62 D0 05 MOV   REG[0xD0],0x5
    143B: 53 22    MOV   [__rX],A
    143D: 52 00    MOV   A,[X+0]
    143F: 31 80    XOR   A,0x80
    1441: 1A 22    SBB   A,[__rX]
    1443: CE 97    JC    0x12DB
(0085)    }
(0086)    
(0087)    for(i=0;i<N_points;i++)
    1445: 56 00 00 MOV   [X+0],0x0
    1448: 56 01 00 MOV   [X+1],0x0
    144B: 56 02 00 MOV   [X+2],0x0
    144E: 56 03 00 MOV   [X+3],0x0
(0088)    /* Absolute value */
(0089)    mod[i]=sqrt((data_re[i]*data_re[i])+(data_imm[i]*data_imm[i]))/N_points;   
    1451: 62 D0 05 MOV   REG[0xD0],0x5
FILE: F:\HARDWA~1\Project2\HWSW_P~1\HWSW_P~1\HWSW_P~1\fft.h
    1588: 07 03 01 ADD   [X+3],0x1
    158B: 0F 02 00 ADC   [X+2],0x0
    158E: 0F 01 00 ADC   [X+1],0x0
    1591: 0F 00 00 ADC   [X+0],0x0
    1594: 52 03    MOV   A,[X+3]
(0090) }FILE: F:\HARDWA~1\Project2\HWSW_P~1\HWSW_P~1\HWSW_P~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // VC1 provides a sample clock of 3 MHz to the DELTA_SIGMA-11bit, 
(0003) // resulting in a sample rate of 7.8 Ksamples per second. 
(0004) // VC3 generates the baud clock for the UART by dividing 24 MHz by 156. The UART internally 
(0005) // divides VC3 by 8 resulting in a baud rate of 19,200 bps. The serial data is 
(0006) // sent as ASCII text with 1 start bit, 8 data bits, 1 stop bit and no parity. 
(0007) // This data may be monitored using most terminal software. 
(0008) //
(0009) //
(0010) // PSoCEval1 Connections:
(0011) //      port0_pin1 -> External Signal = ADC Input (0-Vdd)
(0012) //      port1_pin6 -> RX = RS232 RX
(0013) //      port2_pin7 -> TX = RS232 TX
(0014) //
(0015) //-----------------------------------------------------------------------------
(0016) 
(0017) 
(0018) #include <m8c.h>                         // part specific constants and macros
(0019) #include "PSoCAPI.h"                     // PSoC API definitions for all User Modules
(0020) #include "stdlib.h"
(0021) #include "fft.h"                     // PSoC API definitions for all User Modules
(0022) #include "math.h"
(0023) #include <flashblock.h> 
(0024) 
(0025) #define RESOLUTION 12                    // ADC resolution
(0026) #define SCALE_BG  (( 1 << RESOLUTION)/55) // BarGraph scale factor
(0027) 
(0028) #ifndef PI
(0029) #define PI	3.14159265358979323846264338327950288
(0030) #endif
(0031) 
(0032) //int  iResult; // ADC result variable
(0033) int a;
(0034) int p;
(0035) int j;
(0036) int z;
(0037) char df[4];
(0038) char* data;
(0039) char* data_read;
(0040) double max,zero=0;
(0041) unsigned int i=0;         //index
(0042) unsigned int k=0;
(0043) unsigned int ind;         
(0044) //unsigned int endl=65535;  //uart tag
(0045) 
(0046) int status;
(0047) // Delta-Sigma-11bit: 7.8 ksps
(0048) //unsigned int N_samples=7800;
(0049) //double  time;    // time record
(0050) //double delta_f;  // frequency sampling interval
(0051) 
(0052) //these are before FFT
(0053) double temp_array[64]={0};
(0054) double temp_array_read[64]={0};
(0055) 
(0056) //these are final out of FFT
(0057) double temp_array_result[64]={0};
(0058) double temp_array_result_read[64]={0};
(0059) /*******************************************************************************
(0060) *  Defines
(0061) *******************************************************************************/
(0062) /* Temperature for flash write is set here */
(0063) #define Temp 25    
(0064) 
(0065) /* Block ID used for flash writes and read  */
(0066) #define BLOCK 416 
(0067) #define BLOCK_DRSLT 448
(0068) #define BLOCK_MODRSLT 480
(0069) 
(0070) /* Return value when an error occured during the flash block write function */ 
(0071) #define FLASH_ERROR 0    
(0072) 
(0073) /* size of the array to be written or read */
(0074) #define SIZE 64    
(0075) 
(0076) union
(0077)     {
(0078)         FLASH_WRITE_STRUCT Write;
(0079)         FLASH_READ_STRUCT Read;
(0080)     } FlashParams;
(0081) 	
(0082) /*******************************************************************************
(0083) /*  Global Varibles
(0084) /*******************************************************************************/
(0085)  /* Buffer to store the values to be written to the flash */
(0086) //unsigned char Write_Buffer[64];  
(0087)     
(0088) /* buffer to store the values to be read from the flash */    
(0089) //unsigned char Read_Buffer[64];  
(0090) 
(0091) double final_mod[N_points]={0};
(0092) double final_data_re[N_points]={0};
(0093) double final_data_imm[N_points]={0};
(0094) 
(0095) /*
(0096) void UART_print_re_imm ()  //send REAL and IMAGINARY parts data
(0097) {  
(0098)      UART_1_CPutString("Real Part\t\tImaginary Part\n");
(0099)      for(i=0;i<N_points;i++)
(0100)      {
(0101)        UART_1_PutSHexInt(data_re[i]);
(0102)         UART_1_CPutString("\t\t");
(0103)         UART_1_PutSHexInt(data_imm[i]);
(0104)       UART_1_PutCRLF();  
(0105)       }
(0106)     }
(0107) */
(0108) 
(0109) /*
(0110) void UART_print_mod ()    //send ABSOLUTE VALUE data
(0111) {
(0112)    UART_1_PutSHexInt(0);
(0113)    for(i=0;i<N_points;i++)
(0114)    {
(0115)    UART_1_PutSHexInt(mod[i]);
(0116)    }
(0117)    UART_1_PutSHexInt(endl);
(0118)    UART_1_PutCRLF();   
(0119) }
(0120) */
(0121) 
(0122) /*
(0123) void UART_print_data ()   // send REAL data
(0124) {
(0125)    UART_1_CPutString("Data init\n"); // Example string
(0126)     
(0127)    for (i=0;i<N_points;i++)
(0128)    {
(0129)    UART_1_PutSHexInt(data_re[i]);
(0130)    UART_1_PutCRLF();
(0131)    }
(0132) 
(0133) }
(0134) */
(0135) 
(0136) /*
(0137) //void LCD_print()
(0138) //{         
(0139) //	// find the fundamental harmonic (except the zero component)
(0140) //        max=mod[0];        
(0141) //        ind=0;
(0142) //        for(i=1;i<N_points/2;i++)
(0143) //        	if(mod[i]>max)
(0144) //        		{
(0145) //        		  max=mod[i];
(0146) //        		  ind=i;
(0147) //         		 }
(0148) //        		
(0149) //        itoa(df,(int)(max),10);
(0150) //        LCD_1_Position(1,0);
(0151) //        LCD_1_PrString(df);
(0152) //        
(0153) //        itoa(df,(int)(ind*delta_f),10);
(0154) //        LCD_1_Position(1,6);
(0155) //        LCD_1_PrString(df);
(0156) //        
(0157) //        LCD_1_Position(1,11);
(0158) //        LCD_1_PrCString("Hz");
(0159) //}
(0160) */
(0161) 
(0162) void main(void)
(0163) {
_main:
  bgPos                --> X+1
  bError               --> X+0
    15AC: 10       PUSH  X
    15AD: 4F       MOV   X,SP
    15AE: 38 06    ADD   SP,0x6
(0164)     BYTE bgPos;                          // BarGraph position
(0165)     BYTE bError;   
(0166) 	LCD_1_Start();                       // Init the LCD
    15B0: 10       PUSH  X
    15B1: 7C 04 98 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Start|LCD_1_Init
    15B4: 20       POP   X
(0167) 	
(0168) 		
(0169) //////////////////////////////////////////////////////////////////////////////////
(0170) 	/// iterate 32 times because we have a total of 256 elements but are only working
(0171) 	/// on 8 elements at a time. To get a total of 256 total elements we need to run
(0172) 	/// this iteration 32 times. 32*8=256 elements
(0173) 	for(j=0; j<32; j++){
    15B5: 62 D0 05 MOV   REG[0xD0],0x5
    15B8: 55 4A 00 MOV   [j+1],0x0
    15BB: 55 49 00 MOV   [j],0x0
(0174) 	   //initialize the data 	
(0175) 	   for(k=0; k<8; k++) {
    15BE: 62 D0 05 MOV   REG[0xD0],0x5
    15C1: 55 50 00 MOV   [k+1],0x0
    15C4: 55 4F 00 MOV   [k],0x0
    15C7: 84 49    JMP   0x1A11
(0176) 	    save_data_re[k]  = 0.125*cos(2*PI*((j*8)+k)/(double)N_points); //remember to add j
    15C9: 62 D0 05 MOV   REG[0xD0],0x5
FILE: F:\HARDWA~1\Project2\HWSW_P~1\HWSW_P~1\HWSW_P~1\main.c
(0177) 	    save_data_imm[k] = 0.125*sin(2*PI*((j*8)+k)/(double)N_points);
    177E: 62 D0 05 MOV   REG[0xD0],0x5
FILE: F:\HARDWA~1\Project2\HWSW_P~1\HWSW_P~1\HWSW_P~1\main.c
(0180) 		temp_array[2*k] = save_data_re[k];
    1933: 62 D0 05 MOV   REG[0xD0],0x5
    1936: 51 50    MOV   A,[k+1]
    1938: 08       PUSH  A
    1939: 51 4F    MOV   A,[k]
    193B: 62 D0 05 MOV   REG[0xD0],0x5
    193E: 53 2E    MOV   [__r0],A
    1940: 18       POP   A
    1941: 53 2D    MOV   [__r1],A
    1943: 65 2D    ASL   [__r1]
    1945: 6B 2E    RLC   [__r0]
    1947: 65 2D    ASL   [__r1]
    1949: 6B 2E    RLC   [__r0]
    194B: 06 2D A3 ADD   [__r1],0xA3
    194E: 0E 2E 00 ADC   [__r0],0x0
    1951: 51 2E    MOV   A,[__r0]
    1953: 60 D4    MOV   REG[0xD4],A
    1955: 3E 2D    MVI   A,[__r1]
    1957: 53 2A    MOV   [__r4],A
    1959: 3E 2D    MVI   A,[__r1]
    195B: 53 29    MOV   [__r5],A
    195D: 3E 2D    MVI   A,[__r1]
    195F: 53 28    MOV   [__r6],A
    1961: 3E 2D    MVI   A,[__r1]
    1963: 53 27    MOV   [__r7],A
    1965: 62 D0 05 MOV   REG[0xD0],0x5
    1968: 51 50    MOV   A,[k+1]
    196A: 08       PUSH  A
    196B: 51 4F    MOV   A,[k]
    196D: 62 D0 05 MOV   REG[0xD0],0x5
    1970: 53 2E    MOV   [__r0],A
    1972: 18       POP   A
    1973: 53 2D    MOV   [__r1],A
    1975: 65 2D    ASL   [__r1]
    1977: 6B 2E    RLC   [__r0]
    1979: 65 2D    ASL   [__r1]
    197B: 6B 2E    RLC   [__r0]
    197D: 65 2D    ASL   [__r1]
    197F: 6B 2E    RLC   [__r0]
    1981: 06 2D 00 ADD   [__r1],0x0
    1984: 0E 2E 04 ADC   [__r0],0x4
    1987: 51 2E    MOV   A,[__r0]
    1989: 60 D5    MOV   REG[0xD5],A
    198B: 51 2A    MOV   A,[__r4]
    198D: 3F 2D    MVI   [__r1],A
    198F: 51 29    MOV   A,[__r5]
    1991: 3F 2D    MVI   [__r1],A
    1993: 51 28    MOV   A,[__r6]
    1995: 3F 2D    MVI   [__r1],A
    1997: 51 27    MOV   A,[__r7]
    1999: 3F 2D    MVI   [__r1],A
(0181) 		temp_array[2*k +1] = save_data_imm[k];
    199B: 62 D0 05 MOV   REG[0xD0],0x5
    199E: 51 50    MOV   A,[k+1]
    19A0: 08       PUSH  A
    19A1: 51 4F    MOV   A,[k]
    19A3: 62 D0 05 MOV   REG[0xD0],0x5
    19A6: 53 2E    MOV   [__r0],A
    19A8: 18       POP   A
    19A9: 53 2D    MOV   [__r1],A
    19AB: 65 2D    ASL   [__r1]
    19AD: 6B 2E    RLC   [__r0]
    19AF: 65 2D    ASL   [__r1]
    19B1: 6B 2E    RLC   [__r0]
    19B3: 06 2D 83 ADD   [__r1],0x83
    19B6: 0E 2E 00 ADC   [__r0],0x0
    19B9: 51 2E    MOV   A,[__r0]
    19BB: 60 D4    MOV   REG[0xD4],A
    19BD: 3E 2D    MVI   A,[__r1]
    19BF: 53 2A    MOV   [__r4],A
    19C1: 3E 2D    MVI   A,[__r1]
    19C3: 53 29    MOV   [__r5],A
    19C5: 3E 2D    MVI   A,[__r1]
    19C7: 53 28    MOV   [__r6],A
    19C9: 3E 2D    MVI   A,[__r1]
    19CB: 53 27    MOV   [__r7],A
    19CD: 62 D0 05 MOV   REG[0xD0],0x5
    19D0: 51 50    MOV   A,[k+1]
    19D2: 08       PUSH  A
    19D3: 51 4F    MOV   A,[k]
    19D5: 62 D0 05 MOV   REG[0xD0],0x5
    19D8: 53 2E    MOV   [__r0],A
    19DA: 18       POP   A
    19DB: 53 2D    MOV   [__r1],A
    19DD: 65 2D    ASL   [__r1]
    19DF: 6B 2E    RLC   [__r0]
    19E1: 06 2D 01 ADD   [__r1],0x1
    19E4: 0E 2E 00 ADC   [__r0],0x0
    19E7: 65 2D    ASL   [__r1]
    19E9: 6B 2E    RLC   [__r0]
    19EB: 65 2D    ASL   [__r1]
    19ED: 6B 2E    RLC   [__r0]
    19EF: 06 2D 00 ADD   [__r1],0x0
    19F2: 0E 2E 04 ADC   [__r0],0x4
    19F5: 51 2E    MOV   A,[__r0]
    19F7: 60 D5    MOV   REG[0xD5],A
    19F9: 51 2A    MOV   A,[__r4]
    19FB: 3F 2D    MVI   [__r1],A
    19FD: 51 29    MOV   A,[__r5]
    19FF: 3F 2D    MVI   [__r1],A
    1A01: 51 28    MOV   A,[__r6]
    1A03: 3F 2D    MVI   [__r1],A
    1A05: 51 27    MOV   A,[__r7]
    1A07: 3F 2D    MVI   [__r1],A
(0182) 	  }
    1A09: 62 D0 05 MOV   REG[0xD0],0x5
    1A0C: 76 50    INC   [k+1]
    1A0E: 0E 4F 00 ADC   [k],0x0
    1A11: 62 D0 05 MOV   REG[0xD0],0x5
    1A14: 51 50    MOV   A,[k+1]
    1A16: 11 08    SUB   A,0x8
    1A18: 51 4F    MOV   A,[k]
    1A1A: 19 00    SBB   A,0x0
    1A1C: CB AC    JC    0x15C9
(0178) 		//encapsulate into larger array
(0179) 		//[data_re][data_imm]
(0183) 	
(0184) 
(0185) 	//write the 8 encapsulated elements to Flash
(0186) 	FlashParams.Write.wARG_BlockId = BLOCK + j;             /* Block ID  */
    1A1E: 62 D0 05 MOV   REG[0xD0],0x5
    1A21: 51 4A    MOV   A,[j+1]
    1A23: 01 A0    ADD   A,0xA0
    1A25: 62 D0 05 MOV   REG[0xD0],0x5
    1A28: 53 2D    MOV   [__r1],A
    1A2A: 62 D0 05 MOV   REG[0xD0],0x5
    1A2D: 51 49    MOV   A,[j]
    1A2F: 09 01    ADC   A,0x1
    1A31: 62 D0 05 MOV   REG[0xD0],0x5
    1A34: 53 2E    MOV   [__r0],A
    1A36: 51 2D    MOV   A,[__r1]
    1A38: 08       PUSH  A
    1A39: 51 2E    MOV   A,[__r0]
    1A3B: 62 D0 05 MOV   REG[0xD0],0x5
    1A3E: 53 2F    MOV   [FlashParams],A
    1A40: 18       POP   A
    1A41: 53 30    MOV   [FlashParams+1],A
(0187)     FlashParams.Write.pARG_FlashBuffer = (char *)&temp_array;  /* Start with the first byte of Buffer */ 
    1A43: 55 32 00 MOV   [FlashParams+3],0x0
    1A46: 55 31 04 MOV   [FlashParams+2],0x4
(0188)     FlashParams.Write.cARG_Temperature = Temp;          /* Place your average expected device temperature here.  
    1A49: 55 33 19 MOV   [FlashParams+4],0x19
(0189)                                                            For optimal flash write conditions the temperature needs to be
(0190)                                                            within +/- 20 C of the actual device die temperature.*/
(0191)     /* bFlashWriteBlock returns a non-zero value in the case of a flash write failure.
(0192)        See flashblock.h line 55 for more details.*/
(0193)     /* Write the buffer(WriteData) data to Flash assuming room temp to be 25C  */
(0194)     bError = bFlashWriteBlock(&FlashParams.Write);  
    1A4C: 10       PUSH  X
    1A4D: 50 05    MOV   A,0x5
    1A4F: 08       PUSH  A
    1A50: 50 2F    MOV   A,0x2F
    1A52: 5C       MOV   X,A
    1A53: 18       POP   A
    1A54: 7C 06 16 LCALL _bFlashWriteBlock
    1A57: 20       POP   X
    1A58: 62 D0 05 MOV   REG[0xD0],0x5
    1A5B: 54 00    MOV   [X+0],A
(0195) 	}
    1A5D: 62 D0 05 MOV   REG[0xD0],0x5
    1A60: 76 4A    INC   [j+1]
    1A62: 0E 49 00 ADC   [j],0x0
    1A65: 51 4A    MOV   A,[j+1]
    1A67: 11 20    SUB   A,0x20
    1A69: 51 49    MOV   A,[j]
    1A6B: 31 80    XOR   A,0x80
    1A6D: 19 80    SBB   A,0x80
    1A6F: CB 4E    JC    0x15BE
(0196) 	////////////////////////////////////////////////////////////////////////////////////
(0197) 	/// initialize complete 
(0198) 
(0199) 	
(0200) 	////////////////////////////////////////////////////////////////////////////////////
(0201) 	/// read 8 elements from flash at a time and run FFT on the elements then store the 
(0202) 	/// result (data_re/data_imm/mod) back in FLASH
(0203) for(z=0; z<32; z++){
    1A71: 62 D0 05 MOV   REG[0xD0],0x5
    1A74: 55 48 00 MOV   [z+1],0x0
    1A77: 55 47 00 MOV   [z],0x0
(0204) 		 /* If the write operaton is successful, read back the data to the ReadBuffer */
(0205)     if ( bError != FLASH_ERROR )  
    1A7A: 3D 00 00 CMP   [X+0],0x0
    1A7D: A0 40    JZ    0x1ABE
(0206)      {  
(0207)         /* Enable global interupts */
(0208)         M8C_EnableGInt;                                    
    1A7F: 71 01    OR    F,0x1
(0209)     
(0210)         /* Starting at the first byte of the first block */
(0211)         FlashParams.Read.wARG_BlockId = BLOCK + z; 
    1A81: 62 D0 05 MOV   REG[0xD0],0x5
    1A84: 51 48    MOV   A,[z+1]
    1A86: 01 A0    ADD   A,0xA0
    1A88: 62 D0 05 MOV   REG[0xD0],0x5
    1A8B: 53 2D    MOV   [__r1],A
    1A8D: 62 D0 05 MOV   REG[0xD0],0x5
    1A90: 51 47    MOV   A,[z]
    1A92: 09 01    ADC   A,0x1
    1A94: 62 D0 05 MOV   REG[0xD0],0x5
    1A97: 53 2E    MOV   [__r0],A
    1A99: 51 2D    MOV   A,[__r1]
    1A9B: 08       PUSH  A
    1A9C: 51 2E    MOV   A,[__r0]
    1A9E: 62 D0 05 MOV   REG[0xD0],0x5
    1AA1: 53 2F    MOV   [FlashParams],A
    1AA3: 18       POP   A
    1AA4: 53 30    MOV   [FlashParams+1],A
(0212)         
(0213)         /* RAM buffer to read */
(0214)         FlashParams.Read.pARG_FlashBuffer = (char *)&temp_array_read;//encapsulated float array
    1AA6: 55 32 00 MOV   [FlashParams+3],0x0
    1AA9: 55 31 01 MOV   [FlashParams+2],0x1
(0215)         
(0216)         /* 16 byte read */
(0217)         FlashParams.Read.wARG_ReadCount = SIZE; 
    1AAC: 55 34 40 MOV   [FlashParams+5],0x40
    1AAF: 55 33 00 MOV   [FlashParams+4],0x0
(0218)         
(0219)         /* read the data from the flash to the buffer */
(0220)         FlashReadBlock(&FlashParams.Read);               
    1AB2: 10       PUSH  X
    1AB3: 50 05    MOV   A,0x5
    1AB5: 08       PUSH  A
    1AB6: 50 2F    MOV   A,0x2F
    1AB8: 5C       MOV   X,A
    1AB9: 18       POP   A
    1ABA: 7C 07 BC LCALL _FlashReadBlock
    1ABD: 20       POP   X
(0221)                               
(0222)       }
(0223)  
(0224) 		//decapsulate the array into data_re and data_imm
(0225) 	    for(k=0; k<8; k++) {
    1ABE: 62 D0 05 MOV   REG[0xD0],0x5
    1AC1: 55 50 00 MOV   [k+1],0x0
    1AC4: 55 4F 00 MOV   [k],0x0
    1AC7: 80 DF    JMP   0x1BA7
(0226)     		data_re[k]  = temp_array_read[2*k];
    1AC9: 62 D0 05 MOV   REG[0xD0],0x5
    1ACC: 51 50    MOV   A,[k+1]
    1ACE: 08       PUSH  A
    1ACF: 51 4F    MOV   A,[k]
    1AD1: 62 D0 05 MOV   REG[0xD0],0x5
    1AD4: 53 2E    MOV   [__r0],A
    1AD6: 18       POP   A
    1AD7: 53 2D    MOV   [__r1],A
    1AD9: 65 2D    ASL   [__r1]
    1ADB: 6B 2E    RLC   [__r0]
    1ADD: 65 2D    ASL   [__r1]
    1ADF: 6B 2E    RLC   [__r0]
    1AE1: 65 2D    ASL   [__r1]
    1AE3: 6B 2E    RLC   [__r0]
    1AE5: 06 2D 00 ADD   [__r1],0x0
    1AE8: 0E 2E 01 ADC   [__r0],0x1
    1AEB: 51 2E    MOV   A,[__r0]
    1AED: 60 D4    MOV   REG[0xD4],A
    1AEF: 3E 2D    MVI   A,[__r1]
    1AF1: 53 2A    MOV   [__r4],A
    1AF3: 3E 2D    MVI   A,[__r1]
    1AF5: 53 29    MOV   [__r5],A
    1AF7: 3E 2D    MVI   A,[__r1]
    1AF9: 53 28    MOV   [__r6],A
    1AFB: 3E 2D    MVI   A,[__r1]
    1AFD: 53 27    MOV   [__r7],A
    1AFF: 62 D0 05 MOV   REG[0xD0],0x5
    1B02: 51 50    MOV   A,[k+1]
    1B04: 08       PUSH  A
    1B05: 51 4F    MOV   A,[k]
    1B07: 62 D0 05 MOV   REG[0xD0],0x5
    1B0A: 53 2E    MOV   [__r0],A
    1B0C: 18       POP   A
    1B0D: 53 2D    MOV   [__r1],A
    1B0F: 65 2D    ASL   [__r1]
    1B11: 6B 2E    RLC   [__r0]
    1B13: 65 2D    ASL   [__r1]
    1B15: 6B 2E    RLC   [__r0]
    1B17: 06 2D 23 ADD   [__r1],0x23
    1B1A: 0E 2E 00 ADC   [__r0],0x0
    1B1D: 51 2E    MOV   A,[__r0]
    1B1F: 60 D5    MOV   REG[0xD5],A
    1B21: 51 2A    MOV   A,[__r4]
    1B23: 3F 2D    MVI   [__r1],A
    1B25: 51 29    MOV   A,[__r5]
    1B27: 3F 2D    MVI   [__r1],A
    1B29: 51 28    MOV   A,[__r6]
    1B2B: 3F 2D    MVI   [__r1],A
    1B2D: 51 27    MOV   A,[__r7]
    1B2F: 3F 2D    MVI   [__r1],A
(0227)     		data_imm[k] = temp_array_read[2*k +1];
    1B31: 62 D0 05 MOV   REG[0xD0],0x5
    1B34: 51 50    MOV   A,[k+1]
    1B36: 08       PUSH  A
    1B37: 51 4F    MOV   A,[k]
    1B39: 62 D0 05 MOV   REG[0xD0],0x5
    1B3C: 53 2E    MOV   [__r0],A
    1B3E: 18       POP   A
    1B3F: 53 2D    MOV   [__r1],A
    1B41: 65 2D    ASL   [__r1]
    1B43: 6B 2E    RLC   [__r0]
    1B45: 06 2D 01 ADD   [__r1],0x1
    1B48: 0E 2E 00 ADC   [__r0],0x0
    1B4B: 65 2D    ASL   [__r1]
    1B4D: 6B 2E    RLC   [__r0]
    1B4F: 65 2D    ASL   [__r1]
    1B51: 6B 2E    RLC   [__r0]
    1B53: 06 2D 00 ADD   [__r1],0x0
    1B56: 0E 2E 01 ADC   [__r0],0x1
    1B59: 51 2E    MOV   A,[__r0]
    1B5B: 60 D4    MOV   REG[0xD4],A
    1B5D: 3E 2D    MVI   A,[__r1]
    1B5F: 53 2A    MOV   [__r4],A
    1B61: 3E 2D    MVI   A,[__r1]
    1B63: 53 29    MOV   [__r5],A
    1B65: 3E 2D    MVI   A,[__r1]
    1B67: 53 28    MOV   [__r6],A
    1B69: 3E 2D    MVI   A,[__r1]
    1B6B: 53 27    MOV   [__r7],A
    1B6D: 62 D0 05 MOV   REG[0xD0],0x5
    1B70: 51 50    MOV   A,[k+1]
    1B72: 08       PUSH  A
    1B73: 51 4F    MOV   A,[k]
    1B75: 62 D0 05 MOV   REG[0xD0],0x5
    1B78: 53 2E    MOV   [__r0],A
    1B7A: 18       POP   A
    1B7B: 53 2D    MOV   [__r1],A
    1B7D: 65 2D    ASL   [__r1]
    1B7F: 6B 2E    RLC   [__r0]
    1B81: 65 2D    ASL   [__r1]
    1B83: 6B 2E    RLC   [__r0]
    1B85: 06 2D 03 ADD   [__r1],0x3
    1B88: 0E 2E 00 ADC   [__r0],0x0
    1B8B: 51 2E    MOV   A,[__r0]
    1B8D: 60 D5    MOV   REG[0xD5],A
    1B8F: 51 2A    MOV   A,[__r4]
    1B91: 3F 2D    MVI   [__r1],A
    1B93: 51 29    MOV   A,[__r5]
    1B95: 3F 2D    MVI   [__r1],A
    1B97: 51 28    MOV   A,[__r6]
    1B99: 3F 2D    MVI   [__r1],A
    1B9B: 51 27    MOV   A,[__r7]
    1B9D: 3F 2D    MVI   [__r1],A
(0228)   			}
    1B9F: 62 D0 05 MOV   REG[0xD0],0x5
    1BA2: 76 50    INC   [k+1]
    1BA4: 0E 4F 00 ADC   [k],0x0
    1BA7: 62 D0 05 MOV   REG[0xD0],0x5
    1BAA: 51 50    MOV   A,[k+1]
    1BAC: 11 08    SUB   A,0x8
    1BAE: 51 4F    MOV   A,[k]
    1BB0: 19 00    SBB   A,0x0
    1BB2: CF 16    JC    0x1AC9
(0229)     	
(0230) 			//print out the data read from Flash
(0231) 			LCD_1_Position(0,0);
    1BB4: 10       PUSH  X
    1BB5: 50 00    MOV   A,0x0
    1BB7: 57 00    MOV   X,0x0
    1BB9: 7C 05 0B LCALL _LCD_1_Position
    1BBC: 20       POP   X
(0232) 			data_read = ftoa(data_re[5], &status);
    1BBD: 50 05    MOV   A,0x5
    1BBF: 08       PUSH  A
    1BC0: 50 45    MOV   A,0x45
    1BC2: 08       PUSH  A
    1BC3: 62 D0 00 MOV   REG[0xD0],0x0
    1BC6: 51 37    MOV   A,[data_re+20]
    1BC8: 08       PUSH  A
    1BC9: 51 38    MOV   A,[data_re+21]
    1BCB: 08       PUSH  A
    1BCC: 51 39    MOV   A,[data_re+22]
    1BCE: 08       PUSH  A
    1BCF: 51 3A    MOV   A,[data_re+23]
    1BD1: 08       PUSH  A
    1BD2: 7C 28 B6 LCALL _ftoa
    1BD5: 38 FA    ADD   SP,0xFA
    1BD7: 62 D0 05 MOV   REG[0xD0],0x5
    1BDA: 51 2D    MOV   A,[__r1]
    1BDC: 08       PUSH  A
    1BDD: 51 2E    MOV   A,[__r0]
    1BDF: 62 D0 05 MOV   REG[0xD0],0x5
    1BE2: 53 3F    MOV   [data_read],A
    1BE4: 18       POP   A
    1BE5: 53 40    MOV   [data_read+1],A
(0233) 			LCD_1_PrString(data_read);
    1BE7: 10       PUSH  X
    1BE8: 51 3F    MOV   A,[data_read]
    1BEA: 08       PUSH  A
    1BEB: 51 40    MOV   A,[data_read+1]
    1BED: 5C       MOV   X,A
    1BEE: 18       POP   A
    1BEF: 7C 03 C2 LCALL _LCD_1_PrString
    1BF2: 20       POP   X
(0234) 
(0235) 		
(0236)  	//while (1)// Main loop 
(0237) 
(0238) 	for (p=0; p<N_points; p++)
    1BF3: 62 D0 05 MOV   REG[0xD0],0x5
    1BF6: 55 4C 00 MOV   [p+1],0x0
    1BF9: 55 4B 00 MOV   [p],0x0
(0239)     {   
(0240) 		
(0241) 			//run FFT on data_re & data_imm
(0242)         	FFT(1,exponent,data_re,data_imm );
    1BFC: 50 41    MOV   A,0x41
    1BFE: 08       PUSH  A
    1BFF: 50 00    MOV   A,0x0
    1C01: 08       PUSH  A
    1C02: 08       PUSH  A
    1C03: 08       PUSH  A
    1C04: 7C 2F 5D LCALL _logf
    1C07: 62 D0 05 MOV   REG[0xD0],0x5
    1C0A: 51 2E    MOV   A,[__r0]
    1C0C: 54 02    MOV   [X+2],A
    1C0E: 51 2D    MOV   A,[__r1]
    1C10: 54 03    MOV   [X+3],A
    1C12: 51 2C    MOV   A,[__r2]
    1C14: 54 04    MOV   [X+4],A
    1C16: 51 2B    MOV   A,[__r3]
    1C18: 54 05    MOV   [X+5],A
    1C1A: 50 40    MOV   A,0x40
    1C1C: 08       PUSH  A
    1C1D: 50 00    MOV   A,0x0
    1C1F: 08       PUSH  A
    1C20: 08       PUSH  A
    1C21: 08       PUSH  A
    1C22: 7C 2F 5D LCALL _logf
    1C25: 38 F8    ADD   SP,0xF8
    1C27: 50 00    MOV   A,0x0
    1C29: 08       PUSH  A
    1C2A: 50 03    MOV   A,0x3
    1C2C: 08       PUSH  A
    1C2D: 50 00    MOV   A,0x0
    1C2F: 08       PUSH  A
    1C30: 50 23    MOV   A,0x23
    1C32: 08       PUSH  A
    1C33: 62 D0 05 MOV   REG[0xD0],0x5
    1C36: 51 2E    MOV   A,[__r0]
    1C38: 08       PUSH  A
    1C39: 51 2D    MOV   A,[__r1]
    1C3B: 08       PUSH  A
    1C3C: 51 2C    MOV   A,[__r2]
    1C3E: 08       PUSH  A
    1C3F: 51 2B    MOV   A,[__r3]
    1C41: 08       PUSH  A
    1C42: 52 02    MOV   A,[X+2]
    1C44: 08       PUSH  A
    1C45: 52 03    MOV   A,[X+3]
    1C47: 08       PUSH  A
    1C48: 52 04    MOV   A,[X+4]
    1C4A: 08       PUSH  A
    1C4B: 52 05    MOV   A,[X+5]
    1C4D: 08       PUSH  A
    1C4E: 7C 22 EB LCALL 0x22EB
    1C51: 18       POP   A
    1C52: 53 2B    MOV   [__r3],A
    1C54: 18       POP   A
    1C55: 53 2C    MOV   [__r2],A
    1C57: 18       POP   A
    1C58: 53 2D    MOV   [__r1],A
    1C5A: 18       POP   A
    1C5B: 38 FC    ADD   SP,0xFC
    1C5D: 08       PUSH  A
    1C5E: 51 2D    MOV   A,[__r1]
    1C60: 08       PUSH  A
    1C61: 51 2C    MOV   A,[__r2]
    1C63: 08       PUSH  A
    1C64: 51 2B    MOV   A,[__r3]
    1C66: 08       PUSH  A
    1C67: 7C 20 7D LCALL 0x207D
    1C6A: 18       POP   A
    1C6B: 53 2B    MOV   [__r3],A
    1C6D: 18       POP   A
    1C6E: 53 2C    MOV   [__r2],A
    1C70: 18       POP   A
    1C71: 53 2D    MOV   [__r1],A
    1C73: 18       POP   A
    1C74: 08       PUSH  A
    1C75: 51 2D    MOV   A,[__r1]
    1C77: 08       PUSH  A
    1C78: 51 2C    MOV   A,[__r2]
    1C7A: 08       PUSH  A
    1C7B: 51 2B    MOV   A,[__r3]
    1C7D: 08       PUSH  A
    1C7E: 50 00    MOV   A,0x0
    1C80: 08       PUSH  A
    1C81: 50 01    MOV   A,0x1
    1C83: 08       PUSH  A
    1C84: 7C 08 27 LCALL __UserModules_end|__text_start|_FFT|_FFT
    1C87: 38 F6    ADD   SP,0xF6
(0243)        
(0244) 		
(0245) 			//print out the data from FFT
(0246) //			LCD_1_Position(1,0);
(0247) //			data = ftoa(data_re[5], &status);
(0248) //			LCD_1_PrString(data);
(0249) 			
(0250) 
(0251) 		}//end while loop 
    1C89: 62 D0 05 MOV   REG[0xD0],0x5
    1C8C: 76 4C    INC   [p+1]
    1C8E: 0E 4B 00 ADC   [p],0x0
    1C91: 51 4C    MOV   A,[p+1]
    1C93: 11 08    SUB   A,0x8
    1C95: 51 4B    MOV   A,[p]
    1C97: 31 80    XOR   A,0x80
    1C99: 19 80    SBB   A,0x80
    1C9B: CF 60    JC    0x1BFC
(0252) 	
(0253) ////////////////////////////////////////////////////////////////////
(0254) 
(0255) 	//out the data from FFT
(0256) 	LCD_1_Position(0,0);
    1C9D: 10       PUSH  X
    1C9E: 50 00    MOV   A,0x0
    1CA0: 57 00    MOV   X,0x0
    1CA2: 7C 05 0B LCALL _LCD_1_Position
    1CA5: 20       POP   X
(0257) 	data_read = ftoa(data_re[5], &status);
    1CA6: 50 05    MOV   A,0x5
    1CA8: 08       PUSH  A
    1CA9: 50 45    MOV   A,0x45
    1CAB: 08       PUSH  A
    1CAC: 62 D0 00 MOV   REG[0xD0],0x0
    1CAF: 51 37    MOV   A,[data_re+20]
    1CB1: 08       PUSH  A
    1CB2: 51 38    MOV   A,[data_re+21]
    1CB4: 08       PUSH  A
    1CB5: 51 39    MOV   A,[data_re+22]
    1CB7: 08       PUSH  A
    1CB8: 51 3A    MOV   A,[data_re+23]
    1CBA: 08       PUSH  A
    1CBB: 7C 28 B6 LCALL _ftoa
    1CBE: 38 FA    ADD   SP,0xFA
    1CC0: 62 D0 05 MOV   REG[0xD0],0x5
    1CC3: 51 2D    MOV   A,[__r1]
    1CC5: 08       PUSH  A
    1CC6: 51 2E    MOV   A,[__r0]
    1CC8: 62 D0 05 MOV   REG[0xD0],0x5
    1CCB: 53 3F    MOV   [data_read],A
    1CCD: 18       POP   A
    1CCE: 53 40    MOV   [data_read+1],A
(0258) 	LCD_1_PrString(data_read);
    1CD0: 10       PUSH  X
    1CD1: 51 3F    MOV   A,[data_read]
    1CD3: 08       PUSH  A
    1CD4: 51 40    MOV   A,[data_read+1]
    1CD6: 5C       MOV   X,A
    1CD7: 18       POP   A
    1CD8: 7C 03 C2 LCALL _LCD_1_PrString
    1CDB: 20       POP   X
(0259) 	
(0260) 	/// encapsulate the data_re and data_imm back up
(0261) 	for(k=0; k<8; k++) {
    1CDC: 62 D0 05 MOV   REG[0xD0],0x5
    1CDF: 55 50 00 MOV   [k+1],0x0
    1CE2: 55 4F 00 MOV   [k],0x0
    1CE5: 80 DF    JMP   0x1DC5
(0262) 		//encapsulate into larger array
(0263) 		//[data_re][data_imm]
(0264) 		temp_array_result[2*k] = data_re[k];
    1CE7: 62 D0 05 MOV   REG[0xD0],0x5
    1CEA: 51 50    MOV   A,[k+1]
    1CEC: 08       PUSH  A
    1CED: 51 4F    MOV   A,[k]
    1CEF: 62 D0 05 MOV   REG[0xD0],0x5
    1CF2: 53 2E    MOV   [__r0],A
    1CF4: 18       POP   A
    1CF5: 53 2D    MOV   [__r1],A
    1CF7: 65 2D    ASL   [__r1]
    1CF9: 6B 2E    RLC   [__r0]
    1CFB: 65 2D    ASL   [__r1]
    1CFD: 6B 2E    RLC   [__r0]
    1CFF: 06 2D 23 ADD   [__r1],0x23
    1D02: 0E 2E 00 ADC   [__r0],0x0
    1D05: 51 2E    MOV   A,[__r0]
    1D07: 60 D4    MOV   REG[0xD4],A
    1D09: 3E 2D    MVI   A,[__r1]
    1D0B: 53 2A    MOV   [__r4],A
    1D0D: 3E 2D    MVI   A,[__r1]
    1D0F: 53 29    MOV   [__r5],A
    1D11: 3E 2D    MVI   A,[__r1]
    1D13: 53 28    MOV   [__r6],A
    1D15: 3E 2D    MVI   A,[__r1]
    1D17: 53 27    MOV   [__r7],A
    1D19: 62 D0 05 MOV   REG[0xD0],0x5
    1D1C: 51 50    MOV   A,[k+1]
    1D1E: 08       PUSH  A
    1D1F: 51 4F    MOV   A,[k]
    1D21: 62 D0 05 MOV   REG[0xD0],0x5
    1D24: 53 2E    MOV   [__r0],A
    1D26: 18       POP   A
    1D27: 53 2D    MOV   [__r1],A
    1D29: 65 2D    ASL   [__r1]
    1D2B: 6B 2E    RLC   [__r0]
    1D2D: 65 2D    ASL   [__r1]
    1D2F: 6B 2E    RLC   [__r0]
    1D31: 65 2D    ASL   [__r1]
    1D33: 6B 2E    RLC   [__r0]
    1D35: 06 2D 00 ADD   [__r1],0x0
    1D38: 0E 2E 02 ADC   [__r0],0x2
    1D3B: 51 2E    MOV   A,[__r0]
    1D3D: 60 D5    MOV   REG[0xD5],A
    1D3F: 51 2A    MOV   A,[__r4]
    1D41: 3F 2D    MVI   [__r1],A
    1D43: 51 29    MOV   A,[__r5]
    1D45: 3F 2D    MVI   [__r1],A
    1D47: 51 28    MOV   A,[__r6]
    1D49: 3F 2D    MVI   [__r1],A
    1D4B: 51 27    MOV   A,[__r7]
    1D4D: 3F 2D    MVI   [__r1],A
(0265) 		temp_array_result[2*k +1] = data_imm[k];
    1D4F: 62 D0 05 MOV   REG[0xD0],0x5
    1D52: 51 50    MOV   A,[k+1]
    1D54: 08       PUSH  A
    1D55: 51 4F    MOV   A,[k]
    1D57: 62 D0 05 MOV   REG[0xD0],0x5
    1D5A: 53 2E    MOV   [__r0],A
    1D5C: 18       POP   A
    1D5D: 53 2D    MOV   [__r1],A
    1D5F: 65 2D    ASL   [__r1]
    1D61: 6B 2E    RLC   [__r0]
    1D63: 65 2D    ASL   [__r1]
    1D65: 6B 2E    RLC   [__r0]
    1D67: 06 2D 03 ADD   [__r1],0x3
    1D6A: 0E 2E 00 ADC   [__r0],0x0
    1D6D: 51 2E    MOV   A,[__r0]
    1D6F: 60 D4    MOV   REG[0xD4],A
    1D71: 3E 2D    MVI   A,[__r1]
    1D73: 53 2A    MOV   [__r4],A
    1D75: 3E 2D    MVI   A,[__r1]
    1D77: 53 29    MOV   [__r5],A
    1D79: 3E 2D    MVI   A,[__r1]
    1D7B: 53 28    MOV   [__r6],A
    1D7D: 3E 2D    MVI   A,[__r1]
    1D7F: 53 27    MOV   [__r7],A
    1D81: 62 D0 05 MOV   REG[0xD0],0x5
    1D84: 51 50    MOV   A,[k+1]
    1D86: 08       PUSH  A
    1D87: 51 4F    MOV   A,[k]
    1D89: 62 D0 05 MOV   REG[0xD0],0x5
    1D8C: 53 2E    MOV   [__r0],A
    1D8E: 18       POP   A
    1D8F: 53 2D    MOV   [__r1],A
    1D91: 65 2D    ASL   [__r1]
    1D93: 6B 2E    RLC   [__r0]
    1D95: 06 2D 01 ADD   [__r1],0x1
    1D98: 0E 2E 00 ADC   [__r0],0x0
    1D9B: 65 2D    ASL   [__r1]
    1D9D: 6B 2E    RLC   [__r0]
    1D9F: 65 2D    ASL   [__r1]
    1DA1: 6B 2E    RLC   [__r0]
    1DA3: 06 2D 00 ADD   [__r1],0x0
    1DA6: 0E 2E 02 ADC   [__r0],0x2
    1DA9: 51 2E    MOV   A,[__r0]
    1DAB: 60 D5    MOV   REG[0xD5],A
    1DAD: 51 2A    MOV   A,[__r4]
    1DAF: 3F 2D    MVI   [__r1],A
    1DB1: 51 29    MOV   A,[__r5]
    1DB3: 3F 2D    MVI   [__r1],A
    1DB5: 51 28    MOV   A,[__r6]
    1DB7: 3F 2D    MVI   [__r1],A
    1DB9: 51 27    MOV   A,[__r7]
    1DBB: 3F 2D    MVI   [__r1],A
(0266) 	  }
    1DBD: 62 D0 05 MOV   REG[0xD0],0x5
    1DC0: 76 50    INC   [k+1]
    1DC2: 0E 4F 00 ADC   [k],0x0
    1DC5: 62 D0 05 MOV   REG[0xD0],0x5
    1DC8: 51 50    MOV   A,[k+1]
    1DCA: 11 08    SUB   A,0x8
    1DCC: 51 4F    MOV   A,[k]
    1DCE: 19 00    SBB   A,0x0
    1DD0: CF 16    JC    0x1CE7
(0267) 	
(0268) 	
(0269) 	/// write result to Flash
(0270) 	//write the 8 encapsulated elements to Flash
(0271) 	FlashParams.Write.wARG_BlockId = BLOCK_DRSLT+z;             /* Block ID  */
    1DD2: 62 D0 05 MOV   REG[0xD0],0x5
    1DD5: 51 48    MOV   A,[z+1]
    1DD7: 01 C0    ADD   A,0xC0
    1DD9: 62 D0 05 MOV   REG[0xD0],0x5
    1DDC: 53 2D    MOV   [__r1],A
    1DDE: 62 D0 05 MOV   REG[0xD0],0x5
    1DE1: 51 47    MOV   A,[z]
    1DE3: 09 01    ADC   A,0x1
    1DE5: 62 D0 05 MOV   REG[0xD0],0x5
    1DE8: 53 2E    MOV   [__r0],A
    1DEA: 51 2D    MOV   A,[__r1]
    1DEC: 08       PUSH  A
    1DED: 51 2E    MOV   A,[__r0]
    1DEF: 62 D0 05 MOV   REG[0xD0],0x5
    1DF2: 53 2F    MOV   [FlashParams],A
    1DF4: 18       POP   A
    1DF5: 53 30    MOV   [FlashParams+1],A
(0272)     FlashParams.Write.pARG_FlashBuffer = (char *)&temp_array_result;  /* Start with the first byte of Buffer */ 
    1DF7: 55 32 00 MOV   [FlashParams+3],0x0
    1DFA: 55 31 02 MOV   [FlashParams+2],0x2
(0273)     FlashParams.Write.cARG_Temperature = Temp;          /* Place your average expected device temperature here.  
    1DFD: 55 33 19 MOV   [FlashParams+4],0x19
(0274)                                                            For optimal flash write conditions the temperature needs to be
(0275)                                                            within +/- 20 C of the actual device die temperature.*/
(0276)     /* bFlashWriteBlock returns a non-zero value in the case of a flash write failure.
(0277)        See flashblock.h line 55 for more details.*/
(0278)     /* Write the buffer(WriteData) data to Flash assuming room temp to be 25C  */
(0279)     bError = bFlashWriteBlock(&FlashParams.Write);  
    1E00: 10       PUSH  X
    1E01: 50 05    MOV   A,0x5
    1E03: 08       PUSH  A
    1E04: 50 2F    MOV   A,0x2F
    1E06: 5C       MOV   X,A
    1E07: 18       POP   A
    1E08: 7C 06 16 LCALL _bFlashWriteBlock
    1E0B: 20       POP   X
    1E0C: 54 00    MOV   [X+0],A
(0280) 
(0281) 	
(0282) 	
(0283) 	//write the mod elements to Flash
(0284) 	FlashParams.Write.wARG_BlockId = BLOCK_MODRSLT +z;             /* Block ID  */
    1E0E: 62 D0 05 MOV   REG[0xD0],0x5
    1E11: 51 48    MOV   A,[z+1]
    1E13: 01 E0    ADD   A,0xE0
    1E15: 62 D0 05 MOV   REG[0xD0],0x5
    1E18: 53 2D    MOV   [__r1],A
    1E1A: 62 D0 05 MOV   REG[0xD0],0x5
    1E1D: 51 47    MOV   A,[z]
    1E1F: 09 01    ADC   A,0x1
    1E21: 62 D0 05 MOV   REG[0xD0],0x5
    1E24: 53 2E    MOV   [__r0],A
    1E26: 51 2D    MOV   A,[__r1]
    1E28: 08       PUSH  A
    1E29: 51 2E    MOV   A,[__r0]
    1E2B: 62 D0 05 MOV   REG[0xD0],0x5
    1E2E: 53 2F    MOV   [FlashParams],A
    1E30: 18       POP   A
    1E31: 53 30    MOV   [FlashParams+1],A
(0285)     FlashParams.Write.pARG_FlashBuffer = (char *)&mod;  /* Start with the first byte of Buffer */ 
    1E33: 55 32 63 MOV   [FlashParams+3],0x63
    1E36: 55 31 00 MOV   [FlashParams+2],0x0
(0286)     FlashParams.Write.cARG_Temperature = Temp;          /* Place your average expected device temperature here.  
    1E39: 55 33 19 MOV   [FlashParams+4],0x19
(0287)                                                            For optimal flash write conditions the temperature needs to be
(0288)                                                            within +/- 20 C of the actual device die temperature.*/
(0289)     /* bFlashWriteBlock returns a non-zero value in the case of a flash write failure.
(0290)        See flashblock.h line 55 for more details.*/
(0291)     /* Write the buffer(WriteData) data to Flash assuming room temp to be 25C  */
(0292)     bError = bFlashWriteBlock(&FlashParams.Write);
    1E3C: 10       PUSH  X
    1E3D: 50 05    MOV   A,0x5
    1E3F: 08       PUSH  A
    1E40: 50 2F    MOV   A,0x2F
    1E42: 5C       MOV   X,A
    1E43: 18       POP   A
    1E44: 7C 06 16 LCALL _bFlashWriteBlock
    1E47: 20       POP   X
    1E48: 54 00    MOV   [X+0],A
(0293) 	
(0294) 	
(0295) 	
(0296) 	
(0297) 	/* If the write operaton is successful, read back the data to the ReadBuffer */
(0298)     if ( bError != FLASH_ERROR )  
    1E4A: 3D 00 00 CMP   [X+0],0x0
    1E4D: A0 40    JZ    0x1E8E
(0299)      {  
(0300)         /* Enable global interupts */
(0301)         M8C_EnableGInt;                                    
    1E4F: 71 01    OR    F,0x1
(0302)     
(0303)         /* Starting at the first byte of the first block */
(0304)         FlashParams.Read.wARG_BlockId = BLOCK_DRSLT +z ; 
    1E51: 62 D0 05 MOV   REG[0xD0],0x5
    1E54: 51 48    MOV   A,[z+1]
    1E56: 01 C0    ADD   A,0xC0
    1E58: 62 D0 05 MOV   REG[0xD0],0x5
    1E5B: 53 2D    MOV   [__r1],A
    1E5D: 62 D0 05 MOV   REG[0xD0],0x5
    1E60: 51 47    MOV   A,[z]
    1E62: 09 01    ADC   A,0x1
    1E64: 62 D0 05 MOV   REG[0xD0],0x5
    1E67: 53 2E    MOV   [__r0],A
    1E69: 51 2D    MOV   A,[__r1]
    1E6B: 08       PUSH  A
    1E6C: 51 2E    MOV   A,[__r0]
    1E6E: 62 D0 05 MOV   REG[0xD0],0x5
    1E71: 53 2F    MOV   [FlashParams],A
    1E73: 18       POP   A
    1E74: 53 30    MOV   [FlashParams+1],A
(0305)         
(0306)         /* RAM buffer to read */
(0307)         FlashParams.Read.pARG_FlashBuffer = (char *)&temp_array_result_read;//encapsulated float array
    1E76: 55 32 00 MOV   [FlashParams+3],0x0
    1E79: 55 31 03 MOV   [FlashParams+2],0x3
(0308)         
(0309)         /* 16 byte read */
(0310)         FlashParams.Read.wARG_ReadCount = SIZE; 
    1E7C: 55 34 40 MOV   [FlashParams+5],0x40
    1E7F: 55 33 00 MOV   [FlashParams+4],0x0
(0311)         
(0312)         /* read the data from the flash to the buffer */
(0313)         FlashReadBlock(&FlashParams.Read);               
    1E82: 10       PUSH  X
    1E83: 50 05    MOV   A,0x5
    1E85: 08       PUSH  A
    1E86: 50 2F    MOV   A,0x2F
    1E88: 5C       MOV   X,A
    1E89: 18       POP   A
    1E8A: 7C 07 BC LCALL _FlashReadBlock
    1E8D: 20       POP   X
(0314)                               
(0315)       }
(0316) 	
(0317) 	
(0318) 	
(0319) 		/* If the write operaton is successful, read back the data to the ReadBuffer */
(0320)     if ( bError != FLASH_ERROR )  
    1E8E: 3D 00 00 CMP   [X+0],0x0
    1E91: A0 40    JZ    0x1ED2
(0321)      {  
(0322)         /* Enable global interupts */
(0323)         M8C_EnableGInt;                                    
    1E93: 71 01    OR    F,0x1
(0324)     
(0325)         /* Starting at the first byte of the first block */
(0326)         FlashParams.Read.wARG_BlockId = BLOCK_MODRSLT + z; 
    1E95: 62 D0 05 MOV   REG[0xD0],0x5
    1E98: 51 48    MOV   A,[z+1]
    1E9A: 01 E0    ADD   A,0xE0
    1E9C: 62 D0 05 MOV   REG[0xD0],0x5
    1E9F: 53 2D    MOV   [__r1],A
    1EA1: 62 D0 05 MOV   REG[0xD0],0x5
    1EA4: 51 47    MOV   A,[z]
    1EA6: 09 01    ADC   A,0x1
    1EA8: 62 D0 05 MOV   REG[0xD0],0x5
    1EAB: 53 2E    MOV   [__r0],A
    1EAD: 51 2D    MOV   A,[__r1]
    1EAF: 08       PUSH  A
    1EB0: 51 2E    MOV   A,[__r0]
    1EB2: 62 D0 05 MOV   REG[0xD0],0x5
    1EB5: 53 2F    MOV   [FlashParams],A
    1EB7: 18       POP   A
    1EB8: 53 30    MOV   [FlashParams+1],A
(0327)         
(0328)         /* RAM buffer to read */
(0329)         FlashParams.Read.pARG_FlashBuffer = (char *)&final_mod;//encapsulated float array
    1EBA: 55 32 00 MOV   [FlashParams+3],0x0
    1EBD: 55 31 05 MOV   [FlashParams+2],0x5
(0330)         
(0331)         /* 16 byte read */
(0332)         FlashParams.Read.wARG_ReadCount = SIZE; 
    1EC0: 55 34 40 MOV   [FlashParams+5],0x40
    1EC3: 55 33 00 MOV   [FlashParams+4],0x0
(0333)         
(0334)         /* read the data from the flash to the buffer */
(0335)         FlashReadBlock(&FlashParams.Read);               
    1EC6: 10       PUSH  X
    1EC7: 50 05    MOV   A,0x5
    1EC9: 08       PUSH  A
    1ECA: 50 2F    MOV   A,0x2F
    1ECC: 5C       MOV   X,A
    1ECD: 18       POP   A
    1ECE: 7C 07 BC LCALL _FlashReadBlock
    1ED1: 20       POP   X
(0336)                               
(0337)       }
(0338) 	
(0339) 	//decapsulate the array into final_data_re and final_data_imm
(0340) 	    for(k=0; k<8; k++) {
    1ED2: 62 D0 05 MOV   REG[0xD0],0x5
    1ED5: 55 50 00 MOV   [k+1],0x0
    1ED8: 55 4F 00 MOV   [k],0x0
    1EDB: 80 DF    JMP   0x1FBB
(0341)     		final_data_re[k]  = temp_array_result_read[2*k];
    1EDD: 62 D0 05 MOV   REG[0xD0],0x5
    1EE0: 51 50    MOV   A,[k+1]
    1EE2: 08       PUSH  A
    1EE3: 51 4F    MOV   A,[k]
    1EE5: 62 D0 05 MOV   REG[0xD0],0x5
    1EE8: 53 2E    MOV   [__r0],A
    1EEA: 18       POP   A
    1EEB: 53 2D    MOV   [__r1],A
    1EED: 65 2D    ASL   [__r1]
    1EEF: 6B 2E    RLC   [__r0]
    1EF1: 65 2D    ASL   [__r1]
    1EF3: 6B 2E    RLC   [__r0]
    1EF5: 65 2D    ASL   [__r1]
    1EF7: 6B 2E    RLC   [__r0]
    1EF9: 06 2D 00 ADD   [__r1],0x0
    1EFC: 0E 2E 03 ADC   [__r0],0x3
    1EFF: 51 2E    MOV   A,[__r0]
    1F01: 60 D4    MOV   REG[0xD4],A
    1F03: 3E 2D    MVI   A,[__r1]
    1F05: 53 2A    MOV   [__r4],A
    1F07: 3E 2D    MVI   A,[__r1]
    1F09: 53 29    MOV   [__r5],A
    1F0B: 3E 2D    MVI   A,[__r1]
    1F0D: 53 28    MOV   [__r6],A
    1F0F: 3E 2D    MVI   A,[__r1]
    1F11: 53 27    MOV   [__r7],A
    1F13: 62 D0 05 MOV   REG[0xD0],0x5
    1F16: 51 50    MOV   A,[k+1]
    1F18: 08       PUSH  A
    1F19: 51 4F    MOV   A,[k]
    1F1B: 62 D0 05 MOV   REG[0xD0],0x5
    1F1E: 53 2E    MOV   [__r0],A
    1F20: 18       POP   A
    1F21: 53 2D    MOV   [__r1],A
    1F23: 65 2D    ASL   [__r1]
    1F25: 6B 2E    RLC   [__r0]
    1F27: 65 2D    ASL   [__r1]
    1F29: 6B 2E    RLC   [__r0]
    1F2B: 06 2D C3 ADD   [__r1],0xC3
    1F2E: 0E 2E 00 ADC   [__r0],0x0
    1F31: 51 2E    MOV   A,[__r0]
    1F33: 60 D5    MOV   REG[0xD5],A
    1F35: 51 2A    MOV   A,[__r4]
    1F37: 3F 2D    MVI   [__r1],A
    1F39: 51 29    MOV   A,[__r5]
    1F3B: 3F 2D    MVI   [__r1],A
    1F3D: 51 28    MOV   A,[__r6]
    1F3F: 3F 2D    MVI   [__r1],A
    1F41: 51 27    MOV   A,[__r7]
    1F43: 3F 2D    MVI   [__r1],A
(0342)     		final_data_imm[k] = temp_array_result_read[2*k +1];
    1F45: 62 D0 05 MOV   REG[0xD0],0x5
    1F48: 51 50    MOV   A,[k+1]
    1F4A: 08       PUSH  A
    1F4B: 51 4F    MOV   A,[k]
    1F4D: 62 D0 05 MOV   REG[0xD0],0x5
    1F50: 53 2E    MOV   [__r0],A
    1F52: 18       POP   A
    1F53: 53 2D    MOV   [__r1],A
    1F55: 65 2D    ASL   [__r1]
    1F57: 6B 2E    RLC   [__r0]
    1F59: 06 2D 01 ADD   [__r1],0x1
    1F5C: 0E 2E 00 ADC   [__r0],0x0
    1F5F: 65 2D    ASL   [__r1]
    1F61: 6B 2E    RLC   [__r0]
    1F63: 65 2D    ASL   [__r1]
    1F65: 6B 2E    RLC   [__r0]
    1F67: 06 2D 00 ADD   [__r1],0x0
    1F6A: 0E 2E 03 ADC   [__r0],0x3
    1F6D: 51 2E    MOV   A,[__r0]
    1F6F: 60 D4    MOV   REG[0xD4],A
    1F71: 3E 2D    MVI   A,[__r1]
    1F73: 53 2A    MOV   [__r4],A
    1F75: 3E 2D    MVI   A,[__r1]
    1F77: 53 29    MOV   [__r5],A
    1F79: 3E 2D    MVI   A,[__r1]
    1F7B: 53 28    MOV   [__r6],A
    1F7D: 3E 2D    MVI   A,[__r1]
    1F7F: 53 27    MOV   [__r7],A
    1F81: 62 D0 05 MOV   REG[0xD0],0x5
    1F84: 51 50    MOV   A,[k+1]
    1F86: 08       PUSH  A
    1F87: 51 4F    MOV   A,[k]
    1F89: 62 D0 05 MOV   REG[0xD0],0x5
    1F8C: 53 2E    MOV   [__r0],A
    1F8E: 18       POP   A
    1F8F: 53 2D    MOV   [__r1],A
    1F91: 65 2D    ASL   [__r1]
    1F93: 6B 2E    RLC   [__r0]
    1F95: 65 2D    ASL   [__r1]
    1F97: 6B 2E    RLC   [__r0]
    1F99: 06 2D 43 ADD   [__r1],0x43
    1F9C: 0E 2E 00 ADC   [__r0],0x0
    1F9F: 51 2E    MOV   A,[__r0]
    1FA1: 60 D5    MOV   REG[0xD5],A
    1FA3: 51 2A    MOV   A,[__r4]
    1FA5: 3F 2D    MVI   [__r1],A
    1FA7: 51 29    MOV   A,[__r5]
    1FA9: 3F 2D    MVI   [__r1],A
    1FAB: 51 28    MOV   A,[__r6]
    1FAD: 3F 2D    MVI   [__r1],A
    1FAF: 51 27    MOV   A,[__r7]
    1FB1: 3F 2D    MVI   [__r1],A
(0343)   		}
    1FB3: 62 D0 05 MOV   REG[0xD0],0x5
    1FB6: 76 50    INC   [k+1]
    1FB8: 0E 4F 00 ADC   [k],0x0
    1FBB: 62 D0 05 MOV   REG[0xD0],0x5
    1FBE: 51 50    MOV   A,[k+1]
    1FC0: 11 08    SUB   A,0x8
    1FC2: 51 4F    MOV   A,[k]
    1FC4: 19 00    SBB   A,0x0
    1FC6: CF 16    JC    0x1EDD
(0344) 
(0345) 		//print out the data read from Flash
(0346) 			LCD_1_Position(1,0);
    1FC8: 10       PUSH  X
    1FC9: 57 00    MOV   X,0x0
    1FCB: 50 01    MOV   A,0x1
    1FCD: 7C 05 0B LCALL _LCD_1_Position
    1FD0: 20       POP   X
(0347) 			data_read = ftoa(final_data_re[5], &status);
    1FD1: 50 05    MOV   A,0x5
    1FD3: 08       PUSH  A
    1FD4: 50 45    MOV   A,0x45
    1FD6: 08       PUSH  A
    1FD7: 62 D0 00 MOV   REG[0xD0],0x0
    1FDA: 51 D7    MOV   A,[final_data_re+20]
    1FDC: 08       PUSH  A
    1FDD: 51 D8    MOV   A,[final_data_re+21]
    1FDF: 08       PUSH  A
    1FE0: 51 D9    MOV   A,[final_data_re+22]
    1FE2: 08       PUSH  A
    1FE3: 51 DA    MOV   A,[final_data_re+23]
    1FE5: 08       PUSH  A
    1FE6: 7C 28 B6 LCALL _ftoa
    1FE9: 38 FA    ADD   SP,0xFA
    1FEB: 62 D0 05 MOV   REG[0xD0],0x5
    1FEE: 51 2D    MOV   A,[__r1]
    1FF0: 08       PUSH  A
    1FF1: 51 2E    MOV   A,[__r0]
    1FF3: 62 D0 05 MOV   REG[0xD0],0x5
    1FF6: 53 3F    MOV   [data_read],A
    1FF8: 18       POP   A
    1FF9: 53 40    MOV   [data_read+1],A
(0348) 			LCD_1_PrString(data_read);
    1FFB: 10       PUSH  X
    1FFC: 51 3F    MOV   A,[data_read]
    1FFE: 08       PUSH  A
    1FFF: 51 40    MOV   A,[data_read+1]
    2001: 5C       MOV   X,A
    2002: 18       POP   A
    2003: 7C 03 C2 LCALL _LCD_1_PrString
    2006: 20       POP   X
(0349) 	}
    2007: 62 D0 05 MOV   REG[0xD0],0x5
    200A: 76 48    INC   [z+1]
    200C: 0E 47 00 ADC   [z],0x0
    200F: 51 48    MOV   A,[z+1]
(0350) }//end main    2011: 11 20    SUB   A,0x20
    2013: 51 47    MOV   A,[z]
    2015: 31 80    XOR   A,0x80
    2017: 19 80    SBB   A,0x80
    2019: CA 60    JC    0x1A7A
    201B: 38 FA    ADD   SP,0xFA
    201D: 20       POP   X
    201E: 8F FF    JMP   0x201E
_ltoa:
    263D: 10       PUSH  X
    263E: 4F       MOV   X,SP
    263F: 38 0B    ADD   SP,0xB
    2641: 52 F7    MOV   A,[X-9]
    2643: 54 02    MOV   [X+2],A
    2645: 52 F8    MOV   A,[X-8]
    2647: 54 03    MOV   [X+3],A
    2649: 52 F9    MOV   A,[X-7]
    264B: 54 04    MOV   [X+4],A
    264D: 52 FA    MOV   A,[X-6]
    264F: 54 05    MOV   [X+5],A
    2651: 3D F7 00 CMP   [X-9],0x0
    2654: B0 39    JNZ   0x268E
    2656: 3D F8 00 CMP   [X-8],0x0
    2659: B0 34    JNZ   0x268E
    265B: 3D F9 00 CMP   [X-7],0x0
    265E: B0 2F    JNZ   0x268E
    2660: 3D FA 00 CMP   [X-6],0x0
    2663: B0 2A    JNZ   0x268E
    2665: 62 D0 05 MOV   REG[0xD0],0x5
    2668: 52 FC    MOV   A,[X-4]
    266A: 53 2D    MOV   [__r1],A
    266C: 52 FB    MOV   A,[X-5]
    266E: 60 D5    MOV   REG[0xD5],A
    2670: 50 30    MOV   A,0x30
    2672: 3F 2D    MVI   [__r1],A
    2674: 52 FC    MOV   A,[X-4]
    2676: 01 01    ADD   A,0x1
    2678: 53 2D    MOV   [__r1],A
    267A: 52 FB    MOV   A,[X-5]
    267C: 09 00    ADC   A,0x0
    267E: 60 D5    MOV   REG[0xD5],A
    2680: 50 00    MOV   A,0x0
    2682: 3F 2D    MVI   [__r1],A
    2684: 52 FC    MOV   A,[X-4]
    2686: 53 2D    MOV   [__r1],A
    2688: 52 FB    MOV   A,[X-5]
    268A: 53 2E    MOV   [__r0],A
    268C: 82 25    JMP   0x28B2
    268E: 52 FA    MOV   A,[X-6]
    2690: 11 00    SUB   A,0x0
    2692: 52 F9    MOV   A,[X-7]
    2694: 19 00    SBB   A,0x0
    2696: 52 F8    MOV   A,[X-8]
    2698: 19 00    SBB   A,0x0
    269A: 52 F7    MOV   A,[X-9]
    269C: 31 80    XOR   A,0x80
    269E: 19 80    SBB   A,0x80
    26A0: D0 3B    JNC   0x26DC
    26A2: 3D F5 00 CMP   [X-11],0x0
    26A5: B0 36    JNZ   0x26DC
    26A7: 3D F6 0A CMP   [X-10],0xA
    26AA: B0 31    JNZ   0x26DC
    26AC: 56 08 01 MOV   [X+8],0x1
    26AF: 62 D0 05 MOV   REG[0xD0],0x5
    26B2: 52 02    MOV   A,[X+2]
    26B4: 73       CPL   A
    26B5: 53 2E    MOV   [__r0],A
    26B7: 52 03    MOV   A,[X+3]
    26B9: 73       CPL   A
    26BA: 53 2D    MOV   [__r1],A
    26BC: 52 04    MOV   A,[X+4]
    26BE: 73       CPL   A
    26BF: 53 2C    MOV   [__r2],A
    26C1: 52 05    MOV   A,[X+5]
    26C3: 73       CPL   A
    26C4: 01 01    ADD   A,0x1
    26C6: 54 05    MOV   [X+5],A
    26C8: 51 2C    MOV   A,[__r2]
    26CA: 09 00    ADC   A,0x0
    26CC: 54 04    MOV   [X+4],A
    26CE: 51 2D    MOV   A,[__r1]
    26D0: 09 00    ADC   A,0x0
    26D2: 54 03    MOV   [X+3],A
    26D4: 51 2E    MOV   A,[__r0]
    26D6: 09 00    ADC   A,0x0
    26D8: 54 02    MOV   [X+2],A
    26DA: 80 04    JMP   0x26DF
    26DC: 56 08 00 MOV   [X+8],0x0
    26DF: 52 FC    MOV   A,[X-4]
    26E1: 54 01    MOV   [X+1],A
    26E3: 52 FB    MOV   A,[X-5]
    26E5: 54 00    MOV   [X+0],A
    26E7: 62 D0 05 MOV   REG[0xD0],0x5
    26EA: 52 F6    MOV   A,[X-10]
    26EC: 53 2B    MOV   [__r3],A
    26EE: 52 F5    MOV   A,[X-11]
    26F0: 53 2C    MOV   [__r2],A
    26F2: 47 2C 80 TST   [__r2],0x80
    26F5: A0 09    JZ    0x26FF
    26F7: 55 2D FF MOV   [__r1],0xFF
    26FA: 55 2E FF MOV   [__r0],0xFF
    26FD: 80 0A    JMP   0x2708
    26FF: 62 D0 05 MOV   REG[0xD0],0x5
    2702: 55 2D 00 MOV   [__r1],0x0
    2705: 55 2E 00 MOV   [__r0],0x0
    2708: 62 D0 05 MOV   REG[0xD0],0x5
    270B: 51 2E    MOV   A,[__r0]
    270D: 08       PUSH  A
    270E: 51 2D    MOV   A,[__r1]
    2710: 08       PUSH  A
    2711: 51 2C    MOV   A,[__r2]
    2713: 08       PUSH  A
    2714: 51 2B    MOV   A,[__r3]
    2716: 08       PUSH  A
    2717: 52 02    MOV   A,[X+2]
    2719: 08       PUSH  A
    271A: 52 03    MOV   A,[X+3]
    271C: 08       PUSH  A
    271D: 52 04    MOV   A,[X+4]
    271F: 08       PUSH  A
    2720: 52 05    MOV   A,[X+5]
    2722: 08       PUSH  A
    2723: 7C 20 6E LCALL 0x206E
    2726: 38 FC    ADD   SP,0xFC
    2728: 18       POP   A
    2729: 53 2B    MOV   [__r3],A
    272B: 18       POP   A
    272C: 53 2C    MOV   [__r2],A
    272E: 18       POP   A
    272F: 18       POP   A
    2730: 51 2B    MOV   A,[__r3]
    2732: 53 2D    MOV   [__r1],A
    2734: 51 2C    MOV   A,[__r2]
    2736: 53 2E    MOV   [__r0],A
    2738: 51 2D    MOV   A,[__r1]
    273A: 54 0A    MOV   [X+10],A
    273C: 51 2E    MOV   A,[__r0]
    273E: 54 09    MOV   [X+9],A
    2740: 50 09    MOV   A,0x9
    2742: 13 0A    SUB   A,[X+10]
    2744: 52 09    MOV   A,[X+9]
    2746: 31 80    XOR   A,0x80
    2748: 53 22    MOV   [__rX],A
    274A: 50 80    MOV   A,0x80
    274C: 1A 22    SBB   A,[__rX]
    274E: C0 28    JC    0x2777
    2750: 62 D0 05 MOV   REG[0xD0],0x5
    2753: 52 01    MOV   A,[X+1]
    2755: 53 2D    MOV   [__r1],A
    2757: 52 00    MOV   A,[X+0]
    2759: 53 2E    MOV   [__r0],A
    275B: 51 2D    MOV   A,[__r1]
    275D: 01 01    ADD   A,0x1
    275F: 54 01    MOV   [X+1],A
    2761: 51 2E    MOV   A,[__r0]
    2763: 09 00    ADC   A,0x0
    2765: 54 00    MOV   [X+0],A
    2767: 52 0A    MOV   A,[X+10]
    2769: 01 30    ADD   A,0x30
    276B: 53 2C    MOV   [__r2],A
    276D: 51 2E    MOV   A,[__r0]
    276F: 60 D5    MOV   REG[0xD5],A
    2771: 51 2C    MOV   A,[__r2]
    2773: 3F 2D    MVI   [__r1],A
    2775: 80 26    JMP   0x279C
    2777: 62 D0 05 MOV   REG[0xD0],0x5
    277A: 52 01    MOV   A,[X+1]
    277C: 53 2D    MOV   [__r1],A
    277E: 52 00    MOV   A,[X+0]
    2780: 53 2E    MOV   [__r0],A
    2782: 51 2D    MOV   A,[__r1]
    2784: 01 01    ADD   A,0x1
    2786: 54 01    MOV   [X+1],A
    2788: 51 2E    MOV   A,[__r0]
    278A: 09 00    ADC   A,0x0
    278C: 54 00    MOV   [X+0],A
    278E: 52 0A    MOV   A,[X+10]
    2790: 01 57    ADD   A,0x57
    2792: 53 2C    MOV   [__r2],A
    2794: 51 2E    MOV   A,[__r0]
    2796: 60 D5    MOV   REG[0xD5],A
    2798: 51 2C    MOV   A,[__r2]
    279A: 3F 2D    MVI   [__r1],A
    279C: 62 D0 05 MOV   REG[0xD0],0x5
    279F: 52 F6    MOV   A,[X-10]
    27A1: 53 2B    MOV   [__r3],A
    27A3: 52 F5    MOV   A,[X-11]
    27A5: 53 2C    MOV   [__r2],A
    27A7: 47 2C 80 TST   [__r2],0x80
    27AA: A0 09    JZ    0x27B4
    27AC: 55 2D FF MOV   [__r1],0xFF
    27AF: 55 2E FF MOV   [__r0],0xFF
    27B2: 80 0A    JMP   0x27BD
    27B4: 62 D0 05 MOV   REG[0xD0],0x5
    27B7: 55 2D 00 MOV   [__r1],0x0
    27BA: 55 2E 00 MOV   [__r0],0x0
    27BD: 62 D0 05 MOV   REG[0xD0],0x5
    27C0: 51 2E    MOV   A,[__r0]
    27C2: 08       PUSH  A
    27C3: 51 2D    MOV   A,[__r1]
    27C5: 08       PUSH  A
    27C6: 51 2C    MOV   A,[__r2]
    27C8: 08       PUSH  A
    27C9: 51 2B    MOV   A,[__r3]
    27CB: 08       PUSH  A
    27CC: 52 02    MOV   A,[X+2]
    27CE: 08       PUSH  A
    27CF: 52 03    MOV   A,[X+3]
    27D1: 08       PUSH  A
    27D2: 52 04    MOV   A,[X+4]
    27D4: 08       PUSH  A
    27D5: 52 05    MOV   A,[X+5]
    27D7: 08       PUSH  A
    27D8: 7C 20 6E LCALL 0x206E
    27DB: 18       POP   A
    27DC: 54 05    MOV   [X+5],A
    27DE: 18       POP   A
    27DF: 54 04    MOV   [X+4],A
    27E1: 18       POP   A
    27E2: 54 03    MOV   [X+3],A
    27E4: 18       POP   A
    27E5: 54 02    MOV   [X+2],A
    27E7: 38 FC    ADD   SP,0xFC
    27E9: 3D 02 00 CMP   [X+2],0x0
    27EC: BE FA    JNZ   0x26E7
    27EE: 3D 03 00 CMP   [X+3],0x0
    27F1: BE F5    JNZ   0x26E7
    27F3: 3D 04 00 CMP   [X+4],0x0
    27F6: BE F0    JNZ   0x26E7
    27F8: 3D 05 00 CMP   [X+5],0x0
    27FB: BE EB    JNZ   0x26E7
    27FD: 3D 08 00 CMP   [X+8],0x0
    2800: A0 20    JZ    0x2821
    2802: 62 D0 05 MOV   REG[0xD0],0x5
    2805: 52 01    MOV   A,[X+1]
    2807: 53 2D    MOV   [__r1],A
    2809: 52 00    MOV   A,[X+0]
    280B: 53 2E    MOV   [__r0],A
    280D: 51 2D    MOV   A,[__r1]
    280F: 01 01    ADD   A,0x1
    2811: 54 01    MOV   [X+1],A
    2813: 51 2E    MOV   A,[__r0]
    2815: 09 00    ADC   A,0x0
    2817: 54 00    MOV   [X+0],A
    2819: 51 2E    MOV   A,[__r0]
    281B: 60 D5    MOV   REG[0xD5],A
    281D: 50 2D    MOV   A,0x2D
    281F: 3F 2D    MVI   [__r1],A
    2821: 62 D0 05 MOV   REG[0xD0],0x5
    2824: 52 01    MOV   A,[X+1]
    2826: 53 2D    MOV   [__r1],A
    2828: 52 00    MOV   A,[X+0]
    282A: 53 2E    MOV   [__r0],A
    282C: 51 2D    MOV   A,[__r1]
    282E: 01 FF    ADD   A,0xFF
    2830: 54 01    MOV   [X+1],A
    2832: 51 2E    MOV   A,[__r0]
    2834: 09 FF    ADC   A,0xFF
    2836: 54 00    MOV   [X+0],A
    2838: 51 2E    MOV   A,[__r0]
    283A: 60 D5    MOV   REG[0xD5],A
    283C: 50 00    MOV   A,0x0
    283E: 3F 2D    MVI   [__r1],A
    2840: 52 FC    MOV   A,[X-4]
    2842: 54 07    MOV   [X+7],A
    2844: 52 FB    MOV   A,[X-5]
    2846: 54 06    MOV   [X+6],A
    2848: 80 54    JMP   0x289D
    284A: 62 D0 05 MOV   REG[0xD0],0x5
    284D: 52 07    MOV   A,[X+7]
    284F: 53 2D    MOV   [__r1],A
    2851: 52 06    MOV   A,[X+6]
    2853: 60 D4    MOV   REG[0xD4],A
    2855: 3E 2D    MVI   A,[__r1]
    2857: 54 08    MOV   [X+8],A
    2859: 52 07    MOV   A,[X+7]
    285B: 53 2D    MOV   [__r1],A
    285D: 52 06    MOV   A,[X+6]
    285F: 53 2E    MOV   [__r0],A
    2861: 51 2D    MOV   A,[__r1]
    2863: 01 01    ADD   A,0x1
    2865: 54 07    MOV   [X+7],A
    2867: 51 2E    MOV   A,[__r0]
    2869: 09 00    ADC   A,0x0
    286B: 54 06    MOV   [X+6],A
    286D: 52 01    MOV   A,[X+1]
    286F: 53 2B    MOV   [__r3],A
    2871: 52 00    MOV   A,[X+0]
    2873: 60 D4    MOV   REG[0xD4],A
    2875: 3E 2B    MVI   A,[__r3]
    2877: 53 2C    MOV   [__r2],A
    2879: 51 2E    MOV   A,[__r0]
    287B: 60 D5    MOV   REG[0xD5],A
    287D: 51 2C    MOV   A,[__r2]
    287F: 3F 2D    MVI   [__r1],A
    2881: 52 01    MOV   A,[X+1]
    2883: 53 2D    MOV   [__r1],A
    2885: 52 00    MOV   A,[X+0]
    2887: 53 2E    MOV   [__r0],A
    2889: 51 2D    MOV   A,[__r1]
    288B: 01 FF    ADD   A,0xFF
    288D: 54 01    MOV   [X+1],A
    288F: 51 2E    MOV   A,[__r0]
    2891: 09 FF    ADC   A,0xFF
    2893: 54 00    MOV   [X+0],A
    2895: 51 2E    MOV   A,[__r0]
    2897: 60 D5    MOV   REG[0xD5],A
    2899: 52 08    MOV   A,[X+8]
    289B: 3F 2D    MVI   [__r1],A
    289D: 52 07    MOV   A,[X+7]
    289F: 13 01    SUB   A,[X+1]
    28A1: 52 06    MOV   A,[X+6]
    28A3: 1B 00    SBB   A,[X+0]
    28A5: CF A4    JC    0x284A
    28A7: 62 D0 05 MOV   REG[0xD0],0x5
    28AA: 52 FC    MOV   A,[X-4]
    28AC: 53 2D    MOV   [__r1],A
    28AE: 52 FB    MOV   A,[X-5]
    28B0: 53 2E    MOV   [__r0],A
    28B2: 38 F5    ADD   SP,0xF5
    28B4: 20       POP   X
    28B5: 7F       RET   
_ftoa:
    28B6: 10       PUSH  X
    28B7: 4F       MOV   X,SP
    28B8: 38 16    ADD   SP,0x16
    28BA: 62 D0 05 MOV   REG[0xD0],0x5
    28BD: 52 F8    MOV   A,[X-8]
    28BF: 53 2D    MOV   [__r1],A
    28C1: 52 F7    MOV   A,[X-9]
    28C3: 60 D5    MOV   REG[0xD5],A
    28C5: 50 00    MOV   A,0x0
    28C7: 3F 2D    MVI   [__r1],A
    28C9: 3F 2D    MVI   [__r1],A
    28CB: 08       PUSH  A
    28CC: 08       PUSH  A
    28CD: 08       PUSH  A
    28CE: 08       PUSH  A
    28CF: 52 F9    MOV   A,[X-7]
    28D1: 08       PUSH  A
    28D2: 52 FA    MOV   A,[X-6]
    28D4: 08       PUSH  A
    28D5: 52 FB    MOV   A,[X-5]
    28D7: 08       PUSH  A
    28D8: 52 FC    MOV   A,[X-4]
    28DA: 08       PUSH  A
    28DB: 7C 22 8E LCALL 0x228E
    28DE: 38 F8    ADD   SP,0xF8
    28E0: 39 00    CMP   A,0x0
    28E2: B0 1B    JNZ   0x28FE
    28E4: 62 D0 00 MOV   REG[0xD0],0x0
    28E7: 55 E3 30 MOV   [final_data_re+32],0x30
    28EA: 55 E4 2E MOV   [final_data_re+33],0x2E
    28ED: 55 E5 30 MOV   [final_data_re+34],0x30
    28F0: 55 E6 00 MOV   [final_data_re+35],0x0
    28F3: 62 D0 05 MOV   REG[0xD0],0x5
    28F6: 55 2D E3 MOV   [__r1],0xE3
    28F9: 55 2E 00 MOV   [__r0],0x0
    28FC: 84 04    JMP   0x2D01
    28FE: 52 F9    MOV   A,[X-7]
    2900: 54 06    MOV   [X+6],A
    2902: 52 FA    MOV   A,[X-6]
    2904: 54 07    MOV   [X+7],A
    2906: 52 FB    MOV   A,[X-5]
    2908: 54 08    MOV   [X+8],A
    290A: 52 FC    MOV   A,[X-4]
    290C: 54 09    MOV   [X+9],A
    290E: 62 D0 05 MOV   REG[0xD0],0x5
    2911: 52 06    MOV   A,[X+6]
    2913: 53 2E    MOV   [__r0],A
    2915: 52 07    MOV   A,[X+7]
    2917: 53 2D    MOV   [__r1],A
    2919: 52 08    MOV   A,[X+8]
    291B: 53 2C    MOV   [__r2],A
    291D: 52 09    MOV   A,[X+9]
    291F: 53 2B    MOV   [__r3],A
    2921: 50 17    MOV   A,0x17
    2923: 62 D0 05 MOV   REG[0xD0],0x5
    2926: 68 2E    ASR   [__r0]
    2928: 6E 2D    RRC   [__r1]
    292A: 6E 2C    RRC   [__r2]
    292C: 6E 2B    RRC   [__r3]
    292E: 78       DEC   A
    292F: BF F3    JNZ   0x2923
    2931: 51 2B    MOV   A,[__r3]
    2933: 11 7F    SUB   A,0x7F
    2935: 54 0B    MOV   [X+11],A
    2937: 50 00    MOV   A,0x0
    2939: 19 00    SBB   A,0x0
    293B: 54 0A    MOV   [X+10],A
    293D: 52 09    MOV   A,[X+9]
    293F: 53 2B    MOV   [__r3],A
    2941: 52 08    MOV   A,[X+8]
    2943: 53 2C    MOV   [__r2],A
    2945: 52 07    MOV   A,[X+7]
    2947: 53 2D    MOV   [__r1],A
    2949: 52 06    MOV   A,[X+6]
    294B: 21 00    AND   A,0x0
    294D: 53 2E    MOV   [__r0],A
    294F: 51 2B    MOV   A,[__r3]
    2951: 54 13    MOV   [X+19],A
    2953: 51 2C    MOV   A,[__r2]
    2955: 54 12    MOV   [X+18],A
    2957: 51 2D    MOV   A,[__r1]
    2959: 29 80    OR    A,0x80
    295B: 54 11    MOV   [X+17],A
    295D: 51 2E    MOV   A,[__r0]
    295F: 54 10    MOV   [X+16],A
    2961: 56 02 00 MOV   [X+2],0x0
    2964: 56 03 00 MOV   [X+3],0x0
    2967: 56 04 00 MOV   [X+4],0x0
    296A: 56 05 00 MOV   [X+5],0x0
    296D: 56 0C 00 MOV   [X+12],0x0
    2970: 56 0D 00 MOV   [X+13],0x0
    2973: 56 0E 00 MOV   [X+14],0x0
    2976: 56 0F 00 MOV   [X+15],0x0
    2979: 52 0B    MOV   A,[X+11]
    297B: 11 1F    SUB   A,0x1F
    297D: 52 0A    MOV   A,[X+10]
    297F: 31 80    XOR   A,0x80
    2981: 19 80    SBB   A,0x80
    2983: C0 1C    JC    0x29A0
    2985: 62 D0 05 MOV   REG[0xD0],0x5
    2988: 52 F8    MOV   A,[X-8]
    298A: 53 2D    MOV   [__r1],A
    298C: 52 F7    MOV   A,[X-9]
    298E: 60 D5    MOV   REG[0xD5],A
    2990: 50 FF    MOV   A,0xFF
    2992: 3F 2D    MVI   [__r1],A
    2994: 50 FE    MOV   A,0xFE
    2996: 3F 2D    MVI   [__r1],A
    2998: 55 2D 00 MOV   [__r1],0x0
    299B: 55 2E 00 MOV   [__r0],0x0
    299E: 83 62    JMP   0x2D01
    29A0: 52 0B    MOV   A,[X+11]
    29A2: 11 E9    SUB   A,0xE9
    29A4: 52 0A    MOV   A,[X+10]
    29A6: 31 80    XOR   A,0x80
    29A8: 19 7F    SBB   A,0x7F
    29AA: D0 1A    JNC   0x29C5
    29AC: 62 D0 05 MOV   REG[0xD0],0x5
    29AF: 52 F8    MOV   A,[X-8]
    29B1: 53 2D    MOV   [__r1],A
    29B3: 52 F7    MOV   A,[X-9]
    29B5: 60 D5    MOV   REG[0xD5],A
    29B7: 50 FF    MOV   A,0xFF
    29B9: 3F 2D    MVI   [__r1],A
    29BB: 3F 2D    MVI   [__r1],A
    29BD: 55 2D 00 MOV   [__r1],0x0
    29C0: 55 2E 00 MOV   [__r0],0x0
    29C3: 83 3D    JMP   0x2D01
    29C5: 52 0B    MOV   A,[X+11]
    29C7: 11 17    SUB   A,0x17
    29C9: 52 0A    MOV   A,[X+10]
    29CB: 31 80    XOR   A,0x80
    29CD: 19 80    SBB   A,0x80
    29CF: C0 43    JC    0x2A13
    29D1: 62 D0 05 MOV   REG[0xD0],0x5
    29D4: 52 0B    MOV   A,[X+11]
    29D6: 11 17    SUB   A,0x17
    29D8: 53 2D    MOV   [__r1],A
    29DA: 52 10    MOV   A,[X+16]
    29DC: 53 2A    MOV   [__r4],A
    29DE: 52 11    MOV   A,[X+17]
    29E0: 53 29    MOV   [__r5],A
    29E2: 52 12    MOV   A,[X+18]
    29E4: 53 28    MOV   [__r6],A
    29E6: 52 13    MOV   A,[X+19]
    29E8: 53 27    MOV   [__r7],A
    29EA: 51 2D    MOV   A,[__r1]
    29EC: 21 1F    AND   A,0x1F
    29EE: A0 0F    JZ    0x29FE
    29F0: 62 D0 05 MOV   REG[0xD0],0x5
    29F3: 65 27    ASL   [__r7]
    29F5: 6B 28    RLC   [__r6]
    29F7: 6B 29    RLC   [__r5]
    29F9: 6B 2A    RLC   [__r4]
    29FB: 78       DEC   A
    29FC: BF F3    JNZ   0x29F0
    29FE: 62 D0 05 MOV   REG[0xD0],0x5
    2A01: 51 2A    MOV   A,[__r4]
    2A03: 54 0C    MOV   [X+12],A
    2A05: 51 29    MOV   A,[__r5]
    2A07: 54 0D    MOV   [X+13],A
    2A09: 51 28    MOV   A,[__r6]
    2A0B: 54 0E    MOV   [X+14],A
    2A0D: 51 27    MOV   A,[__r7]
    2A0F: 54 0F    MOV   [X+15],A
    2A11: 80 D0    JMP   0x2AE2
    2A13: 52 0B    MOV   A,[X+11]
    2A15: 11 00    SUB   A,0x0
    2A17: 52 0A    MOV   A,[X+10]
    2A19: 31 80    XOR   A,0x80
    2A1B: 19 80    SBB   A,0x80
    2A1D: C0 7F    JC    0x2A9D
    2A1F: 62 D0 05 MOV   REG[0xD0],0x5
    2A22: 50 17    MOV   A,0x17
    2A24: 13 0B    SUB   A,[X+11]
    2A26: 53 2D    MOV   [__r1],A
    2A28: 52 10    MOV   A,[X+16]
    2A2A: 53 2A    MOV   [__r4],A
    2A2C: 52 11    MOV   A,[X+17]
    2A2E: 53 29    MOV   [__r5],A
    2A30: 52 12    MOV   A,[X+18]
    2A32: 53 28    MOV   [__r6],A
    2A34: 52 13    MOV   A,[X+19]
    2A36: 53 27    MOV   [__r7],A
    2A38: 51 2D    MOV   A,[__r1]
    2A3A: 21 1F    AND   A,0x1F
    2A3C: A0 0F    JZ    0x2A4C
    2A3E: 62 D0 05 MOV   REG[0xD0],0x5
    2A41: 68 2A    ASR   [__r4]
    2A43: 6E 29    RRC   [__r5]
    2A45: 6E 28    RRC   [__r6]
    2A47: 6E 27    RRC   [__r7]
    2A49: 78       DEC   A
    2A4A: BF F3    JNZ   0x2A3E
    2A4C: 62 D0 05 MOV   REG[0xD0],0x5
    2A4F: 51 2A    MOV   A,[__r4]
    2A51: 54 0C    MOV   [X+12],A
    2A53: 51 29    MOV   A,[__r5]
    2A55: 54 0D    MOV   [X+13],A
    2A57: 51 28    MOV   A,[__r6]
    2A59: 54 0E    MOV   [X+14],A
    2A5B: 51 27    MOV   A,[__r7]
    2A5D: 54 0F    MOV   [X+15],A
    2A5F: 52 0B    MOV   A,[X+11]
    2A61: 01 01    ADD   A,0x1
    2A63: 53 2D    MOV   [__r1],A
    2A65: 52 10    MOV   A,[X+16]
    2A67: 53 2A    MOV   [__r4],A
    2A69: 52 11    MOV   A,[X+17]
    2A6B: 53 29    MOV   [__r5],A
    2A6D: 52 12    MOV   A,[X+18]
    2A6F: 53 28    MOV   [__r6],A
    2A71: 52 13    MOV   A,[X+19]
    2A73: 53 27    MOV   [__r7],A
    2A75: 51 2D    MOV   A,[__r1]
    2A77: 21 1F    AND   A,0x1F
    2A79: A0 0F    JZ    0x2A89
    2A7B: 62 D0 05 MOV   REG[0xD0],0x5
    2A7E: 65 27    ASL   [__r7]
    2A80: 6B 28    RLC   [__r6]
    2A82: 6B 29    RLC   [__r5]
    2A84: 6B 2A    RLC   [__r4]
    2A86: 78       DEC   A
    2A87: BF F3    JNZ   0x2A7B
    2A89: 62 D0 05 MOV   REG[0xD0],0x5
    2A8C: 51 27    MOV   A,[__r7]
    2A8E: 54 05    MOV   [X+5],A
    2A90: 51 28    MOV   A,[__r6]
    2A92: 54 04    MOV   [X+4],A
    2A94: 51 29    MOV   A,[__r5]
    2A96: 54 03    MOV   [X+3],A
    2A98: 56 02 00 MOV   [X+2],0x0
    2A9B: 80 46    JMP   0x2AE2
    2A9D: 62 D0 05 MOV   REG[0xD0],0x5
    2AA0: 52 0B    MOV   A,[X+11]
    2AA2: 01 01    ADD   A,0x1
    2AA4: 73       CPL   A
    2AA5: 11 FF    SUB   A,0xFF
    2AA7: 53 2D    MOV   [__r1],A
    2AA9: 52 13    MOV   A,[X+19]
    2AAB: 53 27    MOV   [__r7],A
    2AAD: 52 12    MOV   A,[X+18]
    2AAF: 53 28    MOV   [__r6],A
    2AB1: 52 11    MOV   A,[X+17]
    2AB3: 53 29    MOV   [__r5],A
    2AB5: 52 10    MOV   A,[X+16]
    2AB7: 21 00    AND   A,0x0
    2AB9: 53 2A    MOV   [__r4],A
    2ABB: 51 2D    MOV   A,[__r1]
    2ABD: 21 1F    AND   A,0x1F
    2ABF: A0 0F    JZ    0x2ACF
    2AC1: 62 D0 05 MOV   REG[0xD0],0x5
    2AC4: 68 2A    ASR   [__r4]
    2AC6: 6E 29    RRC   [__r5]
    2AC8: 6E 28    RRC   [__r6]
    2ACA: 6E 27    RRC   [__r7]
    2ACC: 78       DEC   A
    2ACD: BF F3    JNZ   0x2AC1
    2ACF: 62 D0 05 MOV   REG[0xD0],0x5
    2AD2: 51 2A    MOV   A,[__r4]
    2AD4: 54 02    MOV   [X+2],A
    2AD6: 51 29    MOV   A,[__r5]
    2AD8: 54 03    MOV   [X+3],A
    2ADA: 51 28    MOV   A,[__r6]
    2ADC: 54 04    MOV   [X+4],A
    2ADE: 51 27    MOV   A,[__r7]
    2AE0: 54 05    MOV   [X+5],A
    2AE2: 56 01 E3 MOV   [X+1],0xE3
    2AE5: 56 00 00 MOV   [X+0],0x0
    2AE8: 52 09    MOV   A,[X+9]
    2AEA: 11 00    SUB   A,0x0
    2AEC: 52 08    MOV   A,[X+8]
    2AEE: 19 00    SBB   A,0x0
    2AF0: 52 07    MOV   A,[X+7]
    2AF2: 19 00    SBB   A,0x0
    2AF4: 52 06    MOV   A,[X+6]
    2AF6: 31 80    XOR   A,0x80
    2AF8: 19 80    SBB   A,0x80
    2AFA: D0 20    JNC   0x2B1B
    2AFC: 62 D0 05 MOV   REG[0xD0],0x5
    2AFF: 52 01    MOV   A,[X+1]
    2B01: 53 2D    MOV   [__r1],A
    2B03: 52 00    MOV   A,[X+0]
    2B05: 53 2E    MOV   [__r0],A
    2B07: 51 2D    MOV   A,[__r1]
    2B09: 01 01    ADD   A,0x1
    2B0B: 54 01    MOV   [X+1],A
    2B0D: 51 2E    MOV   A,[__r0]
    2B0F: 09 00    ADC   A,0x0
    2B11: 54 00    MOV   [X+0],A
    2B13: 51 2E    MOV   A,[__r0]
    2B15: 60 D5    MOV   REG[0xD5],A
    2B17: 50 2D    MOV   A,0x2D
    2B19: 3F 2D    MVI   [__r1],A
    2B1B: 3D 0C 00 CMP   [X+12],0x0
    2B1E: B0 31    JNZ   0x2B50
    2B20: 3D 0D 00 CMP   [X+13],0x0
    2B23: B0 2C    JNZ   0x2B50
    2B25: 3D 0E 00 CMP   [X+14],0x0
    2B28: B0 27    JNZ   0x2B50
    2B2A: 3D 0F 00 CMP   [X+15],0x0
    2B2D: B0 22    JNZ   0x2B50
    2B2F: 62 D0 05 MOV   REG[0xD0],0x5
    2B32: 52 01    MOV   A,[X+1]
    2B34: 53 2D    MOV   [__r1],A
    2B36: 52 00    MOV   A,[X+0]
    2B38: 53 2E    MOV   [__r0],A
    2B3A: 51 2D    MOV   A,[__r1]
    2B3C: 01 01    ADD   A,0x1
    2B3E: 54 01    MOV   [X+1],A
    2B40: 51 2E    MOV   A,[__r0]
    2B42: 09 00    ADC   A,0x0
    2B44: 54 00    MOV   [X+0],A
    2B46: 51 2E    MOV   A,[__r0]
    2B48: 60 D5    MOV   REG[0xD5],A
    2B4A: 50 30    MOV   A,0x30
    2B4C: 3F 2D    MVI   [__r1],A
    2B4E: 80 36    JMP   0x2B85
    2B50: 50 00    MOV   A,0x0
    2B52: 08       PUSH  A
    2B53: 50 0A    MOV   A,0xA
    2B55: 08       PUSH  A
    2B56: 52 0C    MOV   A,[X+12]
    2B58: 08       PUSH  A
    2B59: 52 0D    MOV   A,[X+13]
    2B5B: 08       PUSH  A
    2B5C: 52 0E    MOV   A,[X+14]
    2B5E: 08       PUSH  A
    2B5F: 52 0F    MOV   A,[X+15]
    2B61: 08       PUSH  A
    2B62: 52 00    MOV   A,[X+0]
    2B64: 08       PUSH  A
    2B65: 52 01    MOV   A,[X+1]
    2B67: 08       PUSH  A
    2B68: 7C 26 3D LCALL _ltoa
    2B6B: 38 F8    ADD   SP,0xF8
    2B6D: 80 06    JMP   0x2B74
    2B6F: 77 01    INC   [X+1]
    2B71: 0F 00 00 ADC   [X+0],0x0
    2B74: 62 D0 05 MOV   REG[0xD0],0x5
    2B77: 52 01    MOV   A,[X+1]
    2B79: 53 2D    MOV   [__r1],A
    2B7B: 52 00    MOV   A,[X+0]
    2B7D: 60 D4    MOV   REG[0xD4],A
    2B7F: 3E 2D    MVI   A,[__r1]
    2B81: 39 00    CMP   A,0x0
    2B83: BF EB    JNZ   0x2B6F
    2B85: 62 D0 05 MOV   REG[0xD0],0x5
    2B88: 52 01    MOV   A,[X+1]
    2B8A: 53 2D    MOV   [__r1],A
    2B8C: 52 00    MOV   A,[X+0]
    2B8E: 53 2E    MOV   [__r0],A
    2B90: 51 2D    MOV   A,[__r1]
    2B92: 01 01    ADD   A,0x1
    2B94: 54 01    MOV   [X+1],A
    2B96: 51 2E    MOV   A,[__r0]
    2B98: 09 00    ADC   A,0x0
    2B9A: 54 00    MOV   [X+0],A
    2B9C: 51 2E    MOV   A,[__r0]
    2B9E: 60 D5    MOV   REG[0xD5],A
    2BA0: 50 2E    MOV   A,0x2E
    2BA2: 3F 2D    MVI   [__r1],A
    2BA4: 3D 02 00 CMP   [X+2],0x0
    2BA7: B0 31    JNZ   0x2BD9
    2BA9: 3D 03 00 CMP   [X+3],0x0
    2BAC: B0 2C    JNZ   0x2BD9
    2BAE: 3D 04 00 CMP   [X+4],0x0
    2BB1: B0 27    JNZ   0x2BD9
    2BB3: 3D 05 00 CMP   [X+5],0x0
    2BB6: B0 22    JNZ   0x2BD9
    2BB8: 62 D0 05 MOV   REG[0xD0],0x5
    2BBB: 52 01    MOV   A,[X+1]
    2BBD: 53 2D    MOV   [__r1],A
    2BBF: 52 00    MOV   A,[X+0]
    2BC1: 53 2E    MOV   [__r0],A
    2BC3: 51 2D    MOV   A,[__r1]
    2BC5: 01 01    ADD   A,0x1
    2BC7: 54 01    MOV   [X+1],A
    2BC9: 51 2E    MOV   A,[__r0]
    2BCB: 09 00    ADC   A,0x0
    2BCD: 54 00    MOV   [X+0],A
    2BCF: 51 2E    MOV   A,[__r0]
    2BD1: 60 D5    MOV   REG[0xD5],A
    2BD3: 50 30    MOV   A,0x30
    2BD5: 3F 2D    MVI   [__r1],A
    2BD7: 81 14    JMP   0x2CEC
    2BD9: 62 D0 05 MOV   REG[0xD0],0x5
    2BDC: 52 01    MOV   A,[X+1]
    2BDE: 11 E3    SUB   A,0xE3
    2BE0: 53 2D    MOV   [__r1],A
    2BE2: 52 00    MOV   A,[X+0]
    2BE4: 19 00    SBB   A,0x0
    2BE6: 53 2E    MOV   [__r0],A
    2BE8: 50 0F    MOV   A,0xF
    2BEA: 12 2D    SUB   A,[__r1]
    2BEC: 53 2D    MOV   [__r1],A
    2BEE: 50 00    MOV   A,0x0
    2BF0: 1A 2E    SBB   A,[__r0]
    2BF2: 53 2E    MOV   [__r0],A
    2BF4: 16 2D 01 SUB   [__r1],0x1
    2BF7: 1E 2E 00 SBB   [__r0],0x0
    2BFA: 51 2D    MOV   A,[__r1]
    2BFC: 54 15    MOV   [X+21],A
    2BFE: 50 07    MOV   A,0x7
    2C00: 3B 15    CMP   A,[X+21]
    2C02: D0 04    JNC   0x2C07
    2C04: 56 15 07 MOV   [X+21],0x7
    2C07: 56 14 00 MOV   [X+20],0x0
    2C0A: 80 A5    JMP   0x2CB0
    2C0C: 62 D0 05 MOV   REG[0xD0],0x5
    2C0F: 52 02    MOV   A,[X+2]
    2C11: 53 2E    MOV   [__r0],A
    2C13: 52 03    MOV   A,[X+3]
    2C15: 53 2D    MOV   [__r1],A
    2C17: 52 04    MOV   A,[X+4]
    2C19: 53 2C    MOV   [__r2],A
    2C1B: 52 05    MOV   A,[X+5]
    2C1D: 53 2B    MOV   [__r3],A
    2C1F: 65 2B    ASL   [__r3]
    2C21: 6B 2C    RLC   [__r2]
    2C23: 6B 2D    RLC   [__r1]
    2C25: 6B 2E    RLC   [__r0]
    2C27: 52 02    MOV   A,[X+2]
    2C29: 53 2A    MOV   [__r4],A
    2C2B: 52 03    MOV   A,[X+3]
    2C2D: 53 29    MOV   [__r5],A
    2C2F: 52 04    MOV   A,[X+4]
    2C31: 53 28    MOV   [__r6],A
    2C33: 52 05    MOV   A,[X+5]
    2C35: 53 27    MOV   [__r7],A
    2C37: 50 03    MOV   A,0x3
    2C39: 62 D0 05 MOV   REG[0xD0],0x5
    2C3C: 65 27    ASL   [__r7]
    2C3E: 6B 28    RLC   [__r6]
    2C40: 6B 29    RLC   [__r5]
    2C42: 6B 2A    RLC   [__r4]
    2C44: 78       DEC   A
    2C45: BF F3    JNZ   0x2C39
    2C47: 51 27    MOV   A,[__r7]
    2C49: 02 2B    ADD   A,[__r3]
    2C4B: 54 05    MOV   [X+5],A
    2C4D: 51 28    MOV   A,[__r6]
    2C4F: 0A 2C    ADC   A,[__r2]
    2C51: 54 04    MOV   [X+4],A
    2C53: 51 29    MOV   A,[__r5]
    2C55: 0A 2D    ADC   A,[__r1]
    2C57: 54 03    MOV   [X+3],A
    2C59: 51 2A    MOV   A,[__r4]
    2C5B: 0A 2E    ADC   A,[__r0]
    2C5D: 54 02    MOV   [X+2],A
    2C5F: 52 01    MOV   A,[X+1]
    2C61: 53 2D    MOV   [__r1],A
    2C63: 52 00    MOV   A,[X+0]
    2C65: 53 2E    MOV   [__r0],A
    2C67: 51 2D    MOV   A,[__r1]
    2C69: 01 01    ADD   A,0x1
    2C6B: 54 01    MOV   [X+1],A
    2C6D: 51 2E    MOV   A,[__r0]
    2C6F: 09 00    ADC   A,0x0
    2C71: 54 00    MOV   [X+0],A
    2C73: 52 02    MOV   A,[X+2]
    2C75: 53 2A    MOV   [__r4],A
    2C77: 52 03    MOV   A,[X+3]
    2C79: 53 29    MOV   [__r5],A
    2C7B: 52 04    MOV   A,[X+4]
    2C7D: 53 28    MOV   [__r6],A
    2C7F: 52 05    MOV   A,[X+5]
    2C81: 53 27    MOV   [__r7],A
    2C83: 50 18    MOV   A,0x18
    2C85: 62 D0 05 MOV   REG[0xD0],0x5
    2C88: 68 2A    ASR   [__r4]
    2C8A: 6E 29    RRC   [__r5]
    2C8C: 6E 28    RRC   [__r6]
    2C8E: 6E 27    RRC   [__r7]
    2C90: 78       DEC   A
    2C91: BF F3    JNZ   0x2C85
    2C93: 06 27 30 ADD   [__r7],0x30
    2C96: 0E 28 00 ADC   [__r6],0x0
    2C99: 0E 29 00 ADC   [__r5],0x0
    2C9C: 0E 2A 00 ADC   [__r4],0x0
    2C9F: 51 27    MOV   A,[__r7]
    2CA1: 53 2C    MOV   [__r2],A
    2CA3: 51 2E    MOV   A,[__r0]
    2CA5: 60 D5    MOV   REG[0xD5],A
    2CA7: 51 2C    MOV   A,[__r2]
    2CA9: 3F 2D    MVI   [__r1],A
    2CAB: 27 02 00 AND   [X+2],0x0
    2CAE: 77 14    INC   [X+20]
    2CB0: 52 14    MOV   A,[X+20]
    2CB2: 3B 15    CMP   A,[X+21]
    2CB4: CF 57    JC    0x2C0C
    2CB6: 07 01 FF ADD   [X+1],0xFF
    2CB9: 0F 00 FF ADC   [X+0],0xFF
    2CBC: 80 07    JMP   0x2CC4
    2CBE: 07 01 FF ADD   [X+1],0xFF
    2CC1: 0F 00 FF ADC   [X+0],0xFF
    2CC4: 62 D0 05 MOV   REG[0xD0],0x5
    2CC7: 52 01    MOV   A,[X+1]
    2CC9: 53 2D    MOV   [__r1],A
    2CCB: 52 00    MOV   A,[X+0]
    2CCD: 60 D4    MOV   REG[0xD4],A
    2CCF: 3E 2D    MVI   A,[__r1]
    2CD1: 39 30    CMP   A,0x30
    2CD3: B0 13    JNZ   0x2CE7
    2CD5: 52 01    MOV   A,[X+1]
    2CD7: 01 FF    ADD   A,0xFF
    2CD9: 53 2D    MOV   [__r1],A
    2CDB: 52 00    MOV   A,[X+0]
    2CDD: 09 FF    ADC   A,0xFF
    2CDF: 60 D4    MOV   REG[0xD4],A
    2CE1: 3E 2D    MVI   A,[__r1]
    2CE3: 39 2E    CMP   A,0x2E
    2CE5: BF D8    JNZ   0x2CBE
    2CE7: 77 01    INC   [X+1]
    2CE9: 0F 00 00 ADC   [X+0],0x0
    2CEC: 62 D0 05 MOV   REG[0xD0],0x5
    2CEF: 52 01    MOV   A,[X+1]
    2CF1: 53 2D    MOV   [__r1],A
    2CF3: 52 00    MOV   A,[X+0]
    2CF5: 60 D5    MOV   REG[0xD5],A
    2CF7: 50 00    MOV   A,0x0
    2CF9: 3F 2D    MVI   [__r1],A
    2CFB: 55 2D E3 MOV   [__r1],0xE3
    2CFE: 55 2E 00 MOV   [__r0],0x0
    2D01: 38 EA    ADD   SP,0xEA
    2D03: 20       POP   X
    2D04: 7F       RET   
_cosf:
    2D05: 10       PUSH  X
    2D06: 4F       MOV   X,SP
    2D07: 50 00    MOV   A,0x0
    2D09: 08       PUSH  A
    2D0A: 08       PUSH  A
    2D0B: 08       PUSH  A
    2D0C: 08       PUSH  A
    2D0D: 52 F9    MOV   A,[X-7]
    2D0F: 08       PUSH  A
    2D10: 52 FA    MOV   A,[X-6]
    2D12: 08       PUSH  A
    2D13: 52 FB    MOV   A,[X-5]
    2D15: 08       PUSH  A
    2D16: 52 FC    MOV   A,[X-4]
    2D18: 08       PUSH  A
    2D19: 62 D0 05 MOV   REG[0xD0],0x5
    2D1C: 7C 22 8E LCALL 0x228E
    2D1F: 38 F8    ADD   SP,0xF8
    2D21: 39 FF    CMP   A,0xFF
    2D23: A0 17    JZ    0x2D3B
    2D25: 50 01    MOV   A,0x1
    2D27: 08       PUSH  A
    2D28: 52 F9    MOV   A,[X-7]
    2D2A: 08       PUSH  A
    2D2B: 52 FA    MOV   A,[X-6]
    2D2D: 08       PUSH  A
    2D2E: 52 FB    MOV   A,[X-5]
    2D30: 08       PUSH  A
    2D31: 52 FC    MOV   A,[X-4]
    2D33: 08       PUSH  A
    2D34: 7C 32 0C LCALL _sinus
    2D37: 38 FB    ADD   SP,0xFB
    2D39: 80 2B    JMP   0x2D65
    2D3B: 50 01    MOV   A,0x1
    2D3D: 08       PUSH  A
    2D3E: 62 D0 05 MOV   REG[0xD0],0x5
    2D41: 52 F9    MOV   A,[X-7]
    2D43: 53 2E    MOV   [__r0],A
    2D45: 52 FA    MOV   A,[X-6]
    2D47: 53 2D    MOV   [__r1],A
    2D49: 52 FB    MOV   A,[X-5]
    2D4B: 53 2C    MOV   [__r2],A
    2D4D: 52 FC    MOV   A,[X-4]
    2D4F: 53 2B    MOV   [__r3],A
    2D51: 36 2E 80 XOR   [__r0],0x80
    2D54: 51 2E    MOV   A,[__r0]
    2D56: 08       PUSH  A
    2D57: 51 2D    MOV   A,[__r1]
    2D59: 08       PUSH  A
    2D5A: 51 2C    MOV   A,[__r2]
    2D5C: 08       PUSH  A
    2D5D: 51 2B    MOV   A,[__r3]
    2D5F: 08       PUSH  A
    2D60: 7C 32 0C LCALL _sinus
    2D63: 38 FB    ADD   SP,0xFB
    2D65: 20       POP   X
    2D66: 7F       RET   
_floorf:
    2D67: 10       PUSH  X
    2D68: 4F       MOV   X,SP
    2D69: 38 08    ADD   SP,0x8
    2D6B: 52 F9    MOV   A,[X-7]
    2D6D: 54 04    MOV   [X+4],A
    2D6F: 52 FA    MOV   A,[X-6]
    2D71: 54 05    MOV   [X+5],A
    2D73: 52 FB    MOV   A,[X-5]
    2D75: 54 06    MOV   [X+6],A
    2D77: 52 FC    MOV   A,[X-4]
    2D79: 54 07    MOV   [X+7],A
    2D7B: 52 F9    MOV   A,[X-7]
    2D7D: 08       PUSH  A
    2D7E: 52 FA    MOV   A,[X-6]
    2D80: 08       PUSH  A
    2D81: 52 FB    MOV   A,[X-5]
    2D83: 08       PUSH  A
    2D84: 52 FC    MOV   A,[X-4]
    2D86: 08       PUSH  A
    2D87: 62 D0 05 MOV   REG[0xD0],0x5
    2D8A: 7C 20 7D LCALL 0x207D
    2D8D: 18       POP   A
    2D8E: 54 03    MOV   [X+3],A
    2D90: 18       POP   A
    2D91: 54 02    MOV   [X+2],A
    2D93: 18       POP   A
    2D94: 54 01    MOV   [X+1],A
    2D96: 18       POP   A
    2D97: 54 00    MOV   [X+0],A
    2D99: 52 00    MOV   A,[X+0]
    2D9B: 08       PUSH  A
    2D9C: 52 01    MOV   A,[X+1]
    2D9E: 08       PUSH  A
    2D9F: 52 02    MOV   A,[X+2]
    2DA1: 08       PUSH  A
    2DA2: 52 03    MOV   A,[X+3]
    2DA4: 08       PUSH  A
    2DA5: 7C 25 D2 LCALL 0x25D2
    2DA8: 18       POP   A
    2DA9: 53 2B    MOV   [__r3],A
    2DAB: 18       POP   A
    2DAC: 53 2C    MOV   [__r2],A
    2DAE: 18       POP   A
    2DAF: 53 2D    MOV   [__r1],A
    2DB1: 18       POP   A
    2DB2: 53 2E    MOV   [__r0],A
    2DB4: 52 F9    MOV   A,[X-7]
    2DB6: 08       PUSH  A
    2DB7: 52 FA    MOV   A,[X-6]
    2DB9: 08       PUSH  A
    2DBA: 52 FB    MOV   A,[X-5]
    2DBC: 08       PUSH  A
    2DBD: 52 FC    MOV   A,[X-4]
    2DBF: 08       PUSH  A
    2DC0: 51 2E    MOV   A,[__r0]
    2DC2: 08       PUSH  A
    2DC3: 51 2D    MOV   A,[__r1]
    2DC5: 08       PUSH  A
    2DC6: 51 2C    MOV   A,[__r2]
    2DC8: 08       PUSH  A
    2DC9: 51 2B    MOV   A,[__r3]
    2DCB: 08       PUSH  A
    2DCC: 7C 22 8E LCALL 0x228E
    2DCF: 38 F8    ADD   SP,0xF8
    2DD1: 39 00    CMP   A,0x0
    2DD3: A0 17    JZ    0x2DEB
    2DD5: 52 05    MOV   A,[X+5]
    2DD7: 21 80    AND   A,0x80
    2DD9: 53 2D    MOV   [__r1],A
    2DDB: 52 04    MOV   A,[X+4]
    2DDD: 21 7F    AND   A,0x7F
    2DDF: 53 2E    MOV   [__r0],A
    2DE1: 51 2D    MOV   A,[__r1]
    2DE3: 11 80    SUB   A,0x80
    2DE5: 51 2E    MOV   A,[__r0]
    2DE7: 19 4B    SBB   A,0x4B
    2DE9: C0 16    JC    0x2E00
    2DEB: 62 D0 05 MOV   REG[0xD0],0x5
    2DEE: 52 F9    MOV   A,[X-7]
    2DF0: 53 2E    MOV   [__r0],A
    2DF2: 52 FA    MOV   A,[X-6]
    2DF4: 53 2D    MOV   [__r1],A
    2DF6: 52 FB    MOV   A,[X-5]
    2DF8: 53 2C    MOV   [__r2],A
    2DFA: 52 FC    MOV   A,[X-4]
    2DFC: 53 2B    MOV   [__r3],A
    2DFE: 80 84    JMP   0x2E83
    2E00: 50 00    MOV   A,0x0
    2E02: 08       PUSH  A
    2E03: 08       PUSH  A
    2E04: 08       PUSH  A
    2E05: 08       PUSH  A
    2E06: 52 F9    MOV   A,[X-7]
    2E08: 08       PUSH  A
    2E09: 52 FA    MOV   A,[X-6]
    2E0B: 08       PUSH  A
    2E0C: 52 FB    MOV   A,[X-5]
    2E0E: 08       PUSH  A
    2E0F: 52 FC    MOV   A,[X-4]
    2E11: 08       PUSH  A
    2E12: 62 D0 05 MOV   REG[0xD0],0x5
    2E15: 7C 22 8E LCALL 0x228E
    2E18: 38 F8    ADD   SP,0xF8
    2E1A: 39 00    CMP   A,0x0
    2E1C: A0 22    JZ    0x2E3F
    2E1E: 39 01    CMP   A,0x1
    2E20: B0 1E    JNZ   0x2E3F
    2E22: 52 00    MOV   A,[X+0]
    2E24: 08       PUSH  A
    2E25: 52 01    MOV   A,[X+1]
    2E27: 08       PUSH  A
    2E28: 52 02    MOV   A,[X+2]
    2E2A: 08       PUSH  A
    2E2B: 52 03    MOV   A,[X+3]
    2E2D: 08       PUSH  A
    2E2E: 7C 25 D2 LCALL 0x25D2
    2E31: 18       POP   A
    2E32: 53 2B    MOV   [__r3],A
    2E34: 18       POP   A
    2E35: 53 2C    MOV   [__r2],A
    2E37: 18       POP   A
    2E38: 53 2D    MOV   [__r1],A
    2E3A: 18       POP   A
    2E3B: 53 2E    MOV   [__r0],A
    2E3D: 80 45    JMP   0x2E83
    2E3F: 62 D0 05 MOV   REG[0xD0],0x5
    2E42: 52 03    MOV   A,[X+3]
    2E44: 11 01    SUB   A,0x1
    2E46: 53 2B    MOV   [__r3],A
    2E48: 52 02    MOV   A,[X+2]
    2E4A: 19 00    SBB   A,0x0
    2E4C: 53 2C    MOV   [__r2],A
    2E4E: 52 01    MOV   A,[X+1]
    2E50: 19 00    SBB   A,0x0
    2E52: 53 2D    MOV   [__r1],A
    2E54: 52 00    MOV   A,[X+0]
    2E56: 19 00    SBB   A,0x0
    2E58: 53 2E    MOV   [__r0],A
    2E5A: 54 00    MOV   [X+0],A
    2E5C: 51 2D    MOV   A,[__r1]
    2E5E: 54 01    MOV   [X+1],A
    2E60: 51 2C    MOV   A,[__r2]
    2E62: 54 02    MOV   [X+2],A
    2E64: 51 2B    MOV   A,[__r3]
    2E66: 54 03    MOV   [X+3],A
    2E68: 51 2E    MOV   A,[__r0]
    2E6A: 08       PUSH  A
    2E6B: 51 2D    MOV   A,[__r1]
    2E6D: 08       PUSH  A
    2E6E: 51 2C    MOV   A,[__r2]
    2E70: 08       PUSH  A
    2E71: 51 2B    MOV   A,[__r3]
    2E73: 08       PUSH  A
    2E74: 7C 25 D2 LCALL 0x25D2
    2E77: 18       POP   A
    2E78: 53 2B    MOV   [__r3],A
    2E7A: 18       POP   A
    2E7B: 53 2C    MOV   [__r2],A
    2E7D: 18       POP   A
    2E7E: 53 2D    MOV   [__r1],A
    2E80: 18       POP   A
    2E81: 53 2E    MOV   [__r0],A
    2E83: 38 F8    ADD   SP,0xF8
    2E85: 20       POP   X
    2E86: 7F       RET   
_frexpf:
    2E87: 10       PUSH  X
    2E88: 4F       MOV   X,SP
    2E89: 38 08    ADD   SP,0x8
    2E8B: 50 00    MOV   A,0x0
    2E8D: 08       PUSH  A
    2E8E: 08       PUSH  A
    2E8F: 08       PUSH  A
    2E90: 08       PUSH  A
    2E91: 52 F9    MOV   A,[X-7]
    2E93: 08       PUSH  A
    2E94: 52 FA    MOV   A,[X-6]
    2E96: 08       PUSH  A
    2E97: 52 FB    MOV   A,[X-5]
    2E99: 08       PUSH  A
    2E9A: 52 FC    MOV   A,[X-4]
    2E9C: 08       PUSH  A
    2E9D: 62 D0 05 MOV   REG[0xD0],0x5
    2EA0: 7C 22 8E LCALL 0x228E
    2EA3: 38 F8    ADD   SP,0xF8
    2EA5: 39 00    CMP   A,0x0
    2EA7: B0 1D    JNZ   0x2EC5
    2EA9: 52 F8    MOV   A,[X-8]
    2EAB: 53 2D    MOV   [__r1],A
    2EAD: 52 F7    MOV   A,[X-9]
    2EAF: 60 D5    MOV   REG[0xD5],A
    2EB1: 50 00    MOV   A,0x0
    2EB3: 3F 2D    MVI   [__r1],A
    2EB5: 3F 2D    MVI   [__r1],A
    2EB7: 55 2E 00 MOV   [__r0],0x0
    2EBA: 55 2D 00 MOV   [__r1],0x0
    2EBD: 55 2C 00 MOV   [__r2],0x0
    2EC0: 55 2B 00 MOV   [__r3],0x0
    2EC3: 80 95    JMP   0x2F59
    2EC5: 52 F9    MOV   A,[X-7]
    2EC7: 54 00    MOV   [X+0],A
    2EC9: 52 FA    MOV   A,[X-6]
    2ECB: 54 01    MOV   [X+1],A
    2ECD: 52 FB    MOV   A,[X-5]
    2ECF: 54 02    MOV   [X+2],A
    2ED1: 52 FC    MOV   A,[X-4]
    2ED3: 54 03    MOV   [X+3],A
    2ED5: 66 01    ASL   [X+1]
    2ED7: 6C 00    RLC   [X+0]
    2ED9: 62 D0 05 MOV   REG[0xD0],0x5
    2EDC: 52 00    MOV   A,[X+0]
    2EDE: 53 2D    MOV   [__r1],A
    2EE0: 55 2E 00 MOV   [__r0],0x0
    2EE3: 16 2D 7E SUB   [__r1],0x7E
    2EE6: 1E 2E 00 SBB   [__r0],0x0
    2EE9: 52 F8    MOV   A,[X-8]
    2EEB: 53 2B    MOV   [__r3],A
    2EED: 52 F7    MOV   A,[X-9]
    2EEF: 60 D5    MOV   REG[0xD5],A
    2EF1: 51 2E    MOV   A,[__r0]
    2EF3: 3F 2B    MVI   [__r3],A
    2EF5: 51 2D    MOV   A,[__r1]
    2EF7: 3F 2B    MVI   [__r3],A
    2EF9: 56 00 7E MOV   [X+0],0x7E
    2EFC: 70 FB    AND   F,0xFB
    2EFE: 6F 00    RRC   [X+0]
    2F00: 6F 01    RRC   [X+1]
    2F02: 50 00    MOV   A,0x0
    2F04: 08       PUSH  A
    2F05: 08       PUSH  A
    2F06: 08       PUSH  A
    2F07: 08       PUSH  A
    2F08: 52 F9    MOV   A,[X-7]
    2F0A: 08       PUSH  A
    2F0B: 52 FA    MOV   A,[X-6]
    2F0D: 08       PUSH  A
    2F0E: 52 FB    MOV   A,[X-5]
    2F10: 08       PUSH  A
    2F11: 52 FC    MOV   A,[X-4]
    2F13: 08       PUSH  A
    2F14: 7C 22 8E LCALL 0x228E
    2F17: 38 F8    ADD   SP,0xF8
    2F19: 39 00    CMP   A,0x0
    2F1B: A0 1A    JZ    0x2F36
    2F1D: 39 01    CMP   A,0x1
    2F1F: A0 16    JZ    0x2F36
    2F21: 52 00    MOV   A,[X+0]
    2F23: 54 04    MOV   [X+4],A
    2F25: 52 01    MOV   A,[X+1]
    2F27: 54 05    MOV   [X+5],A
    2F29: 52 02    MOV   A,[X+2]
    2F2B: 54 06    MOV   [X+6],A
    2F2D: 52 03    MOV   A,[X+3]
    2F2F: 54 07    MOV   [X+7],A
    2F31: 37 04 80 XOR   [X+4],0x80
    2F34: 80 11    JMP   0x2F46
    2F36: 52 00    MOV   A,[X+0]
    2F38: 54 04    MOV   [X+4],A
    2F3A: 52 01    MOV   A,[X+1]
    2F3C: 54 05    MOV   [X+5],A
    2F3E: 52 02    MOV   A,[X+2]
    2F40: 54 06    MOV   [X+6],A
    2F42: 52 03    MOV   A,[X+3]
    2F44: 54 07    MOV   [X+7],A
    2F46: 62 D0 05 MOV   REG[0xD0],0x5
    2F49: 52 04    MOV   A,[X+4]
    2F4B: 53 2E    MOV   [__r0],A
    2F4D: 52 05    MOV   A,[X+5]
    2F4F: 53 2D    MOV   [__r1],A
    2F51: 52 06    MOV   A,[X+6]
    2F53: 53 2C    MOV   [__r2],A
    2F55: 52 07    MOV   A,[X+7]
    2F57: 53 2B    MOV   [__r3],A
    2F59: 38 F8    ADD   SP,0xF8
    2F5B: 20       POP   X
    2F5C: 7F       RET   
_logf:
    2F5D: 10       PUSH  X
    2F5E: 4F       MOV   X,SP
    2F5F: 38 06    ADD   SP,0x6
    2F61: 50 00    MOV   A,0x0
    2F63: 08       PUSH  A
    2F64: 08       PUSH  A
    2F65: 08       PUSH  A
    2F66: 08       PUSH  A
    2F67: 52 F9    MOV   A,[X-7]
    2F69: 08       PUSH  A
    2F6A: 52 FA    MOV   A,[X-6]
    2F6C: 08       PUSH  A
    2F6D: 52 FB    MOV   A,[X-5]
    2F6F: 08       PUSH  A
    2F70: 52 FC    MOV   A,[X-4]
    2F72: 08       PUSH  A
    2F73: 62 D0 05 MOV   REG[0xD0],0x5
    2F76: 7C 22 8E LCALL 0x228E
    2F79: 38 F8    ADD   SP,0xF8
    2F7B: 39 01    CMP   A,0x1
    2F7D: A0 1B    JZ    0x2F99
    2F7F: 62 D0 05 MOV   REG[0xD0],0x5
    2F82: 55 52 01 MOV   [errno+1],0x1
    2F85: 55 51 00 MOV   [errno],0x0
    2F88: 62 D0 05 MOV   REG[0xD0],0x5
    2F8B: 55 2E FF MOV   [__r0],0xFF
    2F8E: 55 2D 7F MOV   [__r1],0x7F
    2F91: 55 2C FF MOV   [__r2],0xFF
    2F94: 55 2B FF MOV   [__r3],0xFF
    2F97: 82 70    JMP   0x3208
    2F99: 62 D0 05 MOV   REG[0xD0],0x5
    2F9C: 5A 2D    MOV   [__r1],X
    2F9E: 06 2D 04 ADD   [__r1],0x4
    2FA1: 50 07    MOV   A,0x7
    2FA3: 08       PUSH  A
    2FA4: 51 2D    MOV   A,[__r1]
    2FA6: 08       PUSH  A
    2FA7: 52 F9    MOV   A,[X-7]
    2FA9: 08       PUSH  A
    2FAA: 52 FA    MOV   A,[X-6]
    2FAC: 08       PUSH  A
    2FAD: 52 FB    MOV   A,[X-5]
    2FAF: 08       PUSH  A
    2FB0: 52 FC    MOV   A,[X-4]
    2FB2: 08       PUSH  A
    2FB3: 7C 2E 87 LCALL _frexpf
    2FB6: 38 FA    ADD   SP,0xFA
    2FB8: 62 D0 05 MOV   REG[0xD0],0x5
    2FBB: 51 2E    MOV   A,[__r0]
    2FBD: 54 F9    MOV   [X-7],A
    2FBF: 51 2D    MOV   A,[__r1]
    2FC1: 54 FA    MOV   [X-6],A
    2FC3: 51 2C    MOV   A,[__r2]
    2FC5: 54 FB    MOV   [X-5],A
    2FC7: 51 2B    MOV   A,[__r3]
    2FC9: 54 FC    MOV   [X-4],A
    2FCB: 50 3F    MOV   A,0x3F
    2FCD: 08       PUSH  A
    2FCE: 50 35    MOV   A,0x35
    2FD0: 08       PUSH  A
    2FD1: 50 04    MOV   A,0x4
    2FD3: 08       PUSH  A
    2FD4: 50 F3    MOV   A,0xF3
    2FD6: 08       PUSH  A
    2FD7: 52 F9    MOV   A,[X-7]
    2FD9: 08       PUSH  A
    2FDA: 52 FA    MOV   A,[X-6]
    2FDC: 08       PUSH  A
    2FDD: 52 FB    MOV   A,[X-5]
    2FDF: 08       PUSH  A
    2FE0: 52 FC    MOV   A,[X-4]
    2FE2: 08       PUSH  A
    2FE3: 7C 22 8E LCALL 0x228E
    2FE6: 38 F8    ADD   SP,0xF8
    2FE8: 39 00    CMP   A,0x0
    2FEA: A0 33    JZ    0x301E
    2FEC: 39 01    CMP   A,0x1
    2FEE: A0 2F    JZ    0x301E
    2FF0: 52 F9    MOV   A,[X-7]
    2FF2: 08       PUSH  A
    2FF3: 52 FA    MOV   A,[X-6]
    2FF5: 08       PUSH  A
    2FF6: 52 FB    MOV   A,[X-5]
    2FF8: 08       PUSH  A
    2FF9: 52 FC    MOV   A,[X-4]
    2FFB: 08       PUSH  A
    2FFC: 52 F9    MOV   A,[X-7]
    2FFE: 08       PUSH  A
    2FFF: 52 FA    MOV   A,[X-6]
    3001: 08       PUSH  A
    3002: 52 FB    MOV   A,[X-5]
    3004: 08       PUSH  A
    3005: 52 FC    MOV   A,[X-4]
    3007: 08       PUSH  A
    3008: 7C 21 8E LCALL 0x218E
    300B: 18       POP   A
    300C: 54 FC    MOV   [X-4],A
    300E: 18       POP   A
    300F: 54 FB    MOV   [X-5],A
    3011: 18       POP   A
    3012: 54 FA    MOV   [X-6],A
    3014: 18       POP   A
    3015: 54 F9    MOV   [X-7],A
    3017: 38 FC    ADD   SP,0xFC
    3019: 7B 05    DEC   [X+5]
    301B: 1F 04 00 SBB   [X+4],0x0
    301E: 62 D0 05 MOV   REG[0xD0],0x5
    3021: 50 3F    MOV   A,0x3F
    3023: 08       PUSH  A
    3024: 50 80    MOV   A,0x80
    3026: 08       PUSH  A
    3027: 50 00    MOV   A,0x0
    3029: 08       PUSH  A
    302A: 08       PUSH  A
    302B: 52 F9    MOV   A,[X-7]
    302D: 08       PUSH  A
    302E: 52 FA    MOV   A,[X-6]
    3030: 08       PUSH  A
    3031: 52 FB    MOV   A,[X-5]
    3033: 08       PUSH  A
    3034: 52 FC    MOV   A,[X-4]
    3036: 08       PUSH  A
    3037: 7C 24 F8 LCALL 0x24F8
    303A: 18       POP   A
    303B: 53 2B    MOV   [__r3],A
    303D: 18       POP   A
    303E: 53 2C    MOV   [__r2],A
    3040: 18       POP   A
    3041: 53 2D    MOV   [__r1],A
    3043: 18       POP   A
    3044: 53 2E    MOV   [__r0],A
    3046: 38 FC    ADD   SP,0xFC
    3048: 50 3F    MOV   A,0x3F
    304A: 08       PUSH  A
    304B: 50 80    MOV   A,0x80
    304D: 08       PUSH  A
    304E: 50 00    MOV   A,0x0
    3050: 08       PUSH  A
    3051: 08       PUSH  A
    3052: 52 F9    MOV   A,[X-7]
    3054: 08       PUSH  A
    3055: 52 FA    MOV   A,[X-6]
    3057: 08       PUSH  A
    3058: 52 FB    MOV   A,[X-5]
    305A: 08       PUSH  A
    305B: 52 FC    MOV   A,[X-4]
    305D: 08       PUSH  A
    305E: 7C 21 8E LCALL 0x218E
    3061: 18       POP   A
    3062: 53 27    MOV   [__r7],A
    3064: 18       POP   A
    3065: 53 28    MOV   [__r6],A
    3067: 18       POP   A
    3068: 53 29    MOV   [__r5],A
    306A: 18       POP   A
    306B: 38 FC    ADD   SP,0xFC
    306D: 08       PUSH  A
    306E: 51 29    MOV   A,[__r5]
    3070: 08       PUSH  A
    3071: 51 28    MOV   A,[__r6]
    3073: 08       PUSH  A
    3074: 51 27    MOV   A,[__r7]
    3076: 08       PUSH  A
    3077: 51 2E    MOV   A,[__r0]
    3079: 08       PUSH  A
    307A: 51 2D    MOV   A,[__r1]
    307C: 08       PUSH  A
    307D: 51 2C    MOV   A,[__r2]
    307F: 08       PUSH  A
    3080: 51 2B    MOV   A,[__r3]
    3082: 08       PUSH  A
    3083: 7C 22 EB LCALL 0x22EB
    3086: 18       POP   A
    3087: 54 FC    MOV   [X-4],A
    3089: 18       POP   A
    308A: 54 FB    MOV   [X-5],A
    308C: 18       POP   A
    308D: 54 FA    MOV   [X-6],A
    308F: 18       POP   A
    3090: 54 F9    MOV   [X-7],A
    3092: 38 FC    ADD   SP,0xFC
    3094: 52 F9    MOV   A,[X-7]
    3096: 08       PUSH  A
    3097: 52 FA    MOV   A,[X-6]
    3099: 08       PUSH  A
    309A: 52 FB    MOV   A,[X-5]
    309C: 08       PUSH  A
    309D: 52 FC    MOV   A,[X-4]
    309F: 08       PUSH  A
    30A0: 52 F9    MOV   A,[X-7]
    30A2: 08       PUSH  A
    30A3: 52 FA    MOV   A,[X-6]
    30A5: 08       PUSH  A
    30A6: 52 FB    MOV   A,[X-5]
    30A8: 08       PUSH  A
    30A9: 52 FC    MOV   A,[X-4]
    30AB: 08       PUSH  A
    30AC: 7C 23 CE LCALL 0x23CE
    30AF: 18       POP   A
    30B0: 54 03    MOV   [X+3],A
    30B2: 18       POP   A
    30B3: 54 02    MOV   [X+2],A
    30B5: 18       POP   A
    30B6: 54 01    MOV   [X+1],A
    30B8: 18       POP   A
    30B9: 54 00    MOV   [X+0],A
    30BB: 38 FC    ADD   SP,0xFC
    30BD: 52 00    MOV   A,[X+0]
    30BF: 08       PUSH  A
    30C0: 52 01    MOV   A,[X+1]
    30C2: 08       PUSH  A
    30C3: 52 02    MOV   A,[X+2]
    30C5: 08       PUSH  A
    30C6: 52 03    MOV   A,[X+3]
    30C8: 08       PUSH  A
    30C9: 50 3F    MOV   A,0x3F
    30CB: 08       PUSH  A
    30CC: 50 65    MOV   A,0x65
    30CE: 08       PUSH  A
    30CF: 50 42    MOV   A,0x42
    30D1: 08       PUSH  A
    30D2: 50 26    MOV   A,0x26
    30D4: 08       PUSH  A
    30D5: 7C 23 CE LCALL 0x23CE
    30D8: 18       POP   A
    30D9: 53 2B    MOV   [__r3],A
    30DB: 18       POP   A
    30DC: 53 2C    MOV   [__r2],A
    30DE: 18       POP   A
    30DF: 53 2D    MOV   [__r1],A
    30E1: 18       POP   A
    30E2: 53 2E    MOV   [__r0],A
    30E4: 38 FC    ADD   SP,0xFC
    30E6: 50 40    MOV   A,0x40
    30E8: 08       PUSH  A
    30E9: 50 54    MOV   A,0x54
    30EB: 08       PUSH  A
    30EC: 50 11    MOV   A,0x11
    30EE: 08       PUSH  A
    30EF: 50 4E    MOV   A,0x4E
    30F1: 08       PUSH  A
    30F2: 51 2E    MOV   A,[__r0]
    30F4: 08       PUSH  A
    30F5: 51 2D    MOV   A,[__r1]
    30F7: 08       PUSH  A
    30F8: 51 2C    MOV   A,[__r2]
    30FA: 08       PUSH  A
    30FB: 51 2B    MOV   A,[__r3]
    30FD: 08       PUSH  A
    30FE: 7C 24 F8 LCALL 0x24F8
    3101: 18       POP   A
    3102: 53 2B    MOV   [__r3],A
    3104: 18       POP   A
    3105: 53 2C    MOV   [__r2],A
    3107: 18       POP   A
    3108: 53 2D    MOV   [__r1],A
    310A: 18       POP   A
    310B: 38 FC    ADD   SP,0xFC
    310D: 08       PUSH  A
    310E: 51 2D    MOV   A,[__r1]
    3110: 08       PUSH  A
    3111: 51 2C    MOV   A,[__r2]
    3113: 08       PUSH  A
    3114: 51 2B    MOV   A,[__r3]
    3116: 08       PUSH  A
    3117: 52 F9    MOV   A,[X-7]
    3119: 08       PUSH  A
    311A: 52 FA    MOV   A,[X-6]
    311C: 08       PUSH  A
    311D: 52 FB    MOV   A,[X-5]
    311F: 08       PUSH  A
    3120: 52 FC    MOV   A,[X-4]
    3122: 08       PUSH  A
    3123: 7C 23 CE LCALL 0x23CE
    3126: 18       POP   A
    3127: 53 2B    MOV   [__r3],A
    3129: 18       POP   A
    312A: 53 2C    MOV   [__r2],A
    312C: 18       POP   A
    312D: 53 2D    MOV   [__r1],A
    312F: 18       POP   A
    3130: 53 2E    MOV   [__r0],A
    3132: 38 FC    ADD   SP,0xFC
    3134: 50 3F    MOV   A,0x3F
    3136: 08       PUSH  A
    3137: 50 D4    MOV   A,0xD4
    3139: 08       PUSH  A
    313A: 50 11    MOV   A,0x11
    313C: 08       PUSH  A
    313D: 50 4D    MOV   A,0x4D
    313F: 08       PUSH  A
    3140: 52 00    MOV   A,[X+0]
    3142: 08       PUSH  A
    3143: 52 01    MOV   A,[X+1]
    3145: 08       PUSH  A
    3146: 52 02    MOV   A,[X+2]
    3148: 08       PUSH  A
    3149: 52 03    MOV   A,[X+3]
    314B: 08       PUSH  A
    314C: 7C 24 F8 LCALL 0x24F8
    314F: 18       POP   A
    3150: 53 27    MOV   [__r7],A
    3152: 18       POP   A
    3153: 53 28    MOV   [__r6],A
    3155: 18       POP   A
    3156: 53 29    MOV   [__r5],A
    3158: 18       POP   A
    3159: 38 FC    ADD   SP,0xFC
    315B: 08       PUSH  A
    315C: 51 29    MOV   A,[__r5]
    315E: 08       PUSH  A
    315F: 51 28    MOV   A,[__r6]
    3161: 08       PUSH  A
    3162: 51 27    MOV   A,[__r7]
    3164: 08       PUSH  A
    3165: 51 2E    MOV   A,[__r0]
    3167: 08       PUSH  A
    3168: 51 2D    MOV   A,[__r1]
    316A: 08       PUSH  A
    316B: 51 2C    MOV   A,[__r2]
    316D: 08       PUSH  A
    316E: 51 2B    MOV   A,[__r3]
    3170: 08       PUSH  A
    3171: 7C 22 EB LCALL 0x22EB
    3174: 18       POP   A
    3175: 53 2B    MOV   [__r3],A
    3177: 18       POP   A
    3178: 53 2C    MOV   [__r2],A
    317A: 18       POP   A
    317B: 53 2D    MOV   [__r1],A
    317D: 18       POP   A
    317E: 53 2E    MOV   [__r0],A
    3180: 38 FC    ADD   SP,0xFC
    3182: 52 05    MOV   A,[X+5]
    3184: 53 27    MOV   [__r7],A
    3186: 52 04    MOV   A,[X+4]
    3188: 53 28    MOV   [__r6],A
    318A: 47 28 80 TST   [__r6],0x80
    318D: A0 09    JZ    0x3197
    318F: 55 29 FF MOV   [__r5],0xFF
    3192: 55 2A FF MOV   [__r4],0xFF
    3195: 80 0A    JMP   0x31A0
    3197: 62 D0 05 MOV   REG[0xD0],0x5
    319A: 55 29 00 MOV   [__r5],0x0
    319D: 55 2A 00 MOV   [__r4],0x0
    31A0: 62 D0 05 MOV   REG[0xD0],0x5
    31A3: 51 2A    MOV   A,[__r4]
    31A5: 08       PUSH  A
    31A6: 51 29    MOV   A,[__r5]
    31A8: 08       PUSH  A
    31A9: 51 28    MOV   A,[__r6]
    31AB: 08       PUSH  A
    31AC: 51 27    MOV   A,[__r7]
    31AE: 08       PUSH  A
    31AF: 7C 25 D2 LCALL 0x25D2
    31B2: 18       POP   A
    31B3: 53 27    MOV   [__r7],A
    31B5: 18       POP   A
    31B6: 53 28    MOV   [__r6],A
    31B8: 18       POP   A
    31B9: 53 29    MOV   [__r5],A
    31BB: 18       POP   A
    31BC: 08       PUSH  A
    31BD: 51 29    MOV   A,[__r5]
    31BF: 08       PUSH  A
    31C0: 51 28    MOV   A,[__r6]
    31C2: 08       PUSH  A
    31C3: 51 27    MOV   A,[__r7]
    31C5: 08       PUSH  A
    31C6: 50 3F    MOV   A,0x3F
    31C8: 08       PUSH  A
    31C9: 50 31    MOV   A,0x31
    31CB: 08       PUSH  A
    31CC: 50 72    MOV   A,0x72
    31CE: 08       PUSH  A
    31CF: 50 18    MOV   A,0x18
    31D1: 08       PUSH  A
    31D2: 7C 23 CE LCALL 0x23CE
    31D5: 18       POP   A
    31D6: 53 27    MOV   [__r7],A
    31D8: 18       POP   A
    31D9: 53 28    MOV   [__r6],A
    31DB: 18       POP   A
    31DC: 53 29    MOV   [__r5],A
    31DE: 18       POP   A
    31DF: 38 FC    ADD   SP,0xFC
    31E1: 08       PUSH  A
    31E2: 51 29    MOV   A,[__r5]
    31E4: 08       PUSH  A
    31E5: 51 28    MOV   A,[__r6]
    31E7: 08       PUSH  A
    31E8: 51 27    MOV   A,[__r7]
    31EA: 08       PUSH  A
    31EB: 51 2E    MOV   A,[__r0]
    31ED: 08       PUSH  A
    31EE: 51 2D    MOV   A,[__r1]
    31F0: 08       PUSH  A
    31F1: 51 2C    MOV   A,[__r2]
    31F3: 08       PUSH  A
    31F4: 51 2B    MOV   A,[__r3]
    31F6: 08       PUSH  A
    31F7: 7C 21 8E LCALL 0x218E
    31FA: 18       POP   A
    31FB: 53 2B    MOV   [__r3],A
    31FD: 18       POP   A
    31FE: 53 2C    MOV   [__r2],A
    3200: 18       POP   A
    3201: 53 2D    MOV   [__r1],A
    3203: 18       POP   A
    3204: 53 2E    MOV   [__r0],A
    3206: 38 FC    ADD   SP,0xFC
    3208: 38 FA    ADD   SP,0xFA
    320A: 20       POP   X
    320B: 7F       RET   
_sinus:
    320C: 10       PUSH  X
    320D: 4F       MOV   X,SP
    320E: 38 08    ADD   SP,0x8
    3210: 52 F9    MOV   A,[X-7]
    3212: 08       PUSH  A
    3213: 52 FA    MOV   A,[X-6]
    3215: 08       PUSH  A
    3216: 52 FB    MOV   A,[X-5]
    3218: 08       PUSH  A
    3219: 52 FC    MOV   A,[X-4]
    321B: 08       PUSH  A
    321C: 50 3F    MOV   A,0x3F
    321E: 08       PUSH  A
    321F: 50 22    MOV   A,0x22
    3221: 08       PUSH  A
    3222: 50 F9    MOV   A,0xF9
    3224: 08       PUSH  A
    3225: 50 83    MOV   A,0x83
    3227: 08       PUSH  A
    3228: 62 D0 05 MOV   REG[0xD0],0x5
    322B: 7C 23 CE LCALL 0x23CE
    322E: 18       POP   A
    322F: 54 FC    MOV   [X-4],A
    3231: 18       POP   A
    3232: 54 FB    MOV   [X-5],A
    3234: 18       POP   A
    3235: 54 FA    MOV   [X-6],A
    3237: 18       POP   A
    3238: 54 F9    MOV   [X-7],A
    323A: 38 FC    ADD   SP,0xFC
    323C: 52 F9    MOV   A,[X-7]
    323E: 08       PUSH  A
    323F: 52 FA    MOV   A,[X-6]
    3241: 08       PUSH  A
    3242: 52 FB    MOV   A,[X-5]
    3244: 08       PUSH  A
    3245: 52 FC    MOV   A,[X-4]
    3247: 08       PUSH  A
    3248: 7C 2D 67 LCALL _floorf
    324B: 38 FC    ADD   SP,0xFC
    324D: 62 D0 05 MOV   REG[0xD0],0x5
    3250: 51 2E    MOV   A,[__r0]
    3252: 54 00    MOV   [X+0],A
    3254: 51 2D    MOV   A,[__r1]
    3256: 54 01    MOV   [X+1],A
    3258: 51 2C    MOV   A,[__r2]
    325A: 54 02    MOV   [X+2],A
    325C: 51 2B    MOV   A,[__r3]
    325E: 54 03    MOV   [X+3],A
    3260: 52 00    MOV   A,[X+0]
    3262: 08       PUSH  A
    3263: 52 01    MOV   A,[X+1]
    3265: 08       PUSH  A
    3266: 52 02    MOV   A,[X+2]
    3268: 08       PUSH  A
    3269: 52 03    MOV   A,[X+3]
    326B: 08       PUSH  A
    326C: 52 F9    MOV   A,[X-7]
    326E: 08       PUSH  A
    326F: 52 FA    MOV   A,[X-6]
    3271: 08       PUSH  A
    3272: 52 FB    MOV   A,[X-5]
    3274: 08       PUSH  A
    3275: 52 FC    MOV   A,[X-4]
    3277: 08       PUSH  A
    3278: 7C 24 F8 LCALL 0x24F8
    327B: 18       POP   A
    327C: 54 FC    MOV   [X-4],A
    327E: 18       POP   A
    327F: 54 FB    MOV   [X-5],A
    3281: 18       POP   A
    3282: 54 FA    MOV   [X-6],A
    3284: 18       POP   A
    3285: 54 F9    MOV   [X-7],A
    3287: 38 FC    ADD   SP,0xFC
    3289: 50 47    MOV   A,0x47
    328B: 08       PUSH  A
    328C: 50 00    MOV   A,0x0
    328E: 08       PUSH  A
    328F: 08       PUSH  A
    3290: 08       PUSH  A
    3291: 52 00    MOV   A,[X+0]
    3293: 08       PUSH  A
    3294: 52 01    MOV   A,[X+1]
    3296: 08       PUSH  A
    3297: 52 02    MOV   A,[X+2]
    3299: 08       PUSH  A
    329A: 52 03    MOV   A,[X+3]
    329C: 08       PUSH  A
    329D: 7C 22 8E LCALL 0x228E
    32A0: 38 F8    ADD   SP,0xF8
    32A2: 39 FF    CMP   A,0xFF
    32A4: A0 47    JZ    0x32EC
    32A6: 50 47    MOV   A,0x47
    32A8: 08       PUSH  A
    32A9: 50 00    MOV   A,0x0
    32AB: 08       PUSH  A
    32AC: 08       PUSH  A
    32AD: 08       PUSH  A
    32AE: 52 00    MOV   A,[X+0]
    32B0: 08       PUSH  A
    32B1: 52 01    MOV   A,[X+1]
    32B3: 08       PUSH  A
    32B4: 52 02    MOV   A,[X+2]
    32B6: 08       PUSH  A
    32B7: 52 03    MOV   A,[X+3]
    32B9: 08       PUSH  A
    32BA: 7C 24 F8 LCALL 0x24F8
    32BD: 18       POP   A
    32BE: 53 2B    MOV   [__r3],A
    32C0: 18       POP   A
    32C1: 53 2C    MOV   [__r2],A
    32C3: 18       POP   A
    32C4: 53 2D    MOV   [__r1],A
    32C6: 18       POP   A
    32C7: 38 FC    ADD   SP,0xFC
    32C9: 08       PUSH  A
    32CA: 51 2D    MOV   A,[__r1]
    32CC: 08       PUSH  A
    32CD: 51 2C    MOV   A,[__r2]
    32CF: 08       PUSH  A
    32D0: 51 2B    MOV   A,[__r3]
    32D2: 08       PUSH  A
    32D3: 7C 20 7D LCALL 0x207D
    32D6: 18       POP   A
    32D7: 53 2D    MOV   [__r1],A
    32D9: 18       POP   A
    32DA: 53 2E    MOV   [__r0],A
    32DC: 38 FE    ADD   SP,0xFE
    32DE: 51 2D    MOV   A,[__r1]
    32E0: 01 00    ADD   A,0x0
    32E2: 54 07    MOV   [X+7],A
    32E4: 51 2E    MOV   A,[__r0]
    32E6: 09 80    ADC   A,0x80
    32E8: 54 06    MOV   [X+6],A
    32EA: 80 23    JMP   0x330E
    32EC: 62 D0 05 MOV   REG[0xD0],0x5
    32EF: 52 00    MOV   A,[X+0]
    32F1: 08       PUSH  A
    32F2: 52 01    MOV   A,[X+1]
    32F4: 08       PUSH  A
    32F5: 52 02    MOV   A,[X+2]
    32F7: 08       PUSH  A
    32F8: 52 03    MOV   A,[X+3]
    32FA: 08       PUSH  A
    32FB: 7C 20 7D LCALL 0x207D
    32FE: 18       POP   A
    32FF: 53 2D    MOV   [__r1],A
    3301: 18       POP   A
    3302: 53 2E    MOV   [__r0],A
    3304: 38 FE    ADD   SP,0xFE
    3306: 51 2D    MOV   A,[__r1]
    3308: 54 07    MOV   [X+7],A
    330A: 51 2E    MOV   A,[__r0]
    330C: 54 06    MOV   [X+6],A
    330E: 62 D0 05 MOV   REG[0xD0],0x5
    3311: 52 F8    MOV   A,[X-8]
    3313: 53 2D    MOV   [__r1],A
    3315: 55 2E 00 MOV   [__r0],0x0
    3318: 52 07    MOV   A,[X+7]
    331A: 02 2D    ADD   A,[__r1]
    331C: 53 2D    MOV   [__r1],A
    331E: 50 00    MOV   A,0x0
    3320: 0A 2E    ADC   A,[__r0]
    3322: 53 2E    MOV   [__r0],A
    3324: 50 00    MOV   A,0x0
    3326: 08       PUSH  A
    3327: 50 04    MOV   A,0x4
    3329: 08       PUSH  A
    332A: 51 2E    MOV   A,[__r0]
    332C: 08       PUSH  A
    332D: 51 2D    MOV   A,[__r1]
    332F: 08       PUSH  A
    3330: 7C 20 20 LCALL 0x2020
    3333: 38 FE    ADD   SP,0xFE
    3335: 18       POP   A
    3336: 54 05    MOV   [X+5],A
    3338: 18       POP   A
    3339: 54 04    MOV   [X+4],A
    333B: 3D 04 00 CMP   [X+4],0x0
    333E: B0 06    JNZ   0x3345
    3340: 3D 05 01 CMP   [X+5],0x1
    3343: A0 17    JZ    0x335B
    3345: 3D 04 00 CMP   [X+4],0x0
    3348: B0 06    JNZ   0x334F
    334A: 3D 05 02 CMP   [X+5],0x2
    334D: A0 39    JZ    0x3387
    334F: 3D 04 00 CMP   [X+4],0x0
    3352: B0 06    JNZ   0x3359
    3354: 3D 05 03 CMP   [X+5],0x3
    3357: A0 34    JZ    0x338C
    3359: 80 5C    JMP   0x33B6
    335B: 52 F9    MOV   A,[X-7]
    335D: 08       PUSH  A
    335E: 52 FA    MOV   A,[X-6]
    3360: 08       PUSH  A
    3361: 52 FB    MOV   A,[X-5]
    3363: 08       PUSH  A
    3364: 52 FC    MOV   A,[X-4]
    3366: 08       PUSH  A
    3367: 50 3F    MOV   A,0x3F
    3369: 08       PUSH  A
    336A: 50 80    MOV   A,0x80
    336C: 08       PUSH  A
    336D: 50 00    MOV   A,0x0
    336F: 08       PUSH  A
    3370: 08       PUSH  A
    3371: 62 D0 05 MOV   REG[0xD0],0x5
    3374: 7C 24 F8 LCALL 0x24F8
    3377: 18       POP   A
    3378: 54 FC    MOV   [X-4],A
    337A: 18       POP   A
    337B: 54 FB    MOV   [X-5],A
    337D: 18       POP   A
    337E: 54 FA    MOV   [X-6],A
    3380: 18       POP   A
    3381: 54 F9    MOV   [X-7],A
    3383: 38 FC    ADD   SP,0xFC
    3385: 80 30    JMP   0x33B6
    3387: 37 F9 80 XOR   [X-7],0x80
    338A: 80 2B    JMP   0x33B6
    338C: 50 3F    MOV   A,0x3F
    338E: 08       PUSH  A
    338F: 50 80    MOV   A,0x80
    3391: 08       PUSH  A
    3392: 50 00    MOV   A,0x0
    3394: 08       PUSH  A
    3395: 08       PUSH  A
    3396: 52 F9    MOV   A,[X-7]
    3398: 08       PUSH  A
    3399: 52 FA    MOV   A,[X-6]
    339B: 08       PUSH  A
    339C: 52 FB    MOV   A,[X-5]
    339E: 08       PUSH  A
    339F: 52 FC    MOV   A,[X-4]
    33A1: 08       PUSH  A
    33A2: 62 D0 05 MOV   REG[0xD0],0x5
    33A5: 7C 24 F8 LCALL 0x24F8
    33A8: 18       POP   A
    33A9: 54 FC    MOV   [X-4],A
    33AB: 18       POP   A
    33AC: 54 FB    MOV   [X-5],A
    33AE: 18       POP   A
    33AF: 54 FA    MOV   [X-6],A
    33B1: 18       POP   A
    33B2: 54 F9    MOV   [X-7],A
    33B4: 38 FC    ADD   SP,0xFC
    33B6: 52 F9    MOV   A,[X-7]
    33B8: 08       PUSH  A
    33B9: 52 FA    MOV   A,[X-6]
    33BB: 08       PUSH  A
    33BC: 52 FB    MOV   A,[X-5]
    33BE: 08       PUSH  A
    33BF: 52 FC    MOV   A,[X-4]
    33C1: 08       PUSH  A
    33C2: 52 F9    MOV   A,[X-7]
    33C4: 08       PUSH  A
    33C5: 52 FA    MOV   A,[X-6]
    33C7: 08       PUSH  A
    33C8: 52 FB    MOV   A,[X-5]
    33CA: 08       PUSH  A
    33CB: 52 FC    MOV   A,[X-4]
    33CD: 08       PUSH  A
    33CE: 62 D0 05 MOV   REG[0xD0],0x5
    33D1: 7C 23 CE LCALL 0x23CE
    33D4: 18       POP   A
    33D5: 54 03    MOV   [X+3],A
    33D7: 18       POP   A
    33D8: 54 02    MOV   [X+2],A
    33DA: 18       POP   A
    33DB: 54 01    MOV   [X+1],A
    33DD: 18       POP   A
    33DE: 54 00    MOV   [X+0],A
    33E0: 38 FC    ADD   SP,0xFC
    33E2: 52 00    MOV   A,[X+0]
    33E4: 08       PUSH  A
    33E5: 52 01    MOV   A,[X+1]
    33E7: 08       PUSH  A
    33E8: 52 02    MOV   A,[X+2]
    33EA: 08       PUSH  A
    33EB: 52 03    MOV   A,[X+3]
    33ED: 08       PUSH  A
    33EE: 50 41    MOV   A,0x41
    33F0: 08       PUSH  A
    33F1: 50 26    MOV   A,0x26
    33F3: 08       PUSH  A
    33F4: 50 C4    MOV   A,0xC4
    33F6: 08       PUSH  A
    33F7: 50 B1    MOV   A,0xB1
    33F9: 08       PUSH  A
    33FA: 7C 23 CE LCALL 0x23CE
    33FD: 18       POP   A
    33FE: 53 2B    MOV   [__r3],A
    3400: 18       POP   A
    3401: 53 2C    MOV   [__r2],A
    3403: 18       POP   A
    3404: 53 2D    MOV   [__r1],A
    3406: 18       POP   A
    3407: 53 2E    MOV   [__r0],A
    3409: 38 FC    ADD   SP,0xFC
    340B: 50 43    MOV   A,0x43
    340D: 08       PUSH  A
    340E: 50 2D    MOV   A,0x2D
    3410: 08       PUSH  A
    3411: 50 E5    MOV   A,0xE5
    3413: 08       PUSH  A
    3414: 50 1D    MOV   A,0x1D
    3416: 08       PUSH  A
    3417: 51 2E    MOV   A,[__r0]
    3419: 08       PUSH  A
    341A: 51 2D    MOV   A,[__r1]
    341C: 08       PUSH  A
    341D: 51 2C    MOV   A,[__r2]
    341F: 08       PUSH  A
    3420: 51 2B    MOV   A,[__r3]
    3422: 08       PUSH  A
    3423: 7C 24 F8 LCALL 0x24F8
    3426: 18       POP   A
    3427: 53 2B    MOV   [__r3],A
    3429: 18       POP   A
    342A: 53 2C    MOV   [__r2],A
    342C: 18       POP   A
    342D: 53 2D    MOV   [__r1],A
    342F: 18       POP   A
    3430: 38 FC    ADD   SP,0xFC
    3432: 08       PUSH  A
    3433: 51 2D    MOV   A,[__r1]
    3435: 08       PUSH  A
    3436: 51 2C    MOV   A,[__r2]
    3438: 08       PUSH  A
    3439: 51 2B    MOV   A,[__r3]
    343B: 08       PUSH  A
    343C: 52 00    MOV   A,[X+0]
    343E: 08       PUSH  A
    343F: 52 01    MOV   A,[X+1]
    3441: 08       PUSH  A
    3442: 52 02    MOV   A,[X+2]
    3444: 08       PUSH  A
    3445: 52 03    MOV   A,[X+3]
    3447: 08       PUSH  A
    3448: 7C 23 CE LCALL 0x23CE
    344B: 18       POP   A
    344C: 53 2B    MOV   [__r3],A
    344E: 18       POP   A
    344F: 53 2C    MOV   [__r2],A
    3451: 18       POP   A
    3452: 53 2D    MOV   [__r1],A
    3454: 18       POP   A
    3455: 53 2E    MOV   [__r0],A
    3457: 38 FC    ADD   SP,0xFC
    3459: 50 44    MOV   A,0x44
    345B: 08       PUSH  A
    345C: 50 04    MOV   A,0x4
    345E: 08       PUSH  A
    345F: 50 53    MOV   A,0x53
    3461: 08       PUSH  A
    3462: 50 4C    MOV   A,0x4C
    3464: 08       PUSH  A
    3465: 51 2E    MOV   A,[__r0]
    3467: 08       PUSH  A
    3468: 51 2D    MOV   A,[__r1]
    346A: 08       PUSH  A
    346B: 51 2C    MOV   A,[__r2]
    346D: 08       PUSH  A
    346E: 51 2B    MOV   A,[__r3]
    3470: 08       PUSH  A
    3471: 7C 21 8E LCALL 0x218E
    3474: 18       POP   A
    3475: 53 2B    MOV   [__r3],A
    3477: 18       POP   A
    3478: 53 2C    MOV   [__r2],A
    347A: 18       POP   A
    347B: 53 2D    MOV   [__r1],A
    347D: 18       POP   A
    347E: 38 FC    ADD   SP,0xFC
    3480: 08       PUSH  A
    3481: 51 2D    MOV   A,[__r1]
    3483: 08       PUSH  A
    3484: 51 2C    MOV   A,[__r2]
    3486: 08       PUSH  A
    3487: 51 2B    MOV   A,[__r3]
    3489: 08       PUSH  A
    348A: 52 F9    MOV   A,[X-7]
    348C: 08       PUSH  A
    348D: 52 FA    MOV   A,[X-6]
    348F: 08       PUSH  A
    3490: 52 FB    MOV   A,[X-5]
    3492: 08       PUSH  A
    3493: 52 FC    MOV   A,[X-4]
    3495: 08       PUSH  A
    3496: 7C 23 CE LCALL 0x23CE
    3499: 18       POP   A
    349A: 53 2B    MOV   [__r3],A
    349C: 18       POP   A
    349D: 53 2C    MOV   [__r2],A
    349F: 18       POP   A
    34A0: 53 2D    MOV   [__r1],A
    34A2: 18       POP   A
    34A3: 53 2E    MOV   [__r0],A
    34A5: 38 FC    ADD   SP,0xFC
    34A7: 50 41    MOV   A,0x41
    34A9: 08       PUSH  A
    34AA: 50 DE    MOV   A,0xDE
    34AC: 08       PUSH  A
    34AD: 50 ED    MOV   A,0xED
    34AF: 08       PUSH  A
    34B0: 50 11    MOV   A,0x11
    34B2: 08       PUSH  A
    34B3: 52 00    MOV   A,[X+0]
    34B5: 08       PUSH  A
    34B6: 52 01    MOV   A,[X+1]
    34B8: 08       PUSH  A
    34B9: 52 02    MOV   A,[X+2]
    34BB: 08       PUSH  A
    34BC: 52 03    MOV   A,[X+3]
    34BE: 08       PUSH  A
    34BF: 7C 21 8E LCALL 0x218E
    34C2: 18       POP   A
    34C3: 53 27    MOV   [__r7],A
    34C5: 18       POP   A
    34C6: 53 28    MOV   [__r6],A
    34C8: 18       POP   A
    34C9: 53 29    MOV   [__r5],A
    34CB: 18       POP   A
    34CC: 38 FC    ADD   SP,0xFC
    34CE: 08       PUSH  A
    34CF: 51 29    MOV   A,[__r5]
    34D1: 08       PUSH  A
    34D2: 51 28    MOV   A,[__r6]
    34D4: 08       PUSH  A
    34D5: 51 27    MOV   A,[__r7]
    34D7: 08       PUSH  A
    34D8: 52 00    MOV   A,[X+0]
    34DA: 08       PUSH  A
    34DB: 52 01    MOV   A,[X+1]
    34DD: 08       PUSH  A
    34DE: 52 02    MOV   A,[X+2]
    34E0: 08       PUSH  A
    34E1: 52 03    MOV   A,[X+3]
    34E3: 08       PUSH  A
    34E4: 7C 23 CE LCALL 0x23CE
    34E7: 18       POP   A
    34E8: 53 27    MOV   [__r7],A
    34EA: 18       POP   A
    34EB: 53 28    MOV   [__r6],A
    34ED: 18       POP   A
    34EE: 53 29    MOV   [__r5],A
    34F0: 18       POP   A
    34F1: 53 2A    MOV   [__r4],A
    34F3: 38 FC    ADD   SP,0xFC
    34F5: 50 43    MOV   A,0x43
    34F7: 08       PUSH  A
    34F8: 50 A8    MOV   A,0xA8
    34FA: 08       PUSH  A
    34FB: 50 7B    MOV   A,0x7B
    34FD: 08       PUSH  A
    34FE: 50 5E    MOV   A,0x5E
    3500: 08       PUSH  A
    3501: 51 2A    MOV   A,[__r4]
    3503: 08       PUSH  A
    3504: 51 29    MOV   A,[__r5]
    3506: 08       PUSH  A
    3507: 51 28    MOV   A,[__r6]
    3509: 08       PUSH  A
    350A: 51 27    MOV   A,[__r7]
    350C: 08       PUSH  A
    350D: 7C 21 8E LCALL 0x218E
    3510: 18       POP   A
    3511: 53 27    MOV   [__r7],A
    3513: 18       POP   A
    3514: 53 28    MOV   [__r6],A
    3516: 18       POP   A
    3517: 53 29    MOV   [__r5],A
    3519: 18       POP   A
    351A: 38 FC    ADD   SP,0xFC
    351C: 08       PUSH  A
    351D: 51 29    MOV   A,[__r5]
    351F: 08       PUSH  A
    3520: 51 28    MOV   A,[__r6]
    3522: 08       PUSH  A
    3523: 51 27    MOV   A,[__r7]
    3525: 08       PUSH  A
    3526: 51 2E    MOV   A,[__r0]
    3528: 08       PUSH  A
    3529: 51 2D    MOV   A,[__r1]
    352B: 08       PUSH  A
    352C: 51 2C    MOV   A,[__r2]
    352E: 08       PUSH  A
    352F: 51 2B    MOV   A,[__r3]
    3531: 08       PUSH  A
    3532: 7C 22 EB LCALL 0x22EB
    3535: 18       POP   A
    3536: 53 2B    MOV   [__r3],A
    3538: 18       POP   A
    3539: 53 2C    MOV   [__r2],A
    353B: 18       POP   A
    353C: 53 2D    MOV   [__r1],A
    353E: 18       POP   A
    353F: 53 2E    MOV   [__r0],A
    3541: 38 FC    ADD   SP,0xFC
    3543: 38 F8    ADD   SP,0xF8
    3545: 20       POP   X
    3546: 7F       RET   
_sinf:
    3547: 10       PUSH  X
    3548: 4F       MOV   X,SP
    3549: 50 00    MOV   A,0x0
    354B: 08       PUSH  A
    354C: 08       PUSH  A
    354D: 08       PUSH  A
    354E: 08       PUSH  A
    354F: 52 F9    MOV   A,[X-7]
    3551: 08       PUSH  A
    3552: 52 FA    MOV   A,[X-6]
    3554: 08       PUSH  A
    3555: 52 FB    MOV   A,[X-5]
    3557: 08       PUSH  A
    3558: 52 FC    MOV   A,[X-4]
    355A: 08       PUSH  A
    355B: 62 D0 05 MOV   REG[0xD0],0x5
    355E: 7C 22 8E LCALL 0x228E
    3561: 38 F8    ADD   SP,0xF8
    3563: 39 FF    CMP   A,0xFF
    3565: A0 16    JZ    0x357C
    3567: 50 00    MOV   A,0x0
    3569: 08       PUSH  A
    356A: 52 F9    MOV   A,[X-7]
    356C: 08       PUSH  A
    356D: 52 FA    MOV   A,[X-6]
    356F: 08       PUSH  A
    3570: 52 FB    MOV   A,[X-5]
    3572: 08       PUSH  A
    3573: 52 FC    MOV   A,[X-4]
    3575: 08       PUSH  A
    3576: 9C 94    CALL  _sinus
    3578: 38 FB    ADD   SP,0xFB
    357A: 80 30    JMP   0x35AB
    357C: 50 00    MOV   A,0x0
    357E: 08       PUSH  A
    357F: 62 D0 05 MOV   REG[0xD0],0x5
    3582: 52 F9    MOV   A,[X-7]
    3584: 53 2E    MOV   [__r0],A
    3586: 52 FA    MOV   A,[X-6]
    3588: 53 2D    MOV   [__r1],A
    358A: 52 FB    MOV   A,[X-5]
    358C: 53 2C    MOV   [__r2],A
    358E: 52 FC    MOV   A,[X-4]
    3590: 53 2B    MOV   [__r3],A
    3592: 36 2E 80 XOR   [__r0],0x80
    3595: 51 2E    MOV   A,[__r0]
    3597: 08       PUSH  A
    3598: 51 2D    MOV   A,[__r1]
    359A: 08       PUSH  A
    359B: 51 2C    MOV   A,[__r2]
    359D: 08       PUSH  A
    359E: 51 2B    MOV   A,[__r3]
    35A0: 08       PUSH  A
    35A1: 9C 69    CALL  _sinus
    35A3: 38 FB    ADD   SP,0xFB
    35A5: 62 D0 05 MOV   REG[0xD0],0x5
    35A8: 36 2E 80 XOR   [__r0],0x80
    35AB: 20       POP   X
    35AC: 7F       RET   
_sqrtf:
    35AD: 10       PUSH  X
    35AE: 4F       MOV   X,SP
    35AF: 38 0A    ADD   SP,0xA
    35B1: 50 00    MOV   A,0x0
    35B3: 08       PUSH  A
    35B4: 08       PUSH  A
    35B5: 08       PUSH  A
    35B6: 08       PUSH  A
    35B7: 52 F9    MOV   A,[X-7]
    35B9: 08       PUSH  A
    35BA: 52 FA    MOV   A,[X-6]
    35BC: 08       PUSH  A
    35BD: 52 FB    MOV   A,[X-5]
    35BF: 08       PUSH  A
    35C0: 52 FC    MOV   A,[X-4]
    35C2: 08       PUSH  A
    35C3: 62 D0 05 MOV   REG[0xD0],0x5
    35C6: 7C 22 8E LCALL 0x228E
    35C9: 38 F8    ADD   SP,0xF8
    35CB: 39 00    CMP   A,0x0
    35CD: A0 1F    JZ    0x35ED
    35CF: 39 01    CMP   A,0x1
    35D1: A0 1B    JZ    0x35ED
    35D3: 62 D0 05 MOV   REG[0xD0],0x5
    35D6: 55 52 01 MOV   [errno+1],0x1
    35D9: 55 51 00 MOV   [errno],0x0
    35DC: 62 D0 05 MOV   REG[0xD0],0x5
    35DF: 55 2E 00 MOV   [__r0],0x0
    35E2: 55 2D 00 MOV   [__r1],0x0
    35E5: 55 2C 00 MOV   [__r2],0x0
    35E8: 55 2B 00 MOV   [__r3],0x0
    35EB: 83 36    JMP   0x3922
    35ED: 50 00    MOV   A,0x0
    35EF: 08       PUSH  A
    35F0: 08       PUSH  A
    35F1: 08       PUSH  A
    35F2: 08       PUSH  A
    35F3: 52 F9    MOV   A,[X-7]
    35F5: 08       PUSH  A
    35F6: 52 FA    MOV   A,[X-6]
    35F8: 08       PUSH  A
    35F9: 52 FB    MOV   A,[X-5]
    35FB: 08       PUSH  A
    35FC: 52 FC    MOV   A,[X-4]
    35FE: 08       PUSH  A
    35FF: 62 D0 05 MOV   REG[0xD0],0x5
    3602: 7C 22 8E LCALL 0x228E
    3605: 38 F8    ADD   SP,0xF8
    3607: 39 00    CMP   A,0x0
    3609: B0 0F    JNZ   0x3619
    360B: 55 2E 00 MOV   [__r0],0x0
    360E: 55 2D 00 MOV   [__r1],0x0
    3611: 55 2C 00 MOV   [__r2],0x0
    3614: 55 2B 00 MOV   [__r3],0x0
    3617: 83 0A    JMP   0x3922
    3619: 62 D0 05 MOV   REG[0xD0],0x5
    361C: 50 07    MOV   A,0x7
    361E: 08       PUSH  A
    361F: 10       PUSH  X
    3620: 52 F9    MOV   A,[X-7]
    3622: 08       PUSH  A
    3623: 52 FA    MOV   A,[X-6]
    3625: 08       PUSH  A
    3626: 52 FB    MOV   A,[X-5]
    3628: 08       PUSH  A
    3629: 52 FC    MOV   A,[X-4]
    362B: 08       PUSH  A
    362C: 7C 2E 87 LCALL _frexpf
    362F: 38 FA    ADD   SP,0xFA
    3631: 62 D0 05 MOV   REG[0xD0],0x5
    3634: 51 2E    MOV   A,[__r0]
    3636: 54 02    MOV   [X+2],A
    3638: 51 2D    MOV   A,[__r1]
    363A: 54 03    MOV   [X+3],A
    363C: 51 2C    MOV   A,[__r2]
    363E: 54 04    MOV   [X+4],A
    3640: 51 2B    MOV   A,[__r3]
    3642: 54 05    MOV   [X+5],A
    3644: 52 01    MOV   A,[X+1]
    3646: 21 01    AND   A,0x1
    3648: 53 2D    MOV   [__r1],A
    364A: 52 00    MOV   A,[X+0]
    364C: 21 00    AND   A,0x0
    364E: 39 00    CMP   A,0x0
    3650: B0 06    JNZ   0x3657
    3652: 3C 2D 00 CMP   [__r1],0x0
    3655: A0 32    JZ    0x3688
    3657: 52 02    MOV   A,[X+2]
    3659: 08       PUSH  A
    365A: 52 03    MOV   A,[X+3]
    365C: 08       PUSH  A
    365D: 52 04    MOV   A,[X+4]
    365F: 08       PUSH  A
    3660: 52 05    MOV   A,[X+5]
    3662: 08       PUSH  A
    3663: 52 02    MOV   A,[X+2]
    3665: 08       PUSH  A
    3666: 52 03    MOV   A,[X+3]
    3668: 08       PUSH  A
    3669: 52 04    MOV   A,[X+4]
    366B: 08       PUSH  A
    366C: 52 05    MOV   A,[X+5]
    366E: 08       PUSH  A
    366F: 62 D0 05 MOV   REG[0xD0],0x5
    3672: 7C 21 8E LCALL 0x218E
    3675: 18       POP   A
    3676: 54 05    MOV   [X+5],A
    3678: 18       POP   A
    3679: 54 04    MOV   [X+4],A
    367B: 18       POP   A
    367C: 54 03    MOV   [X+3],A
    367E: 18       POP   A
    367F: 54 02    MOV   [X+2],A
    3681: 38 FC    ADD   SP,0xFC
    3683: 7B 01    DEC   [X+1]
    3685: 1F 00 00 SBB   [X+0],0x0
    3688: 62 D0 05 MOV   REG[0xD0],0x5
    368B: 50 3F    MOV   A,0x3F
    368D: 08       PUSH  A
    368E: 50 80    MOV   A,0x80
    3690: 08       PUSH  A
    3691: 50 00    MOV   A,0x0
    3693: 08       PUSH  A
    3694: 08       PUSH  A
    3695: 52 02    MOV   A,[X+2]
    3697: 08       PUSH  A
    3698: 52 03    MOV   A,[X+3]
    369A: 08       PUSH  A
    369B: 52 04    MOV   A,[X+4]
    369D: 08       PUSH  A
    369E: 52 05    MOV   A,[X+5]
    36A0: 08       PUSH  A
    36A1: 7C 21 8E LCALL 0x218E
    36A4: 18       POP   A
    36A5: 53 2B    MOV   [__r3],A
    36A7: 18       POP   A
    36A8: 53 2C    MOV   [__r2],A
    36AA: 18       POP   A
    36AB: 53 2D    MOV   [__r1],A
    36AD: 18       POP   A
    36AE: 38 FC    ADD   SP,0xFC
    36B0: 08       PUSH  A
    36B1: 51 2D    MOV   A,[__r1]
    36B3: 08       PUSH  A
    36B4: 51 2C    MOV   A,[__r2]
    36B6: 08       PUSH  A
    36B7: 51 2B    MOV   A,[__r3]
    36B9: 08       PUSH  A
    36BA: 50 3F    MOV   A,0x3F
    36BC: 08       PUSH  A
    36BD: 50 00    MOV   A,0x0
    36BF: 08       PUSH  A
    36C0: 08       PUSH  A
    36C1: 08       PUSH  A
    36C2: 7C 23 CE LCALL 0x23CE
    36C5: 18       POP   A
    36C6: 54 05    MOV   [X+5],A
    36C8: 18       POP   A
    36C9: 54 04    MOV   [X+4],A
    36CB: 18       POP   A
    36CC: 54 03    MOV   [X+3],A
    36CE: 18       POP   A
    36CF: 54 02    MOV   [X+2],A
    36D1: 38 FC    ADD   SP,0xFC
    36D3: 80 31    JMP   0x3705
    36D5: 52 02    MOV   A,[X+2]
    36D7: 08       PUSH  A
    36D8: 52 03    MOV   A,[X+3]
    36DA: 08       PUSH  A
    36DB: 52 04    MOV   A,[X+4]
    36DD: 08       PUSH  A
    36DE: 52 05    MOV   A,[X+5]
    36E0: 08       PUSH  A
    36E1: 50 4E    MOV   A,0x4E
    36E3: 08       PUSH  A
    36E4: 50 80    MOV   A,0x80
    36E6: 08       PUSH  A
    36E7: 50 00    MOV   A,0x0
    36E9: 08       PUSH  A
    36EA: 08       PUSH  A
    36EB: 62 D0 05 MOV   REG[0xD0],0x5
    36EE: 7C 23 CE LCALL 0x23CE
    36F1: 18       POP   A
    36F2: 54 05    MOV   [X+5],A
    36F4: 18       POP   A
    36F5: 54 04    MOV   [X+4],A
    36F7: 18       POP   A
    36F8: 54 03    MOV   [X+3],A
    36FA: 18       POP   A
    36FB: 54 02    MOV   [X+2],A
    36FD: 38 FC    ADD   SP,0xFC
    36FF: 17 01 3C SUB   [X+1],0x3C
    3702: 1F 00 00 SBB   [X+0],0x0
    3705: 50 3C    MOV   A,0x3C
    3707: 13 01    SUB   A,[X+1]
    3709: 52 00    MOV   A,[X+0]
    370B: 31 80    XOR   A,0x80
    370D: 62 D0 05 MOV   REG[0xD0],0x5
    3710: 53 22    MOV   [__rX],A
    3712: 50 80    MOV   A,0x80
    3714: 1A 22    SBB   A,[__rX]
    3716: CF BE    JC    0x36D5
    3718: 80 31    JMP   0x374A
    371A: 50 4E    MOV   A,0x4E
    371C: 08       PUSH  A
    371D: 50 80    MOV   A,0x80
    371F: 08       PUSH  A
    3720: 50 00    MOV   A,0x0
    3722: 08       PUSH  A
    3723: 08       PUSH  A
    3724: 52 02    MOV   A,[X+2]
    3726: 08       PUSH  A
    3727: 52 03    MOV   A,[X+3]
    3729: 08       PUSH  A
    372A: 52 04    MOV   A,[X+4]
    372C: 08       PUSH  A
    372D: 52 05    MOV   A,[X+5]
    372F: 08       PUSH  A
    3730: 62 D0 05 MOV   REG[0xD0],0x5
    3733: 7C 22 EB LCALL 0x22EB
    3736: 18       POP   A
    3737: 54 05    MOV   [X+5],A
    3739: 18       POP   A
    373A: 54 04    MOV   [X+4],A
    373C: 18       POP   A
    373D: 54 03    MOV   [X+3],A
    373F: 18       POP   A
    3740: 54 02    MOV   [X+2],A
    3742: 38 FC    ADD   SP,0xFC
    3744: 07 01 3C ADD   [X+1],0x3C
    3747: 0F 00 00 ADC   [X+0],0x0
    374A: 52 01    MOV   A,[X+1]
    374C: 11 C4    SUB   A,0xC4
    374E: 52 00    MOV   A,[X+0]
    3750: 31 80    XOR   A,0x80
    3752: 19 7F    SBB   A,0x7F
    3754: CF C5    JC    0x371A
    3756: 56 06 00 MOV   [X+6],0x0
    3759: 56 07 00 MOV   [X+7],0x0
    375C: 56 08 00 MOV   [X+8],0x0
    375F: 56 09 01 MOV   [X+9],0x1
    3762: 52 01    MOV   A,[X+1]
    3764: 11 00    SUB   A,0x0
    3766: 52 00    MOV   A,[X+0]
    3768: 31 80    XOR   A,0x80
    376A: 19 80    SBB   A,0x80
    376C: C0 89    JC    0x37F6
    376E: 62 D0 05 MOV   REG[0xD0],0x5
    3771: 52 01    MOV   A,[X+1]
    3773: 53 2D    MOV   [__r1],A
    3775: 52 00    MOV   A,[X+0]
    3777: 53 2E    MOV   [__r0],A
    3779: 68 2E    ASR   [__r0]
    377B: 6E 2D    RRC   [__r1]
    377D: 52 06    MOV   A,[X+6]
    377F: 53 2A    MOV   [__r4],A
    3781: 52 07    MOV   A,[X+7]
    3783: 53 29    MOV   [__r5],A
    3785: 52 08    MOV   A,[X+8]
    3787: 53 28    MOV   [__r6],A
    3789: 52 09    MOV   A,[X+9]
    378B: 53 27    MOV   [__r7],A
    378D: 51 2D    MOV   A,[__r1]
    378F: 21 1F    AND   A,0x1F
    3791: A0 0F    JZ    0x37A1
    3793: 62 D0 05 MOV   REG[0xD0],0x5
    3796: 65 27    ASL   [__r7]
    3798: 6B 28    RLC   [__r6]
    379A: 6B 29    RLC   [__r5]
    379C: 6B 2A    RLC   [__r4]
    379E: 78       DEC   A
    379F: BF F3    JNZ   0x3793
    37A1: 62 D0 05 MOV   REG[0xD0],0x5
    37A4: 51 2A    MOV   A,[__r4]
    37A6: 54 06    MOV   [X+6],A
    37A8: 51 29    MOV   A,[__r5]
    37AA: 54 07    MOV   [X+7],A
    37AC: 51 28    MOV   A,[__r6]
    37AE: 54 08    MOV   [X+8],A
    37B0: 51 27    MOV   A,[__r7]
    37B2: 54 09    MOV   [X+9],A
    37B4: 52 06    MOV   A,[X+6]
    37B6: 08       PUSH  A
    37B7: 52 07    MOV   A,[X+7]
    37B9: 08       PUSH  A
    37BA: 52 08    MOV   A,[X+8]
    37BC: 08       PUSH  A
    37BD: 52 09    MOV   A,[X+9]
    37BF: 08       PUSH  A
    37C0: 7C 25 D2 LCALL 0x25D2
    37C3: 18       POP   A
    37C4: 53 2B    MOV   [__r3],A
    37C6: 18       POP   A
    37C7: 53 2C    MOV   [__r2],A
    37C9: 18       POP   A
    37CA: 53 2D    MOV   [__r1],A
    37CC: 18       POP   A
    37CD: 08       PUSH  A
    37CE: 51 2D    MOV   A,[__r1]
    37D0: 08       PUSH  A
    37D1: 51 2C    MOV   A,[__r2]
    37D3: 08       PUSH  A
    37D4: 51 2B    MOV   A,[__r3]
    37D6: 08       PUSH  A
    37D7: 52 02    MOV   A,[X+2]
    37D9: 08       PUSH  A
    37DA: 52 03    MOV   A,[X+3]
    37DC: 08       PUSH  A
    37DD: 52 04    MOV   A,[X+4]
    37DF: 08       PUSH  A
    37E0: 52 05    MOV   A,[X+5]
    37E2: 08       PUSH  A
    37E3: 7C 23 CE LCALL 0x23CE
    37E6: 18       POP   A
    37E7: 54 05    MOV   [X+5],A
    37E9: 18       POP   A
    37EA: 54 04    MOV   [X+4],A
    37EC: 18       POP   A
    37ED: 54 03    MOV   [X+3],A
    37EF: 18       POP   A
    37F0: 54 02    MOV   [X+2],A
    37F2: 38 FC    ADD   SP,0xFC
    37F4: 80 8D    JMP   0x3882
    37F6: 62 D0 05 MOV   REG[0xD0],0x5
    37F9: 52 01    MOV   A,[X+1]
    37FB: 73       CPL   A
    37FC: 11 FF    SUB   A,0xFF
    37FE: 53 2D    MOV   [__r1],A
    3800: 52 00    MOV   A,[X+0]
    3802: 73       CPL   A
    3803: 19 FF    SBB   A,0xFF
    3805: 53 2E    MOV   [__r0],A
    3807: 68 2E    ASR   [__r0]
    3809: 6E 2D    RRC   [__r1]
    380B: 52 06    MOV   A,[X+6]
    380D: 53 2A    MOV   [__r4],A
    380F: 52 07    MOV   A,[X+7]
    3811: 53 29    MOV   [__r5],A
    3813: 52 08    MOV   A,[X+8]
    3815: 53 28    MOV   [__r6],A
    3817: 52 09    MOV   A,[X+9]
    3819: 53 27    MOV   [__r7],A
    381B: 51 2D    MOV   A,[__r1]
    381D: 21 1F    AND   A,0x1F
    381F: A0 0F    JZ    0x382F
    3821: 62 D0 05 MOV   REG[0xD0],0x5
    3824: 65 27    ASL   [__r7]
    3826: 6B 28    RLC   [__r6]
    3828: 6B 29    RLC   [__r5]
    382A: 6B 2A    RLC   [__r4]
    382C: 78       DEC   A
    382D: BF F3    JNZ   0x3821
    382F: 62 D0 05 MOV   REG[0xD0],0x5
    3832: 51 2A    MOV   A,[__r4]
    3834: 54 06    MOV   [X+6],A
    3836: 51 29    MOV   A,[__r5]
    3838: 54 07    MOV   [X+7],A
    383A: 51 28    MOV   A,[__r6]
    383C: 54 08    MOV   [X+8],A
    383E: 51 27    MOV   A,[__r7]
    3840: 54 09    MOV   [X+9],A
    3842: 52 06    MOV   A,[X+6]
    3844: 08       PUSH  A
    3845: 52 07    MOV   A,[X+7]
    3847: 08       PUSH  A
    3848: 52 08    MOV   A,[X+8]
    384A: 08       PUSH  A
    384B: 52 09    MOV   A,[X+9]
    384D: 08       PUSH  A
    384E: 7C 25 D2 LCALL 0x25D2
    3851: 18       POP   A
    3852: 53 2B    MOV   [__r3],A
    3854: 18       POP   A
    3855: 53 2C    MOV   [__r2],A
    3857: 18       POP   A
    3858: 53 2D    MOV   [__r1],A
    385A: 18       POP   A
    385B: 08       PUSH  A
    385C: 51 2D    MOV   A,[__r1]
    385E: 08       PUSH  A
    385F: 51 2C    MOV   A,[__r2]
    3861: 08       PUSH  A
    3862: 51 2B    MOV   A,[__r3]
    3864: 08       PUSH  A
    3865: 52 02    MOV   A,[X+2]
    3867: 08       PUSH  A
    3868: 52 03    MOV   A,[X+3]
    386A: 08       PUSH  A
    386B: 52 04    MOV   A,[X+4]
    386D: 08       PUSH  A
    386E: 52 05    MOV   A,[X+5]
    3870: 08       PUSH  A
    3871: 7C 22 EB LCALL 0x22EB
    3874: 18       POP   A
    3875: 54 05    MOV   [X+5],A
    3877: 18       POP   A
    3878: 54 04    MOV   [X+4],A
    387A: 18       POP   A
    387B: 54 03    MOV   [X+3],A
    387D: 18       POP   A
    387E: 54 02    MOV   [X+2],A
    3880: 38 FC    ADD   SP,0xFC
    3882: 56 01 00 MOV   [X+1],0x0
    3885: 56 00 00 MOV   [X+0],0x0
    3888: 62 D0 05 MOV   REG[0xD0],0x5
    388B: 52 02    MOV   A,[X+2]
    388D: 08       PUSH  A
    388E: 52 03    MOV   A,[X+3]
    3890: 08       PUSH  A
    3891: 52 04    MOV   A,[X+4]
    3893: 08       PUSH  A
    3894: 52 05    MOV   A,[X+5]
    3896: 08       PUSH  A
    3897: 52 F9    MOV   A,[X-7]
    3899: 08       PUSH  A
    389A: 52 FA    MOV   A,[X-6]
    389C: 08       PUSH  A
    389D: 52 FB    MOV   A,[X-5]
    389F: 08       PUSH  A
    38A0: 52 FC    MOV   A,[X-4]
    38A2: 08       PUSH  A
    38A3: 7C 22 EB LCALL 0x22EB
    38A6: 18       POP   A
    38A7: 53 2B    MOV   [__r3],A
    38A9: 18       POP   A
    38AA: 53 2C    MOV   [__r2],A
    38AC: 18       POP   A
    38AD: 53 2D    MOV   [__r1],A
    38AF: 18       POP   A
    38B0: 53 2E    MOV   [__r0],A
    38B2: 38 FC    ADD   SP,0xFC
    38B4: 52 02    MOV   A,[X+2]
    38B6: 08       PUSH  A
    38B7: 52 03    MOV   A,[X+3]
    38B9: 08       PUSH  A
    38BA: 52 04    MOV   A,[X+4]
    38BC: 08       PUSH  A
    38BD: 52 05    MOV   A,[X+5]
    38BF: 08       PUSH  A
    38C0: 51 2E    MOV   A,[__r0]
    38C2: 08       PUSH  A
    38C3: 51 2D    MOV   A,[__r1]
    38C5: 08       PUSH  A
    38C6: 51 2C    MOV   A,[__r2]
    38C8: 08       PUSH  A
    38C9: 51 2B    MOV   A,[__r3]
    38CB: 08       PUSH  A
    38CC: 7C 21 8E LCALL 0x218E
    38CF: 18       POP   A
    38D0: 53 2B    MOV   [__r3],A
    38D2: 18       POP   A
    38D3: 53 2C    MOV   [__r2],A
    38D5: 18       POP   A
    38D6: 53 2D    MOV   [__r1],A
    38D8: 18       POP   A
    38D9: 38 FC    ADD   SP,0xFC
    38DB: 08       PUSH  A
    38DC: 51 2D    MOV   A,[__r1]
    38DE: 08       PUSH  A
    38DF: 51 2C    MOV   A,[__r2]
    38E1: 08       PUSH  A
    38E2: 51 2B    MOV   A,[__r3]
    38E4: 08       PUSH  A
    38E5: 50 3F    MOV   A,0x3F
    38E7: 08       PUSH  A
    38E8: 50 00    MOV   A,0x0
    38EA: 08       PUSH  A
    38EB: 08       PUSH  A
    38EC: 08       PUSH  A
    38ED: 7C 23 CE LCALL 0x23CE
    38F0: 18       POP   A
    38F1: 54 05    MOV   [X+5],A
    38F3: 18       POP   A
    38F4: 54 04    MOV   [X+4],A
    38F6: 18       POP   A
    38F7: 54 03    MOV   [X+3],A
    38F9: 18       POP   A
    38FA: 54 02    MOV   [X+2],A
    38FC: 38 FC    ADD   SP,0xFC
    38FE: 77 01    INC   [X+1]
    3900: 0F 00 00 ADC   [X+0],0x0
    3903: 52 01    MOV   A,[X+1]
    3905: 11 02    SUB   A,0x2
    3907: 52 00    MOV   A,[X+0]
    3909: 31 80    XOR   A,0x80
    390B: 19 80    SBB   A,0x80
    390D: CF 7A    JC    0x3888
    390F: 62 D0 05 MOV   REG[0xD0],0x5
    3912: 52 02    MOV   A,[X+2]
    3914: 53 2E    MOV   [__r0],A
    3916: 52 03    MOV   A,[X+3]
    3918: 53 2D    MOV   [__r1],A
    391A: 52 04    MOV   A,[X+4]
    391C: 53 2C    MOV   [__r2],A
    391E: 52 05    MOV   A,[X+5]
    3920: 53 2B    MOV   [__r3],A
    3922: 38 F6    ADD   SP,0xF6
    3924: 20       POP   X
    3925: 7F       RET   
